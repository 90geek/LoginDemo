














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































DefinitionBlock (
	"DSDT.aml",	
	"DSDT",	
	
	
	0x02,	
	"ALASKA",	
	"A M I ",	
	0x01072009	
	)
{	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Name(ENTK, 0xa5)	
	Name(EXTK, 0xaa)	
	Name(IO1B, 0xa00)	
	Name(IO1L, 0x10)	
	Name(IO2B, 0xa10)	
	Name(IO2L, 0x10)	
	Name(IO3B, 0xa20)	
	Name(IO3L, 0x10)	
	Name(IO4B, 0xa30)	
	Name(IO4L, 0x10)	
	Name(IO5B, 0xa40)	
	Name(IO5L, 0x10)	
	Name(SP1O, 0x4e)	
	Name(KBFG, 0x0)	
	Name(MSFG, 0x0)	
	Name(IOES, 0x0)	
	Name(IPBT, 0xe4)	
	Name(IBUF, 0xe5)	
	Name(BTIM, 0xe6)	
	Name(IDTP, 0xca2)	
	Name(ICDP, 0xca3)	
	Name(SRVV, 0x200)	
	Name(BSMI, 0xc0)	
	Name(ASSB, 0x0)	
	Name(AOTB, 0x0)	
	Name(AAXB, 0x0)	
	Name(PEHP, 0x1)	
	Name(PEPM, 0x1)	
	Name(PEER, 0x1)	
	Name(PECS, 0x1)	
	Name(ITKE, 0x0)	
	Name(MBEC, 0xffff)	
	Name(PEBS, 0x80000000)	
	Name(PELN, 0x10000000)	
	Name(SRSI, 0xb2)	
	Name(CSMI, 0x61)	
	Name(DSSP, 0x0)	
	Name(FHPP, 0x0)	
	Name(SMIA, 0xb2)	
	Name(SMIB, 0xb3)	
	Name(OFST, 0x35)	
	Name(TRST, 0x2)	
	Name(TCMF, 0x0)	
	Name(TMF1, 0x0)	
	Name(TMF2, 0x0)	
	Name(TMF3, 0x0)	
	Name(TTPF, 0x1)	
	Name(DTPT, 0x0)	
	Name(TTDP, 0x0)	
	Name(TPMB, 0xffffffff)	
	Name(TPMC, 0xffffffff)	
	Name(TPMM, 0xfed40000)	
	Name(FTPM, 0xffffffff)	
	Name(AMDT, 0x0)	
	Name(TPMF, 0x0)	
	Name(SRCB, 0xfed1c000)	
	Name(SRCL, 0x4000)	
	Name(SUSW, 0xff)	
	Name(PMBA, 0x400)	
	Name(PMLN, 0x80)	
	Name(SMIP, 0xb2)	
	Name(APCB, 0xfec00000)	
	Name(APCL, 0x100000)	
	Name(PM30, 0x430)	
	Name(GPBS, 0x500)	
	Name(GPLN, 0x80)	
	Name(SMBS, 0x580)	
	Name(SMBL, 0x20)	
	Name(SHPC, 0x0)	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	





	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(PICM, 0)	
	
	
		Method(_PIC, 1) { 
	
			if(Arg0) {
				Store(0xAA, DBG8)	
			} else {
				Store(0xAC, DBG8)	 
			}
	
			Store(Arg0, PICM) 
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(OSVR, Ones)					
		Method(OSFL, 0){
			if(LNotEqual(OSVR, Ones)) {Return(OSVR)}	
			if(LEqual(PICM,0)) {Store(0xAC, DBG8)}		
			Store(3, OSVR)					
	
			if(CondRefOf(\_OSI,Local0))
			{
				
				If(\_OSI("Windows 2001")){Store(4, OSVR)}
				If(\_OSI("Windows 2001.1")){Store(5, OSVR)}		
				If(\_OSI("FreeBSD")){Store(6, OSVR)}
				If(\_OSI("HP-UX")){Store(7, OSVR)}
				If(\_OSI("OpenVMS")){Store(8, OSVR)}
	            If(\_OSI("Windows 2001 SP1")){Store(9,OSVR)}
	            If(\_OSI("Windows 2001 SP2")){Store(10,OSVR)}
	            If(\_OSI("Windows 2001 SP3")){Store(11,OSVR)}
	            If(\_OSI("Windows 2006")){Store(12,OSVR)}
	            If(\_OSI("Windows 2006 SP1")){Store(13,OSVR)}
	            If(\_OSI("Windows 2009")){Store(14,OSVR)}
	            If(\_OSI("Windows 2012")){Store(15,OSVR)}
	            If(\_OSI("Windows 2013")){Store(16,OSVR)}
			} else {
				If(MCTH(\_OS,"Microsoft Windows NT")){Store(0, OSVR)}
				If(MCTH(\_OS,"Microsoft Windows")){Store(1, OSVR)}
				If(MCTH(\_OS,"Microsoft WindowsME: Millennium Edition")){Store(2, OSVR)}
				If(MCTH(\_OS,"Linux")){Store(3, OSVR)}	
				If(MCTH(\_OS,"FreeBSD")){Store(6, OSVR)}
				If(MCTH(\_OS,"HP-UX")){Store(7, OSVR)}
				If(MCTH(\_OS,"OpenVMS")){Store(8, OSVR)}
			}
			Return(OSVR)
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Method(MCTH, 2) {
	
			If(LLess(Sizeof(Arg0), Sizeof(Arg1)))
			{
				Return(Zero)
			}
	
			Add(Sizeof(Arg0), 1, Local0)
	
			Name(BUF0, Buffer(Local0) {})
			Name(BUF1, Buffer(Local0) {})
			Store(Arg0, BUF0)
			Store(Arg1, BUF1)
			While(Local0)
			{
				Decrement(Local0)
				If(LNotEqual(Derefof(Index(BUF0, Local0)), Derefof(Index(BUF1, Local0))))
				{ Return(Zero) }
			}
			Return(One)		
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(PRWP, Package(){Zero, Zero})		
		Method(GPRW, 2)
		{
			Store(Arg0, Index(PRWP, 0))		
	
	                Store(ShiftLeft(SS1,1),Local0)      	
	                Or(Local0,ShiftLeft(SS2,2),Local0)      
	                Or(Local0,ShiftLeft(SS3,3),Local0)      
	                Or(Local0,ShiftLeft(SS4,4),Local0)      
	
								
			If(And(ShiftLeft(1, Arg1), Local0)){	
				Store(Arg1, Index(PRWP, 1))	
			} Else {  				
				ShiftRight(Local0, 1, Local0)	
				If(LOr(LEqual(OSFL, 1), LEqual(OSFL, 2))) { 	
					FindSetLeftBit(Local0, Index(PRWP,1))	
				} Else { 					
					FindSetRightBit(Local0, Index(PRWP,1))	
				}
			}
		Return(PRWP)
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		Name(WAKP, Package(){Zero, Zero})
	
	
	    Method(UPWP,1){
	            if(DeRefOf(Index(WAKP,0)))      
	            {
	                Store(0, Index(WAKP,1))     
	            } else {                
	                Store(Arg0, Index(WAKP,1))  
	            }
	    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		OperationRegion (DEB0, SystemIO, 0x80, 1)
		Field (DEB0, ByteAcc,NoLock,Preserve)
		{ DBG8,8,}
	
		OperationRegion (DEB1, SystemIO, 0x90, 2)
		Field (DEB1, WordAcc,NoLock,Preserve)
		{ DBG9,16,}
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Name(SS1,1)		
	Name(SS2,0)
	Name(SS3,1)
	Name(SS4,1)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Name(IOST,0xFFFF)		
							
	
	Name(TOPM,0xFFFFF)   	
	
	
	Name(ROMS,0xffe00000)	
	
	
	Name(VGAF, 0x1)         
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	




	





	



















	
	
	  
	  
	  
	  
	  External(\_SB.PCI0.HEC2._STA, MethodObj)
	  External(\_SB.PCI0.HEC2.HPTS, MethodObj)
	  External(\_SB.PCI0.HEC2.HWAK, MethodObj)
	
	
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	
	








	  
	  
	  
	  
	  
	  Name (\OSHF, 0)
	
	  
	  
	  
	  





	  



























	  
	  
	  Scope (\_SB) {
	  
	    Name (XCNT, 0)
	    Name (ECNT, 0)   
	    Name (OSYS, 0)   
	  
	  
	    
	    
	    
	    Method (_DSM, 4, Serialized) {
	      If (LEqual(Arg0,ToUUID("663E35AF-CC10-41A4-88EA-5470AF055295"))){
	  
	        
	        Switch (ToInteger(Arg2)) {
	          
	          
	          
	          Case(0)
	          {
	            Switch (ToInteger(Arg1)) {
	              Case(0) { 
	                If (Lequal(EMCA,1))
	                {
	                  Return ( Buffer() {0x3} )
	                }
	                Else
	                {
	                  Return (Buffer() {0})
	                }
	              }
	            }
	              
	          } 
	          
	          
	          
	          Case(1) {Return (LDIR) }
	          Default { }
	        } 
	      }
	  
	      Return (Buffer() {0})
	    }
	  
	  
	    Method (_INI) {
	  
	      If (CondRefOf (_OSI, Local0)) {
	  
	        If (\_OSI ("Windows 2001.1 SP1")) {
	          Store (5, OSYS)      
	        }
	  
	        If (\_OSI ("Windows 2001.1")) {
	          Store (6, OSYS)      
	        }
	  
	        If (\_OSI ("Windows 2001 SP2")) {
	          Store (7, OSYS)      
	        }
	  
	        If (\_OSI ("Windows 2001")) {
	          Store (8, OSYS)      
	        }
	  
	        If (\_OSI ("Windows 2006.1")) {
	          Store (9, OSYS)      
	        }
	  
	        If (\_OSI ("Windows 2006 SP1")) {
	          Store (10, OSYS)      
	        } 
	  
	        If (\_OSI ("Windows 2006")) {
	          Store (11, OSYS)      
	        }
	  
	        If (\_OSI ("Windows 2009")) {
	          Store (12, OSYS)      
	        }
	  
	        If (\_OSI ("Windows 2012")) {
	          Store (13, OSYS)      
	        }
	  
	        
	        
	        
	        If (\_OSI ("Linux")) {
	          Store (1, OSYS)
	        }
	  
	        If (\_OSI ("FreeBSD")) {
	          Store (2, OSYS)
	        }
	  
	        If (\_OSI ("HP-UX")) {
	          Store (3, OSYS)
	        }
	  
	        If (\_OSI ("OpenVMS")) {
	          Store (4, OSYS)
	        }
	  
	        
	        
	        
	        If (LGreaterEqual (\_SB.OSYS, 13)) {
	          
	          
	          
	          
	          
	          If (LEqual (XCNT, 0)) {
	            \_SB.PCI0.XHCI.XSEL(0)
	            Store (0x84, IO80)
	            Increment (XCNT)
	          }
	  






	        } Else {
	          Store (\_SB.OSYS, IO80)
	        }
	      }  
	    } 
	  } 

	
	
	
	
	  
	  
	  
	  
	  
	  Name(HWPE, 0) 
	  Name(PETE, 0)
	  Name(PSLM, Package(){0,0,0,0,0,0,0,0}) 
	  Name(TSLM, Package(){0,0,0,0,0,0,0,0}) 
	
	
	
	  
	  
	  
	  Name (\BBI0, 0x4C584946)    
	  Name (\BBI1, 0x4D584946)    
	  Name (\BBI2, 0x4E584946)    
	  Name (\BBI3, 0x4F584946)    
	  Name (\BBU0, 0x50584946)    
	  Name (\BBU1, 0x51584946)    
	  Name (\BBU2, 0x52584946)    
	  Name (\BBU3, 0x53584946)    
	  
	  
	  
	  
	  



	  
	  OperationRegion (DBG0, SystemIO, 0x80, 2)
	  Field (DBG0, ByteAcc,NoLock,Preserve) {
	    IO80, 8,
	    IO81, 8
	  }
	
	  
	  
	  
	  OperationRegion (ACMS, SystemIO, 0x72, 2)
	  Field ( ACMS, ByteAcc, NoLock, Preserve) {
	    INDX, 8,
	    DATA, 8
	  }
	
	  
	  
	  
	  OperationRegion (GPCT, SystemIO, 0x442, 1)
	  Field ( GPCT, ByteAcc, NoLock, Preserve) {
	          ,   1,
	    SGPC  ,   1,
	  }
	
	  
	  
	  
	  OperationRegion (GPIV, SystemIO, 0x52c, 2)
	  Field ( GPIV, ByteAcc, NoLock, Preserve) {
	    GP0I  ,   1,
	          ,   13, 
	    RASI  ,   1,
	  }
	
	
	  
	  
	  
	  OperationRegion (PSYS, SystemMemory, 0x30584946, 0x400) 
	  Field (PSYS, ByteAcc, NoLock, Preserve) {
	    PLAT   ,  32,   
	    Offset (0x04),
	    APC0   ,   1,   
	    APC1   ,   1,   
	    APC2   ,   1,   
	    APC3   ,   1,   
	    APC4   ,   1,   
	    Offset (0x05),
	    RES0   ,  8,    
	    TPME   ,  1,    
	    CSEN   ,  1,    
	    C3EN   ,  1,    
	    C6EN   ,  1,    
	    C7EN   ,  1,    
	    MWOS   ,  1,    
	    PSEN   ,  1,    
	    EMCA   ,  1,    
	    Offset (0x07),
	    HWAL   ,  1,    
	    KPRS   ,  1,    
	    MPRS   ,  1,    
	    TSEN   ,  1,    
	    FGTS   ,  1,    
	    OSCX   ,  1,    
	    RESX   ,  2,    
	    Offset (0x08),
	    
	    CPHP   ,  8,    
	                    
	                    
	                    
	                    
	                    
	    
	    IIOP   ,  8,    
	                    
	                    
	                    
	                    
	    
	    IIOH   ,  8,    
	    
	    CPUT   ,  8,    
	    
	    PRBM   , 32,    
	    P0ID   , 32,    
	    P1ID   , 32,    
	    P2ID   , 32,    
	    P3ID   , 32,    
	    P0BM   , 64,    
	    P1BM   , 64,    
	    P2BM   , 64,    
	    P3BM   , 64,    
	    MEBM   , 16,    
	    MEBC   , 16,    
	    CFMM   , 32,    
	    TSSZ   , 32,    
	    M0BS   , 64,    
	    M1BS   , 64,    
	    M2BS   , 64,    
	    M3BS   , 64,    
	    M4BS   , 64,    
	    M5BS   , 64,    
	    M6BS   , 64,    
	    M7BS   , 64,    
	    M0RN   , 64,    
	    M1RN   , 64,    
	    M2RN   , 64,    
	    M3RN   , 64,    
	    M4RN   , 64,    
	    M5RN   , 64,    
	    M6RN   , 64,    
	    M7RN   , 64,    
	    SMI0   , 32,    
	    SMI1   , 32,    
	    SMI2   , 32,    
	    SMI3   , 32,    
	    SCI0   , 32,    
	    SCI1   , 32,    
	    SCI2   , 32,    
	    SCI3   , 32,    
	    
	    
	    
	    MADD   , 64,    
	    CUU0   , 128,   
	    CUU1   , 128,   
	    CUU2   , 128,   
	    CUU3   , 128,   
	    CUU4   , 128,   
	    CUU5   , 128,   
	    CUU6   , 128,   
	    CUU7   , 128,   
	    CPSP   , 8,     
	    ME00   , 128,   
	    ME01   , 128,   
	    ME10   , 128,   
	    ME11   , 128,   
	    ME20   , 128,   
	    ME21   , 128,   
	    ME30   , 128,   
	    ME31   , 128,   
	    ME40   , 128,   
	    ME41   , 128,   
	    ME50   , 128,   
	    ME51   , 128,   
	    ME60   , 128,   
	    ME61   , 128,   
	    ME70   , 128,   
	    ME71   , 128,   
	    MESP   , 16,    
	    DHRD   , 192,   
	    ATSR   , 192,   
	    RHSA   , 192,   
	    LDIR   , 64,   
	    PRID   , 32,    
	
	    
	    WSIC   , 8,
	    WSIS   , 16,
	    WSIB   , 8,
	    WSID   , 8,
	    WSIF   , 8,
	    WSTS   , 8,
	    WHEA   , 8,
	    
	    
	    PFMA   , 64,    
	    PFMS   , 8,     
	    PFIO   , 16,    
	    CNBS   , 8,     
	
	    
	    XHMD   , 8,     
	    SBV1   , 8,     
	    SBV2   , 8,     
	    
	    
	    SBS3   , 8,    
	    SBS4   , 8,    
	
	    AHPE   , 8,     
	    CLOD   , 8,     
	    
	    HWEN   ,  2,    
	    ACEN   ,  1,    
	    RES1   ,  5,    
	    NITR   ,  8,    
	  }
	
	  
	  
	  
	  OperationRegion (GSTS, SystemIO, 0x422, 2)
	  Field ( GSTS, ByteAcc, NoLock, Preserve) {
	    GP00  , 1,
	          , 12,
	    GP13  , 1,
	  }
	
	  
	  
	  
	  OperationRegion (GPE0, SystemIO, 0x428, 8)
	  Field (GPE0, ByteAcc,NoLock,Preserve) {
	    ,1,
	    GPEH,1,
	    ,1,
	    USB1,1,
	    USB2,1,
	    USB5,1,
	    ,3, 
	    PCIE,1,
	    ,1,
	    PMEE,1,
	    USB3,1,
	    PMB0,1,
	    USB4,1,
	    ,9,
	    ,1,
	    ,7,
	    USB6,1,
	    ,15,
	  }
	
	  
	  
	  
	  OperationRegion (GPES, SystemIO, 0x420, 8)
	  Field (GPES, ByteAcc,NoLock,Preserve) {
	    ,1,
	    GPSH,1,
	    SGPS,1,
	    US1S,1,
	    US2S,1,
	    US5S,1,
	    ,1, 
	    SMWS,1,
	    ,1, 
	    PEES,1,
	    ,1,
	    PMES,1,
	    
	    US3S ,1,
	    PMBS,1,
	    US4S ,1,
	    ,9,
	    ,1,
	    ,7,
	    US6S,1,
	    ,15,
	  }
	  
	  
	  
	  
	  Method (IPTS, 1, NotSerialized)  
	  {
	    Store (0x72, IO80)  
	
	    
	    
	    
	    Store(1,US1S)
	    Store(1,US2S)
	    Store(1,US5S)
	    Store(1,SMWS)
	    Store(1,PMES)
	    Store(1,US3S)
	    Store(1,PMBS)
	    Store(1,US4S)
	    Store(1,US6S)
	
	    
	    
	    
	    Store(1,GPEH)
	    Store(1,USB1)
	    Store(1,USB2)
	    Store(1,USB5)
	    Store(1,PCIE)
	    Store(1,PMEE)
	    Store(1,USB3)
	    Store(1,PMB0)
	    Store(1,USB4)
	    Store(1,USB6)
	
	
	    
	    
	    
	    If (LEqual(Arg0,3)) {
	      Store (0xe0, \_SB.SMIS)
	      Store (0xbe, \_SB.SMIC)
	    }
	
	
	
	    
	    
	    
	    If (And (\_SB.PCI0.HEC2._STA(), 0x02)) {
	    \_SB.PCI0.HEC2.HPTS()
	    }
	
	  }
	
	  
	  
	  
	  Method (_GTS, 1, NotSerialized) {
	    Store (Arg0, IO80)
	  }
	
	  





	  



















	  
	  Scope (\_SB) {
	  
	  
	      Name (PRUN, Package() {
	          Package() { 0x0008FFFF, 0, LNKA, 0 },
	          Package() { 0x0008FFFF, 1, LNKB, 0 },
	          Package() { 0x0008FFFF, 2, LNKC, 0 },
	          Package() { 0x0008FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0009FFFF, 0, LNKA, 0 },
	          Package() { 0x0009FFFF, 1, LNKB, 0 },
	          Package() { 0x0009FFFF, 2, LNKC, 0 },
	          Package() { 0x0009FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x000AFFFF, 0, LNKA, 0 },
	          Package() { 0x000AFFFF, 1, LNKB, 0 },
	          Package() { 0x000AFFFF, 2, LNKC, 0 },
	          Package() { 0x000AFFFF, 3, LNKD, 0 },
	          
	          Package() { 0x000BFFFF, 0, LNKA, 0 },
	          Package() { 0x000BFFFF, 1, LNKB, 0 },
	          Package() { 0x000BFFFF, 2, LNKC, 0 },
	          Package() { 0x000BFFFF, 3, LNKD, 0 },
	          
	          Package() { 0x000CFFFF, 0, LNKA, 0 },
	          Package() { 0x000CFFFF, 1, LNKB, 0 },
	          Package() { 0x000CFFFF, 2, LNKC, 0 },
	          Package() { 0x000CFFFF, 3, LNKD, 0 },
	          
	          Package() { 0x000DFFFF, 0, LNKA, 0 },
	          Package() { 0x000DFFFF, 1, LNKB, 0 },
	          Package() { 0x000DFFFF, 2, LNKC, 0 },
	          Package() { 0x000DFFFF, 3, LNKD, 0 },
	          
	          Package() { 0x000EFFFF, 0, LNKA, 0 },
	          Package() { 0x000EFFFF, 1, LNKB, 0 },
	          Package() { 0x000EFFFF, 2, LNKC, 0 },
	          Package() { 0x000EFFFF, 3, LNKD, 0 },
	          
	          Package() { 0x000FFFFF, 0, LNKA, 0 },
	          Package() { 0x000FFFFF, 1, LNKB, 0 },
	          Package() { 0x000FFFFF, 2, LNKC, 0 },
	          Package() { 0x000FFFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0010FFFF, 0, LNKA, 0 },
	          Package() { 0x0010FFFF, 1, LNKB, 0 },
	          Package() { 0x0010FFFF, 2, LNKC, 0 },
	          Package() { 0x0010FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0011FFFF, 0, LNKA, 0 },
	          Package() { 0x0011FFFF, 1, LNKB, 0 },
	          Package() { 0x0011FFFF, 2, LNKC, 0 },
	          Package() { 0x0011FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0012FFFF, 0, LNKA, 0 },
	          Package() { 0x0012FFFF, 1, LNKB, 0 },
	          Package() { 0x0012FFFF, 2, LNKC, 0 },
	          Package() { 0x0012FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0013FFFF, 0, LNKA, 0 },
	          Package() { 0x0013FFFF, 1, LNKB, 0 },
	          Package() { 0x0013FFFF, 2, LNKC, 0 },
	          Package() { 0x0013FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0014FFFF, 0, LNKA, 0 },
	          Package() { 0x0014FFFF, 1, LNKB, 0 },
	          Package() { 0x0014FFFF, 2, LNKC, 0 },
	          Package() { 0x0014FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0016FFFF, 0, LNKA, 0 },
	          Package() { 0x0016FFFF, 1, LNKB, 0 },
	          Package() { 0x0016FFFF, 2, LNKC, 0 },
	          Package() { 0x0016FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0017FFFF, 0, LNKA, 0 },
	          Package() { 0x0017FFFF, 1, LNKB, 0 },
	          Package() { 0x0017FFFF, 2, LNKC, 0 },
	          Package() { 0x0017FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0018FFFF, 0, LNKA, 0 },
	          Package() { 0x0018FFFF, 1, LNKB, 0 },
	          Package() { 0x0018FFFF, 2, LNKC, 0 },
	          Package() { 0x0018FFFF, 3, LNKD, 0 },
	          
	          Package() { 0x0019FFFF, 0, LNKA, 0 },
	          Package() { 0x0019FFFF, 1, LNKB, 0 },
	          Package() { 0x0019FFFF, 2, LNKC, 0 },
	          Package() { 0x0019FFFF, 3, LNKD, 0 },
	  
	          Package() { 0x001CFFFF, 0, LNKA, 0 },
	          Package() { 0x001CFFFF, 1, LNKB, 0 },
	          Package() { 0x001CFFFF, 2, LNKC, 0 },
	          Package() { 0x001CFFFF, 3, LNKD, 0 },
	  
	          Package() { 0x001DFFFF, 0, LNKA, 0 },
	          Package() { 0x001DFFFF, 1, LNKB, 0 },
	          Package() { 0x001DFFFF, 2, LNKC, 0 },
	          Package() { 0x001DFFFF, 3, LNKD, 0 },
	  
	          Package() { 0x001EFFFF, 0, LNKA, 0 },
	          Package() { 0x001EFFFF, 1, LNKB, 0 },
	          Package() { 0x001EFFFF, 2, LNKC, 0 },
	          Package() { 0x001EFFFF, 3, LNKD, 0 },
	  
	          Package() { 0x001FFFFF, 0, LNKA, 0 },
	          Package() { 0x001FFFFF, 1, LNKB, 0 },
	          Package() { 0x001FFFFF, 2, LNKC, 0 },
	          Package() { 0x001FFFFF, 3, LNKD, 0 },
	      })
	  
	  
	    Name (ARUN, Package() {
	      Package() { 0x0008FFFF, 0, 0, 16 },
	      Package() { 0x0008FFFF, 1, 0, 17 },
	      Package() { 0x0008FFFF, 2, 0, 18 },
	      Package() { 0x0008FFFF, 3, 0, 19 },
	  
	      Package() { 0x0009FFFF, 0, 0, 16 },
	      Package() { 0x0009FFFF, 1, 0, 17 },
	      Package() { 0x0009FFFF, 2, 0, 18 },
	      Package() { 0x0009FFFF, 3, 0, 19 },
	  
	      Package() { 0x000AFFFF, 0, 0, 16 },
	      Package() { 0x000AFFFF, 1, 0, 17 },
	      Package() { 0x000AFFFF, 2, 0, 18 },
	      Package() { 0x000AFFFF, 3, 0, 19 },
	  
	      Package() { 0x000BFFFF, 0, 0, 16 },
	      Package() { 0x000BFFFF, 1, 0, 17 },
	      Package() { 0x000BFFFF, 2, 0, 18 },
	      Package() { 0x000BFFFF, 3, 0, 19 },
	  
	      Package() { 0x000CFFFF, 0, 0, 16 },
	      Package() { 0x000CFFFF, 1, 0, 17 },
	      Package() { 0x000CFFFF, 2, 0, 18 },
	      Package() { 0x000CFFFF, 3, 0, 19 },
	  
	      Package() { 0x000DFFFF, 0, 0, 16 },
	      Package() { 0x000DFFFF, 1, 0, 17 },
	      Package() { 0x000DFFFF, 2, 0, 18 },
	      Package() { 0x000DFFFF, 3, 0, 19 },
	  
	      Package() { 0x000EFFFF, 0, 0, 16 },
	      Package() { 0x000EFFFF, 1, 0, 17 },
	      Package() { 0x000EFFFF, 2, 0, 18 },
	      Package() { 0x000EFFFF, 3, 0, 19 },
	  
	      Package() { 0x000FFFFF, 0, 0, 16 },
	      Package() { 0x000FFFFF, 1, 0, 17 },
	      Package() { 0x000FFFFF, 2, 0, 18 },
	      Package() { 0x000FFFFF, 3, 0, 19 },
	  
	      Package() { 0x0010FFFF, 0, 0, 16 },
	      Package() { 0x0010FFFF, 1, 0, 17 },
	      Package() { 0x0010FFFF, 2, 0, 18 },
	      Package() { 0x0010FFFF, 3, 0, 19 },
	  
	      Package() { 0x0011FFFF, 0, 0, 16 },
	      Package() { 0x0011FFFF, 1, 0, 17 },
	      Package() { 0x0011FFFF, 2, 0, 18 },
	      Package() { 0x0011FFFF, 3, 0, 19 },
	  
	      Package() { 0x0012FFFF, 0, 0, 16 },
	      Package() { 0x0012FFFF, 1, 0, 17 },
	      Package() { 0x0012FFFF, 2, 0, 18 },
	      Package() { 0x0012FFFF, 3, 0, 19 },
	  
	      Package() { 0x0013FFFF, 0, 0, 16 },
	      Package() { 0x0013FFFF, 1, 0, 17 },
	      Package() { 0x0013FFFF, 2, 0, 18 },
	      Package() { 0x0013FFFF, 3, 0, 19 },
	  
	      Package() { 0x0014FFFF, 0, 0, 16 },
	      Package() { 0x0014FFFF, 1, 0, 17 },
	      Package() { 0x0014FFFF, 2, 0, 18 },
	      Package() { 0x0014FFFF, 3, 0, 19 },
	  
	      Package() { 0x0016FFFF, 0, 0, 16 },
	      Package() { 0x0016FFFF, 1, 0, 17 },
	      Package() { 0x0016FFFF, 2, 0, 18 },
	      Package() { 0x0016FFFF, 3, 0, 19 },
	  
	      Package() { 0x0017FFFF, 0, 0, 16 },
	      Package() { 0x0017FFFF, 1, 0, 17 },
	      Package() { 0x0017FFFF, 2, 0, 18 },
	      Package() { 0x0017FFFF, 3, 0, 19 },
	  
	      Package() { 0x0018FFFF, 0, 0, 16 },
	      Package() { 0x0018FFFF, 1, 0, 17 },
	      Package() { 0x0018FFFF, 2, 0, 18 },
	      Package() { 0x0018FFFF, 3, 0, 19 },
	  
	      Package() { 0x0019FFFF, 0, 0, 16 },
	      Package() { 0x0019FFFF, 1, 0, 17 },
	      Package() { 0x0019FFFF, 2, 0, 18 },
	      Package() { 0x0019FFFF, 3, 0, 19 },
	  
	      Package() { 0x001CFFFF, 0, 0, 16 },
	      Package() { 0x001CFFFF, 1, 0, 17 },
	      Package() { 0x001CFFFF, 2, 0, 18 },
	      Package() { 0x001CFFFF, 3, 0, 19 },
	  
	      Package() { 0x001DFFFF, 0, 0, 16 },
	      Package() { 0x001DFFFF, 1, 0, 17 },
	      Package() { 0x001DFFFF, 2, 0, 18 },
	      Package() { 0x001DFFFF, 3, 0, 19 },
	  
	      Package() { 0x001EFFFF, 0, 0, 16 },
	      Package() { 0x001EFFFF, 1, 0, 17 },
	      Package() { 0x001EFFFF, 2, 0, 18 },
	      Package() { 0x001EFFFF, 3, 0, 19 },
	  
	      Package() { 0x001FFFFF, 0, 0, 16 },
	      Package() { 0x001FFFFF, 1, 0, 17 },
	      Package() { 0x001FFFFF, 2, 0, 18 },
	      Package() { 0x001FFFFF, 3, 0, 19 },
	    })
	  
	    
	    
	    
	    
	    
	    
	    
	    Method(USTA, 1) {        
	      Store(0, Local6)
	      ShiftRight(PRBM, Arg0, Local6)
	      And(Local6, 0x1, Local6)
	      if(LEqual(Local6, 0x0)) {
	        Return(0x00)
	      } else {
	        Return(0x0F)
	      }
	    } 
	  
	    
	    
	    
	    Device (UNC3) {
	      Name (_HID, EISAID("PNP0A03"))
	      Name (_UID, 0xFF)
	      Method (_BBN, 0, NotSerialized) {
	        return (BBU3)
	      }
	      Name (_ADR, 0x00000000)
	      Name (_EJD, "\\_SB.SCK3")
	  
	      Method (_STA) {
	        Return(\_SB.USTA(3))
	      }
	  
	    Name (SUPP, 0)
	    Name (CTRL, 0)
	  
	    Method(_OSC,4) {
	      
	      
	      
	      CreateDWordField(Arg3,0,CDW1)
	      CreateDWordField(Arg3,4,CDW2)
	      If(LGreater(Arg2,2)) {
	        CreateDWordField(Arg3,8,CDW3)
	      }
	  
	        If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {
	          
	          
	          
	          Store(CDW2,SUPP)
	          Store(CDW3,CTRL)
	  
	          
	          
	          
	          
	          
	          If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
	            And(CTRL, 0x1E, CTRL) 
	            Sleep(1000)
	          }
	  
	          
	          
	          
	          And(CTRL, 0x1D, CTRL)
	          
	              
	              if (LNot(PEPM)) 
	              {
	                          And(CTRL,0x1B,CTRL) 
	                          
	              }
	              if (LNot(PEER))	
	              {
	                          And(CTRL,0x15,CTRL)
	              }
	              if (LNot(PECS)) 
	              {
	                          And(CTRL,0xF,CTRL)
	              }        
	              
	          If (Not(And(CDW1,1))) { 
	            
	            
	            
	            If (And(CTRL, 0x01)) { 
	  
	              \_SB.PCI0.BR1A.OSHP ()
	              \_SB.PCI0.BR1B.OSHP ()
	              \_SB.PCI0.BR2A.OSHP ()
	              \_SB.PCI0.BR2B.OSHP ()
	              \_SB.PCI0.BR2C.OSHP ()
	              \_SB.PCI0.BR2D.OSHP ()
	              \_SB.PCI0.BR3A.OSHP ()
	              \_SB.PCI0.BR3B.OSHP ()
	              \_SB.PCI0.BR3C.OSHP ()
	              \_SB.PCI0.BR3D.OSHP ()
	  
	              \_SB.PCI1.QRP0.OSHP ()
	              \_SB.PCI1.QR1A.OSHP ()
	              \_SB.PCI1.QR1B.OSHP ()
	              \_SB.PCI1.QR2A.OSHP ()
	              \_SB.PCI1.QR2B.OSHP ()
	              \_SB.PCI1.QR2C.OSHP ()
	              \_SB.PCI1.QR2D.OSHP ()
	              \_SB.PCI1.QR3A.OSHP ()
	              \_SB.PCI1.QR3B.OSHP ()
	              \_SB.PCI1.QR3C.OSHP ()
	              \_SB.PCI1.QR3D.OSHP ()
	  
	              \_SB.PCI2.RRP0.OSHP ()
	              \_SB.PCI2.RR1A.OSHP ()
	              \_SB.PCI2.RR1B.OSHP ()
	              \_SB.PCI2.RR2A.OSHP ()
	              \_SB.PCI2.RR2B.OSHP ()
	              \_SB.PCI2.RR2C.OSHP ()
	              \_SB.PCI2.RR2D.OSHP ()
	              \_SB.PCI2.RR3A.OSHP ()
	              \_SB.PCI2.RR3B.OSHP ()
	              \_SB.PCI2.RR3C.OSHP ()
	              \_SB.PCI2.RR3D.OSHP ()
	  
	              \_SB.PCI3.SRP0.OSHP ()
	              \_SB.PCI3.SR1A.OSHP ()
	              \_SB.PCI3.SR1B.OSHP ()
	              \_SB.PCI3.SR2A.OSHP ()
	              \_SB.PCI3.SR2B.OSHP ()
	              \_SB.PCI3.SR2C.OSHP ()
	              \_SB.PCI3.SR2D.OSHP ()
	              \_SB.PCI3.SR3A.OSHP ()
	              \_SB.PCI3.SR3B.OSHP ()
	              \_SB.PCI3.SR3C.OSHP ()
	              \_SB.PCI3.SR3D.OSHP ()
	  
	              Store (0x01, GPSH)                
	            }
	        }
	  
	            If (LNotEqual(Arg1,one)) { 
	              Or(CDW1,0x08,CDW1)
	            }
	  
	            If(LNotEqual(CDW3,CTRL)) { 
	              Or(CDW1,0x10,CDW1)
	            }
	            
	            
	            
	            Store(CTRL,CDW3)
	            Return(Arg3)
	  
	        } Else {
	          
	          
	          
	          
	          Or (CDW1,4,CDW1)
	          Store (0xEE, IO80)
	          Return(Arg3)
	        }
	    } 
	  
	      Name (_CRS, ResourceTemplate() {
	        WORDBusNumber (     
	          ResourceProducer, 
	          MinFixed,         
	          MaxFixed,         
	          PosDecode,        
	          0x4946,           
	          0x3458,           
	          0x0000,           
	          0x0000,           
	          0x0001           
	        )
	      })
	  
	      Method (_PRT, 0) {
	        If (LEqual(PICM, Zero)) {
	          Return (PRUN)
	        }
	        Return (ARUN)
	      }
	    }
	  
	    
	    
	    
	    Device (UNC2) {
	      Name (_HID, EISAID("PNP0A03"))
	      Name (_UID, 0xBF)
	      Method (_BBN, 0, NotSerialized) {
	        return (BBU2)
	      }
	      Name (_ADR, 0x00000000)
	      Name (_EJD, "\\_SB.SCK2")
	  
	      Method (_STA) {
	        Return(\_SB.USTA(2))
	      }   
	      
	    Name (SUPP, 0)
	    Name (CTRL, 0)
	  
	    Method(_OSC,4) {
	      
	      
	      
	      CreateDWordField(Arg3,0,CDW1)
	      CreateDWordField(Arg3,4,CDW2)
	      If(LGreater(Arg2,2)) {
	        CreateDWordField(Arg3,8,CDW3)
	      }
	  
	        If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {
	          
	          
	          
	          Store(CDW2,SUPP)
	          Store(CDW3,CTRL)
	  
	          
	          
	          
	          
	          
	  
	          If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
	            And(CTRL, 0x1E, CTRL) 
	            Sleep(1000)
	          }
	  
	          
	          
	          
	          And(CTRL, 0x1D, CTRL)
	          
	              
	              if (LNot(PEPM)) 
	              {
	                          And(CTRL,0x1B,CTRL) 
	                          
	              }
	              if (LNot(PEER))	
	              {
	                          And(CTRL,0x15,CTRL)
	              }
	              if (LNot(PECS)) 
	              {
	                          And(CTRL,0xF,CTRL)
	              }        
	              
	  
	          If (Not(And(CDW1,1))) { 
	            
	            
	            
	            If (And(CTRL, 0x01)) { 
	  
	              \_SB.PCI0.BR1A.OSHP ()
	              \_SB.PCI0.BR1B.OSHP ()
	              \_SB.PCI0.BR2A.OSHP ()
	              \_SB.PCI0.BR2B.OSHP ()
	              \_SB.PCI0.BR2C.OSHP ()
	              \_SB.PCI0.BR2D.OSHP ()
	              \_SB.PCI0.BR3A.OSHP ()
	              \_SB.PCI0.BR3B.OSHP ()
	              \_SB.PCI0.BR3C.OSHP ()
	              \_SB.PCI0.BR3D.OSHP ()
	  
	              \_SB.PCI1.QRP0.OSHP ()
	              \_SB.PCI1.QR1A.OSHP ()
	              \_SB.PCI1.QR1B.OSHP ()
	              \_SB.PCI1.QR2A.OSHP ()
	              \_SB.PCI1.QR2B.OSHP ()
	              \_SB.PCI1.QR2C.OSHP ()
	              \_SB.PCI1.QR2D.OSHP ()
	              \_SB.PCI1.QR3A.OSHP ()
	              \_SB.PCI1.QR3B.OSHP ()
	              \_SB.PCI1.QR3C.OSHP ()
	              \_SB.PCI1.QR3D.OSHP ()
	  
	              \_SB.PCI2.RRP0.OSHP ()
	              \_SB.PCI2.RR1A.OSHP ()
	              \_SB.PCI2.RR1B.OSHP ()
	              \_SB.PCI2.RR2A.OSHP ()
	              \_SB.PCI2.RR2B.OSHP ()
	              \_SB.PCI2.RR2C.OSHP ()
	              \_SB.PCI2.RR2D.OSHP ()
	              \_SB.PCI2.RR3A.OSHP ()
	              \_SB.PCI2.RR3B.OSHP ()
	              \_SB.PCI2.RR3C.OSHP ()
	              \_SB.PCI2.RR3D.OSHP ()
	  
	              \_SB.PCI3.SRP0.OSHP ()
	              \_SB.PCI3.SR1A.OSHP ()
	              \_SB.PCI3.SR1B.OSHP ()
	              \_SB.PCI3.SR2A.OSHP ()
	              \_SB.PCI3.SR2B.OSHP ()
	              \_SB.PCI3.SR2C.OSHP ()
	              \_SB.PCI3.SR2D.OSHP ()
	              \_SB.PCI3.SR3A.OSHP ()
	              \_SB.PCI3.SR3B.OSHP ()
	              \_SB.PCI3.SR3C.OSHP ()
	              \_SB.PCI3.SR3D.OSHP ()
	  
	              Store (0x01, GPSH)                
	            }
	        }
	  
	            If (LNotEqual(Arg1,one)) { 
	              Or(CDW1,0x08,CDW1)
	            }
	  
	            If(LNotEqual(CDW3,CTRL)) { 
	              Or(CDW1,0x10,CDW1)
	            }
	            
	            
	            
	            Store(CTRL,CDW3)
	            Return(Arg3)
	  
	        } Else {
	          
	          
	          
	          
	          Or (CDW1,4,CDW1)
	          Store (0xEE, IO80)
	          Return(Arg3)
	        }
	    } 
	    
	      Name (_CRS, ResourceTemplate() {
	        WORDBusNumber (     
	          ResourceProducer, 
	          MinFixed,         
	          MaxFixed,         
	          PosDecode,        
	          0x4946,           
	          0x3358,           
	          0x0000,           
	          0x0000,           
	          0x0001           
	        )
	      })
	  
	      Method (_PRT, 0) {
	        If (LEqual(PICM, Zero)) {
	          Return (PRUN)
	        }
	        Return (ARUN)
	      }
	    }
	  
	    
	    
	    
	    Device (UNC1) {
	      Name (_HID, EISAID("PNP0A03"))
	      Name (_UID, 0x7F)
	      Method (_BBN, 0, NotSerialized) {
	        return (BBU1)
	      }
	      Name (_ADR, 0x00000000)
	      Name (_EJD, "\\_SB.SCK1")
	  
	      Method (_STA) {
	        Return(\_SB.USTA(1))
	      }   
	    
	    Name (SUPP, 0)
	    Name (CTRL, 0)
	  
	    Method(_OSC,4) {
	      
	      
	      
	      CreateDWordField(Arg3,0,CDW1)
	      CreateDWordField(Arg3,4,CDW2)
	      If(LGreater(Arg2,2)) {
	        CreateDWordField(Arg3,8,CDW3)
	      }
	  
	  
	        If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {
	          
	          
	          
	          Store(CDW2,SUPP)
	          Store(CDW3,CTRL)
	  
	          
	          
	          
	          
	          
	          If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
	            And(CTRL, 0x1E, CTRL) 
	            Sleep(1000)
	          }
	  
	          
	          
	          
	          And(CTRL, 0x1D, CTRL)
	          
	              
	              if (LNot(PEPM)) 
	              {
	                          And(CTRL,0x1B,CTRL) 
	                          
	              }
	              if (LNot(PEER))	
	              {
	                          And(CTRL,0x15,CTRL)
	              }
	              if (LNot(PECS)) 
	              {
	                          And(CTRL,0xF,CTRL)
	              }        
	              
	  
	          If (Not(And(CDW1,1))) { 
	            
	            
	            
	            If (And(CTRL, 0x01)) { 
	  
	              \_SB.PCI0.BR1A.OSHP ()
	              \_SB.PCI0.BR1B.OSHP ()
	              \_SB.PCI0.BR2A.OSHP ()
	              \_SB.PCI0.BR2B.OSHP ()
	              \_SB.PCI0.BR2C.OSHP ()
	              \_SB.PCI0.BR2D.OSHP ()
	              \_SB.PCI0.BR3A.OSHP ()
	              \_SB.PCI0.BR3B.OSHP ()
	              \_SB.PCI0.BR3C.OSHP ()
	              \_SB.PCI0.BR3D.OSHP ()
	  
	              \_SB.PCI1.QRP0.OSHP ()
	              \_SB.PCI1.QR1A.OSHP ()
	              \_SB.PCI1.QR1B.OSHP ()
	              \_SB.PCI1.QR2A.OSHP ()
	              \_SB.PCI1.QR2B.OSHP ()
	              \_SB.PCI1.QR2C.OSHP ()
	              \_SB.PCI1.QR2D.OSHP ()
	              \_SB.PCI1.QR3A.OSHP ()
	              \_SB.PCI1.QR3B.OSHP ()
	              \_SB.PCI1.QR3C.OSHP ()
	              \_SB.PCI1.QR3D.OSHP ()
	  
	              \_SB.PCI2.RRP0.OSHP ()
	              \_SB.PCI2.RR1A.OSHP ()
	              \_SB.PCI2.RR1B.OSHP ()
	              \_SB.PCI2.RR2A.OSHP ()
	              \_SB.PCI2.RR2B.OSHP ()
	              \_SB.PCI2.RR2C.OSHP ()
	              \_SB.PCI2.RR2D.OSHP ()
	              \_SB.PCI2.RR3A.OSHP ()
	              \_SB.PCI2.RR3B.OSHP ()
	              \_SB.PCI2.RR3C.OSHP ()
	              \_SB.PCI2.RR3D.OSHP ()
	  
	              \_SB.PCI3.SRP0.OSHP ()
	              \_SB.PCI3.SR1A.OSHP ()
	              \_SB.PCI3.SR1B.OSHP ()
	              \_SB.PCI3.SR2A.OSHP ()
	              \_SB.PCI3.SR2B.OSHP ()
	              \_SB.PCI3.SR2C.OSHP ()
	              \_SB.PCI3.SR2D.OSHP ()
	              \_SB.PCI3.SR3A.OSHP ()
	              \_SB.PCI3.SR3B.OSHP ()
	              \_SB.PCI3.SR3C.OSHP ()
	              \_SB.PCI3.SR3D.OSHP ()
	  
	              Store (0x01, GPSH)                
	            }
	        }
	  
	            If (LNotEqual(Arg1,one)) { 
	              Or(CDW1,0x08,CDW1)
	            }
	  
	            If(LNotEqual(CDW3,CTRL)) { 
	              Or(CDW1,0x10,CDW1)
	            }
	            
	            
	            
	            Store(CTRL,CDW3)
	            Return(Arg3)
	  
	        } Else {
	          
	          
	          
	          
	          Or (CDW1,4,CDW1)
	          Store (0xEE, IO80)
	          Return(Arg3)
	        }
	    } 
	  
	      Name (_CRS, ResourceTemplate() {
	        WORDBusNumber (     
	          ResourceProducer, 
	          MinFixed,         
	          MaxFixed,         
	          PosDecode,        
	          0x4946,           
	          0x3258,           
	          0x0000,           
	          0x0000,           
	          0x0001           
	        )
	      })
	  
	      Method (_PRT, 0) {
	        If (LEqual(PICM, Zero)) {
	          Return (PRUN)
	        }
	        Return (ARUN)
	      }
	    }
	  
	    
	    
	    
	    Device (UNC0) {
	      Name (_HID, EISAID("PNP0A03"))
	      Name (_UID, 0x3F)
	      Method (_BBN, 0, NotSerialized) {
	        return (BBU0)
	      }
	      Name (_ADR, 0x00000000)
	      Name (_EJD, "\\_SB.SCK0")
	  
	      Method (_STA) {
	        Return(\_SB.USTA(0))
	      }
	  
	    Name (SUPP, 0)
	    Name (CTRL, 0)
	  
	    Method(_OSC,4) {
	      
	      
	      
	      CreateDWordField(Arg3,0,CDW1)
	      CreateDWordField(Arg3,4,CDW2)
	      If(LGreater(Arg2,2)) {
	        CreateDWordField(Arg3,8,CDW3)
	      }
	  
	      If (LEqual (Arg0, ToUUID("7C9512A9-1705-4CB4-AF7D-506A2423AB71"))) {
	        Return (\_SB.PCI0.XHCI.POSC(Arg1, Arg2, Arg3))
	      } Else {
	        If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {
	          
	          
	          
	          Store(CDW2,SUPP)
	          Store(CDW3,CTRL)
	  
	          
	          
	          
	          
	          
	          If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
	            And(CTRL, 0x1E, CTRL) 
	            Sleep(1000)
	          }
	  
	          
	          
	          
	          And(CTRL, 0x1D, CTRL)
	          
	              
	              if (LNot(PEPM)) 
	              {
	                          And(CTRL,0x1B,CTRL) 
	                          
	              }
	              if (LNot(PEER))	
	              {
	                          And(CTRL,0x15,CTRL)
	              }
	              if (LNot(PECS)) 
	              {
	                          And(CTRL,0xF,CTRL)
	              }        
	              
	  
	          If (Not(And(CDW1,1))) { 
	            
	            
	            
	            If (And(CTRL, 0x01)) { 
	  
	              \_SB.PCI0.BR1A.OSHP ()
	              \_SB.PCI0.BR1B.OSHP ()
	              \_SB.PCI0.BR2A.OSHP ()
	              \_SB.PCI0.BR2B.OSHP ()
	              \_SB.PCI0.BR2C.OSHP ()
	              \_SB.PCI0.BR2D.OSHP ()
	              \_SB.PCI0.BR3A.OSHP ()
	              \_SB.PCI0.BR3B.OSHP ()
	              \_SB.PCI0.BR3C.OSHP ()
	              \_SB.PCI0.BR3D.OSHP ()
	  
	              \_SB.PCI1.QRP0.OSHP ()
	              \_SB.PCI1.QR1A.OSHP ()
	              \_SB.PCI1.QR1B.OSHP ()
	              \_SB.PCI1.QR2A.OSHP ()
	              \_SB.PCI1.QR2B.OSHP ()
	              \_SB.PCI1.QR2C.OSHP ()
	              \_SB.PCI1.QR2D.OSHP ()
	              \_SB.PCI1.QR3A.OSHP ()
	              \_SB.PCI1.QR3B.OSHP ()
	              \_SB.PCI1.QR3C.OSHP ()
	              \_SB.PCI1.QR3D.OSHP ()
	  
	              \_SB.PCI2.RRP0.OSHP ()
	              \_SB.PCI2.RR1A.OSHP ()
	              \_SB.PCI2.RR1B.OSHP ()
	              \_SB.PCI2.RR2A.OSHP ()
	              \_SB.PCI2.RR2B.OSHP ()
	              \_SB.PCI2.RR2C.OSHP ()
	              \_SB.PCI2.RR2D.OSHP ()
	              \_SB.PCI2.RR3A.OSHP ()
	              \_SB.PCI2.RR3B.OSHP ()
	              \_SB.PCI2.RR3C.OSHP ()
	              \_SB.PCI2.RR3D.OSHP ()
	  
	              \_SB.PCI3.SRP0.OSHP ()
	              \_SB.PCI3.SR1A.OSHP ()
	              \_SB.PCI3.SR1B.OSHP ()
	              \_SB.PCI3.SR2A.OSHP ()
	              \_SB.PCI3.SR2B.OSHP ()
	              \_SB.PCI3.SR2C.OSHP ()
	              \_SB.PCI3.SR2D.OSHP ()
	              \_SB.PCI3.SR3A.OSHP ()
	              \_SB.PCI3.SR3B.OSHP ()
	              \_SB.PCI3.SR3C.OSHP ()
	              \_SB.PCI3.SR3D.OSHP ()
	  
	              Store (0x01, GPSH)                
	            }
	        }
	  
	            If (LNotEqual(Arg1,one)) { 
	              Or(CDW1,0x08,CDW1)
	            }
	  
	            If(LNotEqual(CDW3,CTRL)) { 
	              Or(CDW1,0x10,CDW1)
	            }
	            
	            
	            
	            Store(CTRL,CDW3)
	            Return(Arg3)
	  
	        } Else {
	          
	          
	          
	          
	          Or (CDW1,4,CDW1)
	          Store (0xEE, IO80)
	          Return(Arg3)
	        }
	      }
	    } 
	    
	      Name (_CRS, ResourceTemplate() {
	        WORDBusNumber (     
	          ResourceProducer, 
	          MinFixed,         
	          MaxFixed,         
	          PosDecode,        
	          0x4946,           
	          0x3158,           
	          0x0000,           
	          0x0000,           
	          0x0001           
	        )
	      })
	  
	      Method (_PRT, 0) {
	        If (LEqual(PICM, Zero)) {
	          Return (PRUN)
	        }
	        Return (ARUN)
	      }
	    }
	  }

	
	  
	  
	  
	  Method (IWAK, 1, Serialized) 
	  {
	    Store (0x73, IO80)  
	
	    
	    
	    
	    Notify (\_SB.PCI0.EHC1, 0x00)
	    Notify (\_SB.PCI0.EHC2, 0x00)
	
	
	    
	    
	    
	    If (And (\_SB.PCI0.HEC2._STA(), 0x02)) {
	      \_SB.PCI0.HEC2.HWAK()
	    }
	
	
	    
	    
	    
	    If (LOr(LEqual(Arg0,3), LEqual(Arg0,4))) {
	      
	      
	      
	      
	      \_SB.PCI0.XHCI.XWAK()
	    }
	
	
	    
	    
	    
	    If (LEqual(Arg0,3)) {
	      Store (0xe1, \_SB.SMIS)
	      Store (0xbe, \_SB.SMIC)
	    }
	
	
	    Return(Package(){0, 0})
	  }
	
	  Scope(\_SB) {
	  
	    
	    





	    



















	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	      
	    
	    
	    
	    
	    









	    
	    
	    
	    
	    



































	    


















































































	    




































































	    
	    
	      Scope(\_SB) {
	    
	        
	        
	        
	        
	        
	        
	        Method(PSTA, 1){        
	          ShiftRight(PRBM, Arg0, Local6)
	          And(Local6, 0x1, Local6)
	          if(LEqual(Local6, 0x0)) {
	            Return(0x00)
	          } else {
	            Return(0x0F)
	          }
	        } 
	    
	        
	        
	        
	        
	        
	        
	        
	        
	        Method(TMID, 2) {
	          Multiply (Arg0, 2, Local0)
	          Add (Local0, Arg1, Local1)
	          Return (Local1)
	        }
	    
	        
	        
	        
	        
	        
	        
	        
	        
	        
	        Name (APTC, Buffer (0x30) {
	              0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
	              0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	              0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
	              0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	        })
	                
	            
	        
	        
	        
	        
	        
	        
	        Method (TPID, 2, NotSerialized) {
	          Store (0x00, Local0)
	          If (LEqual (Arg0, 0x00))
	          {
	            Store (P0ID, Local0)
	          }
	    
	          If (LEqual (Arg0, 0x01))
	          {
	            Store (P1ID, Local0)
	          }
	    
	          If (LEqual (Arg0, 0x02))
	          {
	            Store (P2ID, Local0)
	          }
	    
	          If (LEqual (Arg0, 0x03))
	          {
	            Store (P3ID, Local0)
	          }
	    
	          Add (Local0, DerefOf(Index(APTC, Arg1)), Local0)
	          
	          Return (Local0)
	        }
	    
	        
	        
	        
	        
	        
	        
	        Method(MSTA, 1) {
	          
	          ShiftRight(MEBM, Arg0, Local6)
	          And(Local6, 0x1, Local6)
	          if(LEqual(Local6, 0x0)) {
	            Return(0x00)
	          } else {
	            Return(0x0F)
	          }
	        } 
	    
	    
	        
	        
	        
	        
	        
	        
	        
	        Method(CSTA, 2){        
	          Store(0, Local0)
	          Store(0, Local1)
	          Store (\_SB.TPID(Arg0, Arg1), Local1) 
	          Store(0, Local2)    
	    
	          
	          
	          Add (Local2, DerefOf(Index(APTC, Arg1)), Local2)
	       
	          if (LEqual(Local2, 0xFF)) {
	            Return(0x00)
	          }
	    
	          if (LEqual(Arg0, 0x0)) {
	            ShiftRight(P0BM, Local2, Local0)
	          }
	          if (LEqual(Arg0, 0x1)) {
	            ShiftRight(P1BM, Local2, Local0)
	          }
	          if (LEqual(Arg0, 0x2)) {
	            ShiftRight(P2BM, Local2, Local0)
	          }
	          if (LEqual(Arg0, 0x3)) {
	            ShiftRight(P3BM, Local2, Local0)
	          }
	          And(Local0, 0x1, Local0)
	          if(LEqual(Local0, 0x0)) {
	            Return(0x00)
	          } else {
	            Return(0x01)
	          }
	        } 
	    
	        
	        
	        
	        
	        
	        
	        
	        
	        Method(LAPC, 2) {
	    
	          Name(APIC, Buffer(8) {} ) 
	    
	          CreateByteField (APIC, 0x00,  TYPE) 
	          CreateByteField (APIC, 0x01,  LLEN) 
	          CreateByteField (APIC, 0x02,  PRID) 
	          CreateByteField (APIC, 0x03,  APID) 
	          CreateDwordField(APIC, 0x04,  FLAG) 
	    
	          Store(0, TYPE)
	          Store(8, LLEN)
	    
	          
	          
	          
	          
	          
	          
	          
	          
	          
	          
	    
	          
	          Store (\_SB.TPID(Arg0, Arg1), APID)
	    
	          
	          if(LEqual(\_SB.CSTA(Arg0, Arg1), 0x00)) {
	            Store(0x00, FLAG)
	            Store(0xFF, PRID)
	            Store(0xFF, APID)
	          } else {
	            
	            
	            Store(APID, local0)
	            Store(local0, PRID)
	    
	            
	            Store(0x01, FLAG)
	          }
	    
	          
	    
	          Return(APIC)
	        }
	    
	    



















































	    
	        Device(\_SB.SCK0) { Name (_HID, "ACPI0004") Name (_UID, "CPUSCK0") Name (LSTA, 0xff) Method(_STA) { Store("CPUSCK0", CUU0) Store(\_SB.PSTA(0x00), Local0) And(Local0, 0x03, Local1) If (LAnd(LNotEqual(LSTA, 0xff), LNotEqual(Local1, LSTA))) { If (LEqual(Local1, 0x03)) { } Else { } } Store(Local1, LSTA) return(Local0) } Method(THNU, 0) { Store(0, Local0) Store(P0BM, Local1) While (Local1) { Add(Local0, And(Local1, 1), Local0) ShiftRight(Local1, 1, Local1) } return (Or(ShiftLeft(0, 8), Local0)) } Processor(CP00, 0x25, 0x000, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP00") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x00)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x00), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x00)) } } Processor(CP01, 0x25, 0x001, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP01") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x01)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x01), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x01)) } } Processor(CP02, 0x25, 0x002, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP02") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x02)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x02), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x02)) } } Processor(CP03, 0x25, 0x003, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP03") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x03)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x03), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x03)) } } Processor(CP04, 0x25, 0x004, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP04") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x04)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x04), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x04)) } } Processor(CP05, 0x25, 0x005, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP05") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x05)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x05), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x05)) } } Processor(CP06, 0x25, 0x006, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP06") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x06)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x06), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x06)) } } Processor(CP07, 0x25, 0x007, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP07") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x07)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x07), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x07)) } } Processor(CP08, 0x25, 0x008, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP08") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x08)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x08), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x08)) } } Processor(CP09, 0x25, 0x009, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP09") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x09)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x09), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x09)) } } Processor(CP0A, 0x25, 0x00A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP0A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x0A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x0A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x0A)) } } Processor(CP0B, 0x25, 0x00B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP0B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x0B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x0B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x0B)) } } Processor(CP0C, 0x25, 0x00C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP0C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x0C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x0C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x0C)) } } Processor(CP0D, 0x25, 0x00D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP0D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x0D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x0D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x0D)) } } Processor(CP0E, 0x25, 0x00E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP0E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x0E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x0E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x0E)) } } Processor(CP0F, 0x25, 0x00F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP0F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x0F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x0F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x0F)) } } Processor(CP10, 0x25, 0x010, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP10") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x10)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x10), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x10)) } } Processor(CP11, 0x25, 0x011, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP11") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x11)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x11), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x11)) } } Processor(CP12, 0x25, 0x012, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP12") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x12)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x12), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x12)) } } Processor(CP13, 0x25, 0x013, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP13") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x13)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x13), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x13)) } } Processor(CP14, 0x25, 0x014, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP14") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x14)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x14), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x14)) } } Processor(CP15, 0x25, 0x015, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP15") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x15)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x15), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x15)) } } Processor(CP16, 0x25, 0x016, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP16") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x16)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x16), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x16)) } } Processor(CP17, 0x25, 0x017, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP17") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x17)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x17), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x17)) } } Processor(CP18, 0x25, 0x018, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP18") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x18)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x18), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x18)) } } Processor(CP19, 0x25, 0x019, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP19") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x19)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x19), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x19)) } } Processor(CP1A, 0x25, 0x01A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP1A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x1A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x1A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x1A)) } } Processor(CP1B, 0x25, 0x01B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP1B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x1B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x1B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x1B)) } } Processor(CP1C, 0x25, 0x01C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP1C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x1C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x1C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x1C)) } } Processor(CP1D, 0x25, 0x01D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP1D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x1D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x1D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x1D)) } } Processor(CP1E, 0x25, 0x01E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP1E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x1E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x1E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x1E)) } } Processor(CP1F, 0x25, 0x01F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP1F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x1F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x1F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x1F)) } } Processor(CP20, 0x25, 0x020, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP20") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x20)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x20), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x20)) } } Processor(CP21, 0x25, 0x021, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP21") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x21)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x21), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x21)) } } Processor(CP22, 0x25, 0x022, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP22") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x22)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x22), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x22)) } } Processor(CP23, 0x25, 0x023, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP23") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x23)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x23), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x23)) } } Processor(CP24, 0x25, 0x024, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP24") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x24)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x24), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x24)) } } Processor(CP25, 0x25, 0x025, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP25") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x25)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x25), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x25)) } } Processor(CP26, 0x25, 0x026, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP26") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x26)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x26), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x26)) } } Processor(CP27, 0x25, 0x027, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP27") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x27)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x27), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x27)) } } Processor(CP28, 0x25, 0x028, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP28") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x28)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x28), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x28)) } } Processor(CP29, 0x25, 0x029, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP29") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x29)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x29), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x29)) } } Processor(CP2A, 0x25, 0x02A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP2A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x2A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x2A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x2A)) } } Processor(CP2B, 0x25, 0x02B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP2B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x2B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x2B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x2B)) } } Processor(CP2C, 0x25, 0x02C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP2C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x2C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x2C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x2C)) } } Processor(CP2D, 0x25, 0x02D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP2D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x2D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x2D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x2D)) } } Processor(CP2E, 0x25, 0x02E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP2E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x2E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x2E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x2E)) } } Processor(CP2F, 0x25, 0x02F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK0-CP2F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x00) } else { Store(DerefOf(Index(\_SB.APTC, 0x2F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x0, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x00, 0x2F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x00, 0x2F)) } } }
	    
	        Device(\_SB.SCK1) { Name (_HID, "ACPI0004") Name (_UID, "CPUSCK1") Name (LSTA, 0xff) Method(_STA) { Store("CPUSCK1", CUU1) Store(\_SB.PSTA(0x01), Local0) And(Local0, 0x03, Local1) If (LAnd(LNotEqual(LSTA, 0xff), LNotEqual(Local1, LSTA))) { If (LEqual(Local1, 0x03)) { } Else { } } Store(Local1, LSTA) return(Local0) } Method(THNU, 0) { Store(0, Local0) Store(P1BM, Local1) While (Local1) { Add(Local0, And(Local1, 1), Local0) ShiftRight(Local1, 1, Local1) } return (Or(ShiftLeft(1, 8), Local0)) } Processor(CP00, 0x25, 0x100, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP00") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x00)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x00), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x00)) } } Processor(CP01, 0x25, 0x101, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP01") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x01)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x01), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x01)) } } Processor(CP02, 0x25, 0x102, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP02") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x02)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x02), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x02)) } } Processor(CP03, 0x25, 0x103, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP03") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x03)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x03), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x03)) } } Processor(CP04, 0x25, 0x104, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP04") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x04)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x04), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x04)) } } Processor(CP05, 0x25, 0x105, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP05") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x05)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x05), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x05)) } } Processor(CP06, 0x25, 0x106, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP06") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x06)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x06), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x06)) } } Processor(CP07, 0x25, 0x107, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP07") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x07)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x07), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x07)) } } Processor(CP08, 0x25, 0x108, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP08") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x08)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x08), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x08)) } } Processor(CP09, 0x25, 0x109, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP09") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x09)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x09), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x09)) } } Processor(CP0A, 0x25, 0x10A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP0A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x0A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x0A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x0A)) } } Processor(CP0B, 0x25, 0x10B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP0B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x0B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x0B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x0B)) } } Processor(CP0C, 0x25, 0x10C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP0C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x0C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x0C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x0C)) } } Processor(CP0D, 0x25, 0x10D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP0D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x0D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x0D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x0D)) } } Processor(CP0E, 0x25, 0x10E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP0E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x0E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x0E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x0E)) } } Processor(CP0F, 0x25, 0x10F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP0F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x0F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x0F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x0F)) } } Processor(CP10, 0x25, 0x110, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP10") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x10)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x10), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x10)) } } Processor(CP11, 0x25, 0x111, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP11") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x11)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x11), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x11)) } } Processor(CP12, 0x25, 0x112, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP12") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x12)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x12), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x12)) } } Processor(CP13, 0x25, 0x113, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP13") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x13)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x13), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x13)) } } Processor(CP14, 0x25, 0x114, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP14") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x14)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x14), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x14)) } } Processor(CP15, 0x25, 0x115, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP15") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x15)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x15), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x15)) } } Processor(CP16, 0x25, 0x116, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP16") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x16)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x16), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x16)) } } Processor(CP17, 0x25, 0x117, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP17") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x17)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x17), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x17)) } } Processor(CP18, 0x25, 0x118, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP18") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x18)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x18), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x18)) } } Processor(CP19, 0x25, 0x119, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP19") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x19)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x19), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x19)) } } Processor(CP1A, 0x25, 0x11A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP1A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x1A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x1A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x1A)) } } Processor(CP1B, 0x25, 0x11B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP1B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x1B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x1B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x1B)) } } Processor(CP1C, 0x25, 0x11C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP1C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x1C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x1C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x1C)) } } Processor(CP1D, 0x25, 0x11D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP1D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x1D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x1D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x1D)) } } Processor(CP1E, 0x25, 0x11E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP1E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x1E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x1E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x1E)) } } Processor(CP1F, 0x25, 0x11F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP1F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x1F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x1F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x1F)) } } Processor(CP20, 0x25, 0x120, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP20") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x20)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x20), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x20)) } } Processor(CP21, 0x25, 0x121, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP21") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x21)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x21), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x21)) } } Processor(CP22, 0x25, 0x122, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP22") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x22)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x22), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x22)) } } Processor(CP23, 0x25, 0x123, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP23") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x23)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x23), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x23)) } } Processor(CP24, 0x25, 0x124, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP24") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x24)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x24), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x24)) } } Processor(CP25, 0x25, 0x125, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP25") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x25)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x25), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x25)) } } Processor(CP26, 0x25, 0x126, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP26") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x26)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x26), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x26)) } } Processor(CP27, 0x25, 0x127, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP27") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x27)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x27), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x27)) } } Processor(CP28, 0x25, 0x128, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP28") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x28)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x28), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x28)) } } Processor(CP29, 0x25, 0x129, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP29") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x29)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x29), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x29)) } } Processor(CP2A, 0x25, 0x12A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP2A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x2A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x2A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x2A)) } } Processor(CP2B, 0x25, 0x12B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP2B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x2B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x2B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x2B)) } } Processor(CP2C, 0x25, 0x12C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP2C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x2C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x2C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x2C)) } } Processor(CP2D, 0x25, 0x12D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP2D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x2D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x2D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x2D)) } } Processor(CP2E, 0x25, 0x12E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP2E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x2E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x2E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x2E)) } } Processor(CP2F, 0x25, 0x12F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK1-CP2F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x01) } else { Store(DerefOf(Index(\_SB.APTC, 0x2F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x1, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x01, 0x2F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x01, 0x2F)) } } }
	    
	        Device(\_SB.SCK2) { Name (_HID, "ACPI0004") Name (_UID, "CPUSCK2") Name (LSTA, 0xff) Method(_STA) { Store("CPUSCK2", CUU2) Store(\_SB.PSTA(0x02), Local0) And(Local0, 0x03, Local1) If (LAnd(LNotEqual(LSTA, 0xff), LNotEqual(Local1, LSTA))) { If (LEqual(Local1, 0x03)) { } Else { } } Store(Local1, LSTA) return(Local0) } Method(THNU, 0) { Store(0, Local0) Store(P2BM, Local1) While (Local1) { Add(Local0, And(Local1, 1), Local0) ShiftRight(Local1, 1, Local1) } return (Or(ShiftLeft(2, 8), Local0)) } Processor(CP00, 0x25, 0x200, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP00") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x00)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x00), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x00)) } } Processor(CP01, 0x25, 0x201, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP01") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x01)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x01), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x01)) } } Processor(CP02, 0x25, 0x202, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP02") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x02)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x02), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x02)) } } Processor(CP03, 0x25, 0x203, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP03") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x03)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x03), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x03)) } } Processor(CP04, 0x25, 0x204, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP04") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x04)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x04), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x04)) } } Processor(CP05, 0x25, 0x205, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP05") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x05)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x05), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x05)) } } Processor(CP06, 0x25, 0x206, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP06") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x06)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x06), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x06)) } } Processor(CP07, 0x25, 0x207, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP07") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x07)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x07), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x07)) } } Processor(CP08, 0x25, 0x208, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP08") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x08)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x08), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x08)) } } Processor(CP09, 0x25, 0x209, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP09") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x09)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x09), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x09)) } } Processor(CP0A, 0x25, 0x20A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP0A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x0A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x0A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x0A)) } } Processor(CP0B, 0x25, 0x20B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP0B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x0B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x0B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x0B)) } } Processor(CP0C, 0x25, 0x20C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP0C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x0C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x0C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x0C)) } } Processor(CP0D, 0x25, 0x20D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP0D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x0D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x0D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x0D)) } } Processor(CP0E, 0x25, 0x20E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP0E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x0E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x0E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x0E)) } } Processor(CP0F, 0x25, 0x20F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP0F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x0F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x0F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x0F)) } } Processor(CP10, 0x25, 0x210, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP10") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x10)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x10), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x10)) } } Processor(CP11, 0x25, 0x211, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP11") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x11)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x11), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x11)) } } Processor(CP12, 0x25, 0x212, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP12") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x12)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x12), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x12)) } } Processor(CP13, 0x25, 0x213, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP13") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x13)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x13), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x13)) } } Processor(CP14, 0x25, 0x214, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP14") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x14)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x14), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x14)) } } Processor(CP15, 0x25, 0x215, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP15") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x15)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x15), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x15)) } } Processor(CP16, 0x25, 0x216, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP16") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x16)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x16), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x16)) } } Processor(CP17, 0x25, 0x217, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP17") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x17)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x17), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x17)) } } Processor(CP18, 0x25, 0x218, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP18") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x18)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x18), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x18)) } } Processor(CP19, 0x25, 0x219, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP19") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x19)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x19), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x19)) } } Processor(CP1A, 0x25, 0x21A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP1A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x1A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x1A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x1A)) } } Processor(CP1B, 0x25, 0x21B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP1B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x1B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x1B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x1B)) } } Processor(CP1C, 0x25, 0x21C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP1C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x1C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x1C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x1C)) } } Processor(CP1D, 0x25, 0x21D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP1D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x1D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x1D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x1D)) } } Processor(CP1E, 0x25, 0x21E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP1E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x1E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x1E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x1E)) } } Processor(CP1F, 0x25, 0x21F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP1F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x1F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x1F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x1F)) } } Processor(CP20, 0x25, 0x220, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP20") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x20)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x20), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x20)) } } Processor(CP21, 0x25, 0x221, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP21") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x21)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x21), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x21)) } } Processor(CP22, 0x25, 0x222, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP22") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x22)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x22), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x22)) } } Processor(CP23, 0x25, 0x223, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP23") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x23)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x23), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x23)) } } Processor(CP24, 0x25, 0x224, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP24") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x24)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x24), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x24)) } } Processor(CP25, 0x25, 0x225, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP25") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x25)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x25), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x25)) } } Processor(CP26, 0x25, 0x226, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP26") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x26)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x26), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x26)) } } Processor(CP27, 0x25, 0x227, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP27") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x27)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x27), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x27)) } } Processor(CP28, 0x25, 0x228, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP28") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x28)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x28), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x28)) } } Processor(CP29, 0x25, 0x229, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP29") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x29)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x29), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x29)) } } Processor(CP2A, 0x25, 0x22A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP2A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x2A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x2A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x2A)) } } Processor(CP2B, 0x25, 0x22B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP2B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x2B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x2B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x2B)) } } Processor(CP2C, 0x25, 0x22C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP2C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x2C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x2C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x2C)) } } Processor(CP2D, 0x25, 0x22D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP2D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x2D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x2D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x2D)) } } Processor(CP2E, 0x25, 0x22E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP2E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x2E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x2E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x2E)) } } Processor(CP2F, 0x25, 0x22F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK2-CP2F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x02) } else { Store(DerefOf(Index(\_SB.APTC, 0x2F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x2, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x02, 0x2F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x02, 0x2F)) } } }
	    
	        Device(\_SB.SCK3) { Name (_HID, "ACPI0004") Name (_UID, "CPUSCK3") Name (LSTA, 0xff) Method(_STA) { Store("CPUSCK3", CUU3) Store(\_SB.PSTA(0x03), Local0) And(Local0, 0x03, Local1) If (LAnd(LNotEqual(LSTA, 0xff), LNotEqual(Local1, LSTA))) { If (LEqual(Local1, 0x03)) { } Else { } } Store(Local1, LSTA) return(Local0) } Method(THNU, 0) { Store(0, Local0) Store(P3BM, Local1) While (Local1) { Add(Local0, And(Local1, 1), Local0) ShiftRight(Local1, 1, Local1) } return (Or(ShiftLeft(3, 8), Local0)) } Processor(CP00, 0x25, 0x300, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP00") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x00)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x00), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x00)) } } Processor(CP01, 0x25, 0x301, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP01") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x01)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x01), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x01)) } } Processor(CP02, 0x25, 0x302, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP02") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x02)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x02), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x02)) } } Processor(CP03, 0x25, 0x303, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP03") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x03)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x03), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x03)) } } Processor(CP04, 0x25, 0x304, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP04") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x04)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x04), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x04)) } } Processor(CP05, 0x25, 0x305, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP05") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x05)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x05), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x05)) } } Processor(CP06, 0x25, 0x306, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP06") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x06)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x06), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x06)) } } Processor(CP07, 0x25, 0x307, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP07") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x07)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x07), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x07)) } } Processor(CP08, 0x25, 0x308, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP08") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x08)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x08), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x08)) } } Processor(CP09, 0x25, 0x309, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP09") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x09)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x09), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x09)) } } Processor(CP0A, 0x25, 0x30A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP0A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x0A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x0A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x0A)) } } Processor(CP0B, 0x25, 0x30B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP0B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x0B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x0B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x0B)) } } Processor(CP0C, 0x25, 0x30C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP0C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x0C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x0C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x0C)) } } Processor(CP0D, 0x25, 0x30D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP0D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x0D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x0D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x0D)) } } Processor(CP0E, 0x25, 0x30E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP0E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x0E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x0E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x0E)) } } Processor(CP0F, 0x25, 0x30F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP0F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x0F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x0F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x0F)) } } Processor(CP10, 0x25, 0x310, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP10") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x10)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x10), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x10)) } } Processor(CP11, 0x25, 0x311, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP11") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x11)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x11), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x11)) } } Processor(CP12, 0x25, 0x312, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP12") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x12)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x12), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x12)) } } Processor(CP13, 0x25, 0x313, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP13") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x13)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x13), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x13)) } } Processor(CP14, 0x25, 0x314, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP14") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x14)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x14), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x14)) } } Processor(CP15, 0x25, 0x315, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP15") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x15)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x15), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x15)) } } Processor(CP16, 0x25, 0x316, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP16") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x16)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x16), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x16)) } } Processor(CP17, 0x25, 0x317, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP17") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x17)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x17), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x17)) } } Processor(CP18, 0x25, 0x318, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP18") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x18)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x18), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x18)) } } Processor(CP19, 0x25, 0x319, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP19") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x19)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x19), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x19)) } } Processor(CP1A, 0x25, 0x31A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP1A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x1A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x1A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x1A)) } } Processor(CP1B, 0x25, 0x31B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP1B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x1B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x1B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x1B)) } } Processor(CP1C, 0x25, 0x31C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP1C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x1C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x1C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x1C)) } } Processor(CP1D, 0x25, 0x31D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP1D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x1D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x1D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x1D)) } } Processor(CP1E, 0x25, 0x31E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP1E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x1E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x1E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x1E)) } } Processor(CP1F, 0x25, 0x31F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP1F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x1F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x1F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x1F)) } } Processor(CP20, 0x25, 0x320, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP20") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x20)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x20), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x20)) } } Processor(CP21, 0x25, 0x321, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP21") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x21)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x21), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x21)) } } Processor(CP22, 0x25, 0x322, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP22") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x22)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x22), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x22)) } } Processor(CP23, 0x25, 0x323, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP23") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x23)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x23), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x23)) } } Processor(CP24, 0x25, 0x324, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP24") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x24)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x24), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x24)) } } Processor(CP25, 0x25, 0x325, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP25") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x25)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x25), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x25)) } } Processor(CP26, 0x25, 0x326, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP26") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x26)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x26), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x26)) } } Processor(CP27, 0x25, 0x327, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP27") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x27)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x27), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x27)) } } Processor(CP28, 0x25, 0x328, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP28") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x28)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x28), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x28)) } } Processor(CP29, 0x25, 0x329, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP29") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x29)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x29), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x29)) } } Processor(CP2A, 0x25, 0x32A, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP2A") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x2A)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x2A), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x2A)) } } Processor(CP2B, 0x25, 0x32B, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP2B") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x2B)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x2B), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x2B)) } } Processor(CP2C, 0x25, 0x32C, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP2C") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x2C)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x2C), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x2C)) } } Processor(CP2D, 0x25, 0x32D, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP2D") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x2D)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x2D), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x2D)) } } Processor(CP2E, 0x25, 0x32E, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP2E") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x2E)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x2E), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x2E)) } } Processor(CP2F, 0x25, 0x32F, 6) { Name(_HID, "ACPI0007") Name(_UID, "SCK3-CP2F") Method(_PXM) { if (LEqual (CLOD, 0)) { Return(0x03) } else { Store(DerefOf(Index(\_SB.APTC, 0x2F)), Local0) Store(CNBS, Local1) Subtract(Local1, 1, Local1) ShiftRight(Local0, Local1, Local0) And(Local0, 1, Local0) Store(0x3, Local1) Multiply(Local1, 2, Local1) if(LEqual(Local0, 1)) { Add(Local1, 1, Local1) } Return(Local1) } } Method(_STA) { if(LEqual(\_SB.CSTA(0x03, 0x2F), 0x00)) { Return(0x00) } else { If (LGreaterEqual (\_SB.OSYS, 12)) { Return(0x0F) } Else { Return(0x0B) } } } Method(_MAT) { Return(\_SB.LAPC(0x03, 0x2F)) } } }
	      }

	  
	    
	    
	  
	    OperationRegion (IOB2, SystemIO, 0xB2, 2)  
	    Field (IOB2, ByteAcc, NoLock, Preserve) {
	      SMIC, 8,                               
	      SMIS, 8,                               
	    }
	
	    
	    
	    
	  
	  }   
	
	  







	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB) {
	
	
	
	
	
	
	
	
	
		Name(PRSA, ResourceTemplate(){	
			IRQ(Level, ActiveLow, Shared, LLKA) {3,4,5,6,7,10,11,12,14,15}
		})
		Alias(PRSA,PRSB)	
		Name(PRSC, ResourceTemplate(){	
			IRQ(Level, ActiveLow, Shared, LLKC) {3,4,5,6,10,11,12,14,15}
		})
		Alias(PRSC,PRSD)	
		Alias(PRSA,PRSE)	
		Alias(PRSA,PRSF)	
		Alias(PRSA,PRSG)	
		Alias(PRSA,PRSH)	
	
		Name(PG1A, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
		})
		Name(AG1A, Package(){
	
			Package(){0x0000FFFF, 0, 0, 16 },
		})
		Name(PG1B, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
	
		})
		Name(AG1B, Package(){
	
			Package(){0x0000FFFF, 0, 0, 32 },
			Package(){0x0000FFFF, 1, 0, 36 },
			Package(){0x0000FFFF, 2, 0, 37 },
			Package(){0x0000FFFF, 3, 0, 38 },
	
		})
		Name(PR00, Package(){
	
	
	
			Package(){0x001FFFFF, 0, LNKA, 0 },
	
	
	
			Package(){0x001FFFFF, 2, LNKC, 0 },
	
	
			Package(){0x0014FFFF, 3, LNKD, 0 },
	
			Package(){0x0019FFFF, 0, LNKE, 0 },
	
			Package(){0x001DFFFF, 2, LNKC, 0 },
	
			Package(){0x001AFFFF, 2, LNKC, 0 },
	
			Package(){0x001BFFFF, 0, LNKG, 0 },
	
			Package(){0x0016FFFF, 0, LNKA, 0 },
	
			Package(){0x0016FFFF, 1, LNKB, 0 },
	
	
	
			Package(){0x001CFFFF, 0, LNKA, 0 },
	
			Package(){0x001CFFFF, 1, LNKB, 0 },
	
			Package(){0x001CFFFF, 2, LNKC, 0 },
	
			Package(){0x001CFFFF, 3, LNKD, 0 },
	
	
	
	
	
	
			Package(){0x0011FFFF, 1, LNKB, 0 },
	
			Package(){0x0011FFFF, 2, LNKC, 0 },
	
			Package(){0x0011FFFF, 3, LNKD, 0 },
	
			Package(){0x0011FFFF, 0, LNKA, 0 },
	
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
	
			Package(){0x0001FFFF, 0, LNKA, 0 },
			Package(){0x0001FFFF, 1, LNKB, 0 },
			Package(){0x0001FFFF, 2, LNKC, 0 },
			Package(){0x0001FFFF, 3, LNKD, 0 },
	
	
			Package(){0x0002FFFF, 0, LNKA, 0 },
			Package(){0x0002FFFF, 1, LNKB, 0 },
			Package(){0x0002FFFF, 2, LNKC, 0 },
			Package(){0x0002FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0003FFFF, 0, LNKA, 0 },
			Package(){0x0003FFFF, 1, LNKB, 0 },
			Package(){0x0003FFFF, 2, LNKC, 0 },
			Package(){0x0003FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0004FFFF, 0, LNKA, 0 },
	
			Package(){0x0004FFFF, 1, LNKB, 0 },
	
			Package(){0x0004FFFF, 2, LNKC, 0 },
	
			Package(){0x0004FFFF, 3, LNKD, 0 },
	
	
	
	
		})
		Name(AR00, Package(){
	
	
	
			Package(){0x001FFFFF, 0, 0, 16 },
	
	
	
			Package(){0x001FFFFF, 2, 0, 18 },
	
	
			Package(){0x0014FFFF, 3, 0, 19 },
	
			Package(){0x0019FFFF, 0, 0, 20 },
	
			Package(){0x001DFFFF, 2, 0, 18 },
	
			Package(){0x001AFFFF, 2, 0, 18 },
	
			Package(){0x001BFFFF, 0, 0, 22 },
	
			Package(){0x0016FFFF, 0, 0, 16 },
	
			Package(){0x0016FFFF, 1, 0, 17 },
	
	
	
			Package(){0x001CFFFF, 0, 0, 16 },
	
			Package(){0x001CFFFF, 1, 0, 17 },
	
			Package(){0x001CFFFF, 2, 0, 18 },
	
			Package(){0x001CFFFF, 3, 0, 19 },
	
	
	
	
	
	
			Package(){0x0011FFFF, 1, 0, 17 },
	
			Package(){0x0011FFFF, 2, 0, 18 },
	
			Package(){0x0011FFFF, 3, 0, 19 },
	
			Package(){0x0011FFFF, 0, 0, 16 },
	
	
			Package(){0x0000FFFF, 0, 0, 24 },
			Package(){0x0000FFFF, 1, 0, 25 },
			Package(){0x0000FFFF, 2, 0, 25 },
			Package(){0x0000FFFF, 3, 0, 25 },
	
			Package(){0x0001FFFF, 0, 0, 26 },
			Package(){0x0001FFFF, 1, 0, 28 },
			Package(){0x0001FFFF, 2, 0, 29 },
			Package(){0x0001FFFF, 3, 0, 30 },
	
	
			Package(){0x0002FFFF, 0, 0, 32 },
			Package(){0x0002FFFF, 1, 0, 36 },
			Package(){0x0002FFFF, 2, 0, 37 },
			Package(){0x0002FFFF, 3, 0, 38 },
	
	
	
	
			Package(){0x0003FFFF, 0, 0, 40 },
			Package(){0x0003FFFF, 1, 0, 44 },
			Package(){0x0003FFFF, 2, 0, 45 },
			Package(){0x0003FFFF, 3, 0, 46 },
	
	
	
	
			Package(){0x0004FFFF, 0, 0, 31 },
	
			Package(){0x0004FFFF, 1, 0, 39 },
	
			Package(){0x0004FFFF, 2, 0, 31 },
	
			Package(){0x0004FFFF, 3, 0, 39 },
	
	
	
	
		})
		Name(PG28, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG28, Package(){
	
			Package(){0x0000FFFF, 0, 0, 26 },
			Package(){0x0000FFFF, 1, 0, 28 },
			Package(){0x0000FFFF, 2, 0, 29 },
			Package(){0x0000FFFF, 3, 0, 30 },
		})
		Name(PG2A, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG2A, Package(){
	
			Package(){0x0000FFFF, 0, 0, 32 },
			Package(){0x0000FFFF, 1, 0, 36 },
			Package(){0x0000FFFF, 2, 0, 37 },
			Package(){0x0000FFFF, 3, 0, 38 },
		})
		Name(PG2C, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG2C, Package(){
	
			Package(){0x0000FFFF, 0, 0, 34 },
			Package(){0x0000FFFF, 1, 0, 37 },
			Package(){0x0000FFFF, 2, 0, 36 },
			Package(){0x0000FFFF, 3, 0, 38 },
		})
		Name(PG2E, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG2E, Package(){
	
			Package(){0x0000FFFF, 0, 0, 40 },
			Package(){0x0000FFFF, 1, 0, 44 },
			Package(){0x0000FFFF, 2, 0, 45 },
			Package(){0x0000FFFF, 3, 0, 46 },
		})
		Name(PG30, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
	
		})
		Name(AG30, Package(){
	
			Package(){0x0000FFFF, 0, 0, 32 },
			Package(){0x0000FFFF, 1, 0, 36 },
			Package(){0x0000FFFF, 2, 0, 37 },
			Package(){0x0000FFFF, 3, 0, 38 },
	
		})
		Name(PG31, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG31, Package(){
	
			Package(){0x0000FFFF, 0, 0, 34 },
			Package(){0x0000FFFF, 1, 0, 37 },
			Package(){0x0000FFFF, 2, 0, 36 },
			Package(){0x0000FFFF, 3, 0, 38 },
		})
		Name(PR40, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
	
			Package(){0x0001FFFF, 0, LNKA, 0 },
			Package(){0x0001FFFF, 1, LNKB, 0 },
			Package(){0x0001FFFF, 2, LNKC, 0 },
			Package(){0x0001FFFF, 3, LNKD, 0 },
	
	
			Package(){0x0002FFFF, 0, LNKA, 0 },
			Package(){0x0002FFFF, 1, LNKB, 0 },
			Package(){0x0002FFFF, 2, LNKC, 0 },
			Package(){0x0002FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0003FFFF, 0, LNKA, 0 },
			Package(){0x0003FFFF, 1, LNKB, 0 },
			Package(){0x0003FFFF, 2, LNKC, 0 },
			Package(){0x0003FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0004FFFF, 0, LNKA, 0 },
	
			Package(){0x0004FFFF, 1, LNKB, 0 },
	
			Package(){0x0004FFFF, 2, LNKC, 0 },
	
			Package(){0x0004FFFF, 3, LNKD, 0 },
	
	
	
	
		})
		Name(AR40, Package(){
	
			Package(){0x0000FFFF, 0, 0, 48 },
			Package(){0x0000FFFF, 1, 0, 49 },
			Package(){0x0000FFFF, 2, 0, 49 },
			Package(){0x0000FFFF, 3, 0, 49 },
	
			Package(){0x0001FFFF, 0, 0, 50 },
			Package(){0x0001FFFF, 1, 0, 52 },
			Package(){0x0001FFFF, 2, 0, 53 },
			Package(){0x0001FFFF, 3, 0, 54 },
	
	
			Package(){0x0002FFFF, 0, 0, 56 },
			Package(){0x0002FFFF, 1, 0, 60 },
			Package(){0x0002FFFF, 2, 0, 61 },
			Package(){0x0002FFFF, 3, 0, 62 },
	
	
	
	
			Package(){0x0003FFFF, 0, 0, 64 },
			Package(){0x0003FFFF, 1, 0, 68 },
			Package(){0x0003FFFF, 2, 0, 69 },
			Package(){0x0003FFFF, 3, 0, 70 },
	
	
	
	
			Package(){0x0004FFFF, 0, 0, 55 },
	
			Package(){0x0004FFFF, 1, 0, 63 },
	
			Package(){0x0004FFFF, 2, 0, 55 },
	
			Package(){0x0004FFFF, 3, 0, 63 },
	
	
	
	
		})
		Name(PG34, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG34, Package(){
	
			Package(){0x0000FFFF, 0, 0, 50 },
			Package(){0x0000FFFF, 1, 0, 52 },
			Package(){0x0000FFFF, 2, 0, 53 },
			Package(){0x0000FFFF, 3, 0, 54 },
		})
		Name(PG36, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG36, Package(){
	
			Package(){0x0000FFFF, 0, 0, 56 },
			Package(){0x0000FFFF, 1, 0, 60 },
			Package(){0x0000FFFF, 2, 0, 61 },
			Package(){0x0000FFFF, 3, 0, 62 },
		})
		Name(PG37, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG37, Package(){
	
			Package(){0x0000FFFF, 0, 0, 64 },
			Package(){0x0000FFFF, 1, 0, 68 },
			Package(){0x0000FFFF, 2, 0, 69 },
			Package(){0x0000FFFF, 3, 0, 70 },
		})
		Name(PG38, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG38, Package(){
	
			Package(){0x0000FFFF, 0, 0, 56 },
			Package(){0x0000FFFF, 1, 0, 61 },
			Package(){0x0000FFFF, 2, 0, 60 },
			Package(){0x0000FFFF, 3, 0, 62 },
		})
		Name(PG39, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG39, Package(){
	
			Package(){0x0000FFFF, 0, 0, 64 },
			Package(){0x0000FFFF, 1, 0, 69 },
			Package(){0x0000FFFF, 2, 0, 68 },
			Package(){0x0000FFFF, 3, 0, 70 },
		})
		Name(PG3A, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG3A, Package(){
	
			Package(){0x0000FFFF, 0, 0, 64 },
			Package(){0x0000FFFF, 1, 0, 68 },
			Package(){0x0000FFFF, 2, 0, 69 },
			Package(){0x0000FFFF, 3, 0, 70 },
		})
		Name(PG3C, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG3C, Package(){
	
			Package(){0x0000FFFF, 0, 0, 66 },
			Package(){0x0000FFFF, 1, 0, 69 },
			Package(){0x0000FFFF, 2, 0, 68 },
			Package(){0x0000FFFF, 3, 0, 70 },
		})
		Name(PR80, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
	
			Package(){0x0001FFFF, 0, LNKA, 0 },
			Package(){0x0001FFFF, 1, LNKB, 0 },
			Package(){0x0001FFFF, 2, LNKC, 0 },
			Package(){0x0001FFFF, 3, LNKD, 0 },
	
	
			Package(){0x0002FFFF, 0, LNKA, 0 },
			Package(){0x0002FFFF, 1, LNKB, 0 },
			Package(){0x0002FFFF, 2, LNKC, 0 },
			Package(){0x0002FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0003FFFF, 0, LNKA, 0 },
			Package(){0x0003FFFF, 1, LNKB, 0 },
			Package(){0x0003FFFF, 2, LNKC, 0 },
			Package(){0x0003FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0004FFFF, 0, LNKA, 0 },
	
			Package(){0x0004FFFF, 1, LNKB, 0 },
	
			Package(){0x0004FFFF, 2, LNKC, 0 },
	
			Package(){0x0004FFFF, 3, LNKD, 0 },
	
	
	
	
		})
		Name(AR80, Package(){
	
			Package(){0x0000FFFF, 0, 0, 72 },
			Package(){0x0000FFFF, 1, 0, 73 },
			Package(){0x0000FFFF, 2, 0, 73 },
			Package(){0x0000FFFF, 3, 0, 73 },
	
			Package(){0x0001FFFF, 0, 0, 74 },
			Package(){0x0001FFFF, 1, 0, 76 },
			Package(){0x0001FFFF, 2, 0, 77 },
			Package(){0x0001FFFF, 3, 0, 78 },
	
	
			Package(){0x0002FFFF, 0, 0, 80 },
			Package(){0x0002FFFF, 1, 0, 84 },
			Package(){0x0002FFFF, 2, 0, 85 },
			Package(){0x0002FFFF, 3, 0, 86 },
	
	
	
	
			Package(){0x0003FFFF, 0, 0, 88 },
			Package(){0x0003FFFF, 1, 0, 92 },
			Package(){0x0003FFFF, 2, 0, 93 },
			Package(){0x0003FFFF, 3, 0, 94 },
	
	
	
	
			Package(){0x0004FFFF, 0, 0, 79 },
	
			Package(){0x0004FFFF, 1, 0, 87 },
	
			Package(){0x0004FFFF, 2, 0, 79 },
	
			Package(){0x0004FFFF, 3, 0, 87 },
	
	
	
	
		})
		Name(PRC0, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
	
			Package(){0x0001FFFF, 0, LNKA, 0 },
			Package(){0x0001FFFF, 1, LNKB, 0 },
			Package(){0x0001FFFF, 2, LNKC, 0 },
			Package(){0x0001FFFF, 3, LNKD, 0 },
	
	
			Package(){0x0002FFFF, 0, LNKA, 0 },
			Package(){0x0002FFFF, 1, LNKB, 0 },
			Package(){0x0002FFFF, 2, LNKC, 0 },
			Package(){0x0002FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0003FFFF, 0, LNKA, 0 },
			Package(){0x0003FFFF, 1, LNKB, 0 },
			Package(){0x0003FFFF, 2, LNKC, 0 },
			Package(){0x0003FFFF, 3, LNKD, 0 },
	
	
	
	
			Package(){0x0004FFFF, 0, LNKA, 0 },
	
			Package(){0x0004FFFF, 1, LNKB, 0 },
	
			Package(){0x0004FFFF, 2, LNKC, 0 },
	
			Package(){0x0004FFFF, 3, LNKD, 0 },
	
	
	
	
		})
		Name(ARC0, Package(){
	
			Package(){0x0000FFFF, 0, 0, 96 },
			Package(){0x0000FFFF, 1, 0, 97 },
			Package(){0x0000FFFF, 2, 0, 97 },
			Package(){0x0000FFFF, 3, 0, 97 },
	
			Package(){0x0001FFFF, 0, 0, 98 },
			Package(){0x0001FFFF, 1, 0, 100 },
			Package(){0x0001FFFF, 2, 0, 101 },
			Package(){0x0001FFFF, 3, 0, 102 },
	
	
			Package(){0x0002FFFF, 0, 0, 104 },
			Package(){0x0002FFFF, 1, 0, 108 },
			Package(){0x0002FFFF, 2, 0, 109 },
			Package(){0x0002FFFF, 3, 0, 110 },
	
	
	
	
			Package(){0x0003FFFF, 0, 0, 112 },
			Package(){0x0003FFFF, 1, 0, 116 },
			Package(){0x0003FFFF, 2, 0, 117 },
			Package(){0x0003FFFF, 3, 0, 118 },
	
	
	
	
			Package(){0x0004FFFF, 0, 0, 103 },
	
			Package(){0x0004FFFF, 1, 0, 111 },
	
			Package(){0x0004FFFF, 2, 0, 103 },
	
			Package(){0x0004FFFF, 3, 0, 111 },
	
	
	
	
		})
		Name(PG78, Package(){
	
			Package(){0x0000FFFF, 0, LNKA, 0 },
			Package(){0x0000FFFF, 1, LNKB, 0 },
			Package(){0x0000FFFF, 2, LNKC, 0 },
			Package(){0x0000FFFF, 3, LNKD, 0 },
		})
		Name(AG78, Package(){
	
			Package(){0x0000FFFF, 0, 0, 16 },
			Package(){0x0000FFFF, 1, 0, 17 },
			Package(){0x0000FFFF, 2, 0, 18 },
			Package(){0x0000FFFF, 3, 0, 19 },
		})
	
	
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB) {
	
	
	
	
		Device(PCI0) {	
			Name(_HID, EISAID("PNP0A08"))	
			Name(_CID, EISAID("PNP0A03"))	
			Name(_ADR, 0x00000000)
			Method(^BN00, 0){ return(0x0000) }	
			Method(_BBN, 0){ return(BN00()) }	
			Name(_UID, 0x0000)	
				Method(_PRT,0) {
					If(PICM) { Return(AR00) }
					Return (PR00) 
				} 
	
	
	
	
	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			  Method(_OSC,4,Serialized)
					{ 
			    Name(SUPP,0) 
			    Name(CTRL,0) 
			    
			    CreateDWordField(Arg3,0,CDW1)
			    CreateDWordField(Arg3,4,CDW2)
			    If(LGreater(Arg2,2)) {         
			        CreateDWordField(Arg3,8,CDW3)
			    } 	
			    
			    
			    Store(_BBN(),Local0)
			    If( LEqual(Local0,0x0000) ) {					
			        
			        
			        
			        
			        If (LEqual (Arg0, ToUUID("7C9512A9-1705-4CB4-AF7D-506A2423AB71"))) {
			        Return (\_SB.PCI0.XHCI.POSC(Arg1, Arg2, Arg3))
			        }         
			    }
			    
			      
			    
			    If(LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766")))
			    {
							
							Store(CDW2,SUPP)
							Store(CDW3,CTRL)
							
							
							
							
							
							
					
							
							
							
							
							
							
					
							
							
							
							
					
			        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
			            And(CTRL,0x1E,CTRL) 
			            Sleep(1000)      
			        }
			    
			    
			    
			    And(CTRL, 0x1D, CTRL)
			    
			    if (LNot(PEPM)) 
			    {
			        And(CTRL,0x1B,CTRL) 
			        
			    }
			    if (LNot(PEER))	
			    {
			        And(CTRL,0x15,CTRL)
			    }
			    if (LNot(PECS)) 
			    {
			        And(CTRL,0xF,CTRL)
			    }
			
			    
			    If (Not(And(CDW1,1))) { 
			    
			    
			    
			    If (And(CTRL, 0x01)) { 
			                    
			        \_SB.PCI0.BR1A.OSHP ()
			        \_SB.PCI0.BR1B.OSHP ()
			        \_SB.PCI0.BR2A.OSHP ()
			        \_SB.PCI0.BR2B.OSHP ()
			        \_SB.PCI0.BR2C.OSHP ()
			        \_SB.PCI0.BR2D.OSHP ()
			        \_SB.PCI0.BR3A.OSHP ()
			        \_SB.PCI0.BR3B.OSHP ()
			        \_SB.PCI0.BR3C.OSHP ()
			        \_SB.PCI0.BR3D.OSHP ()
			
			        ShiftRight(IIOH, 1, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			         	\_SB.PCI1.QRP0.OSHP ()
					\_SB.PCI1.QR1A.OSHP ()
					\_SB.PCI1.QR1B.OSHP ()
					\_SB.PCI1.QR2A.OSHP ()
					\_SB.PCI1.QR2B.OSHP ()
					\_SB.PCI1.QR2C.OSHP ()
					\_SB.PCI1.QR2D.OSHP ()
					\_SB.PCI1.QR3A.OSHP ()
					\_SB.PCI1.QR3B.OSHP ()
					\_SB.PCI1.QR3C.OSHP ()
					\_SB.PCI1.QR3D.OSHP ()        
			        }  
			
			        ShiftRight(IIOH, 2, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI2.RRP0.OSHP ()
			                \_SB.PCI2.RR1A.OSHP ()
			                \_SB.PCI2.RR1B.OSHP ()
			                \_SB.PCI2.RR2A.OSHP ()
			                \_SB.PCI2.RR2B.OSHP ()
			                \_SB.PCI2.RR2C.OSHP ()
			                \_SB.PCI2.RR2D.OSHP ()
			                \_SB.PCI2.RR3A.OSHP ()
			                \_SB.PCI2.RR3B.OSHP ()
			                \_SB.PCI2.RR3C.OSHP ()
			                \_SB.PCI2.RR3D.OSHP ()
			        }  
			
			        ShiftRight(IIOH, 3, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI3.SRP0.OSHP ()
			                \_SB.PCI3.SR1A.OSHP ()
			                \_SB.PCI3.SR1B.OSHP ()
			                \_SB.PCI3.SR2A.OSHP ()
			                \_SB.PCI3.SR2B.OSHP ()
			                \_SB.PCI3.SR2C.OSHP ()
			                \_SB.PCI3.SR2D.OSHP ()
			                \_SB.PCI3.SR3A.OSHP ()
			                \_SB.PCI3.SR3B.OSHP ()
			                \_SB.PCI3.SR3C.OSHP ()
			                \_SB.PCI3.SR3D.OSHP ()
			        }
			                        
			        Store (0x01, GPSH)                
			        }
			        
			            
			          If (LNotEqual(Arg1,one)) { 
			            Or(CDW1,0x08,CDW1)
			          }
			
			          If(LNotEqual(CDW3,CTRL)) { 
			            Or(CDW1,0x10,CDW1)
			          }
			          
			          
			          
			          Store(CTRL,CDW3)
			          Return(Arg3)
			
			      } Else {
			        
			        
			        
			        
			        Or (CDW1,4,CDW1)
			        Store (0xEE, IO80)
			        Return(Arg3)
			      }
			    }
			  } 
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			





			



















			
			  Name (SUPP, 0)
			  Name (CTRL, 0)
			  
			  
			  
			  
			  Name(_PXM, 0)  
			  
			
			




























































































































			
			
			





			



















			
			
			
			

			





			



















			
			Device(APIC) {
			  Name (_HID,EISAID("PNP0003"))        
			  Name (_CRS, ResourceTemplate() {
			    
			    
			    
			    Memory32Fixed (ReadOnly, 0xFEC00000, 0x100000) 
			    }
			  )
			}

			
			  
			  Device (IIOP) {
			    
			    Name(_ADR, 0x00000000)          
			    Name(_UID, "PCI0PRES")          
			
			    
			      OperationRegion(IIOR, PCI_Config, 0x00, 0x02)
			    Field(IIOR, ByteAcc, NoLock, Preserve){
			        offset(0x00),
			      VID0,16,  
			    }
			  }
			
			
			
			
			
			
			
			
			
			
			
			
			  Name(P0RS, ResourceTemplate() {
			    
			    WORDBusNumber(            
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,              
			      0x4946,                 
			      0x3558,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                 
			    )
			
			    
			    IO(                       
			      Decode16,
			      0x0cf8,
			      0xcf8,
			      1,
			      8
			    )
			
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x0000,                 
			      0x0000,                 
			      0x0cf7,                 
			      0x0000,                 
			      0x0cf8                  
			   )
			
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x3658,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                  
			    )
			
			    
			    DWORDMEMORY(              
			      ResourceProducer,       
			      PosDecode,
			      MinFixed,               
			      MaxFixed,               
			      Cacheable,
			      ReadWrite,
			      0x55584946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000              
			    )
			


















			















			    
			    
			    
			    DWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x37584946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000             
			    )
			
			    
			    
			    
			    QWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x38584946,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000          
			    )
			  }) 
			
			  OperationRegion(TMEM, PCI_Config, 0x00, 0x100)
			  Field(TMEM, ByteAcc, NoLock, Preserve) {
			
			    Offset(0x40),
			    , 4,
			    BSEG, 4,
			    PAMS, 48,
			    Offset(0x52),
			    DIM0, 4,
			    DIM1, 4,
			    , 8,
			    DIM2, 4,
			





			
			  }
			
			  Name(MTBL, Package(0x10) {
			    0x0,
			    0x20,
			    0x20,
			    0x30,
			    0x40,
			    0x40,
			    0x60,
			    0x80,
			    0x80,
			    0x80,
			    0x80,
			    0xc0,
			    0x100,
			    0x100,
			    0x100,
			    0x200
			  })
			
			  Name(ERNG, Package(0xd) {
			    0xc0000,
			    0xc4000,
			    0xc8000,
			    0xcc000,
			    0xd0000,
			    0xd4000,
			    0xd8000,
			    0xdc000,
			    0xe0000,
			    0xe4000,
			    0xe8000,
			    0xec000,
			    0xf0000
			  })
			
			  Name(PAMB, Buffer(0x7) {
			  })
			
			  Method(EROM, 0x0, NotSerialized) {
			    CreateDWordField(P0RS, 0x5c, RMIN)
			    CreateDWordField(P0RS, 0x60, RMAX)
			    CreateDWordField(P0RS, 0x68, RLEN)
			    CreateByteField(PAMB, 0x6, BREG)
			    Store(PAMS, PAMB)
			    Store(BSEG, BREG)
			    Store(0x0, RMIN)
			    Store(0x0, RMAX)
			    Store(0x0, RLEN)
			    Store(0x0, Local0)
			    While(LLess(Local0, 0xd))
			    {
			      ShiftRight(Local0, 0x1, Local1)
			      Store(DerefOf(Index(PAMB, Local1, )), Local2)
			      If(And(Local0, 0x1, ))
			      {
			          ShiftRight(Local2, 0x4, Local2)
			      }
			      And(Local2, 0x3, Local2)
			      If(RMIN)
			      {
			        If(Local2)
			        {
			          Add(DerefOf(Index(ERNG, Local0, )), 0x3fff, RMAX)
			          If(LEqual(RMAX, 0xf3fff))
			          {
			            Store(0xfffff, RMAX)
			          }
			          Subtract(RMAX, RMIN, RLEN)
			          Increment(RLEN)
			        }
			        Else
			        {
			          Store(0xc, Local0)
			        }
			      }
			      Else
			      {
			        If(Local2)
			        {
			          Store(DerefOf(Index(ERNG, Local0, )), RMIN)
			          Add(DerefOf(Index(ERNG, Local0, )), 0x3fff, RMAX)
			          If(LEqual(RMAX, 0xf3fff))
			          {
			            Store(0xfffff, RMAX)
			          }
			          Subtract(RMAX, RMIN, RLEN)
			          Increment(RLEN)
			        }
			        Else
			        {
			        }
			      }
			      Increment(Local0)
			    }
			  }
			
			  
			  Method(_CRS, 0x0, NotSerialized) {
			    
			    
			    Return(P0RS)
			  }
			
			  
			  
			  
			  
			  
			  Device (MHP0) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "00-00")
			
			    
			    OperationRegion(MHP0, PCI_Config, 0x00, 0x100)
			    Field(MHP0,ByteAcc,NoLock,Preserve) {
			      Offset(0x0E),
			      STM0,7,
			    }
			  }
			
			  Device (MHP1) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "00-01")
			
			    
			    OperationRegion(MHP1, PCI_Config, 0x00, 0x100)
			    Field(MHP1,ByteAcc,NoLock,Preserve) {
			      Offset(0x1E),
			      STM1,7,
			    }
			  }
			



















			
			
			
			
			Scope(\_SB.PCI0)
			{
			        
			        Name(SLI1, Buffer()
			        {
			                "791369584825Genuine NVIDIA Certified SLI Ready Motherboard for INTEL CRB           ef7c-Copyright 2014 NVIDIA Corporation All Rights Reserved-394180768352(R)"
			        })
			        Name(SLI0, Buffer()
			        {
			                " No SLI key has been loaded because this board does not support SLI.  Intel Coporation (R)"
			        })
			}
			
			Device(\_SB.PCI0.WMI1)
			{
			        Name(_HID, "PNP0C14")
			        Name(_UID, "MXM2")
			        
			        Name(_WDG, Buffer() {
			                
			                0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xbd, 0x4e, 0xB5, 0x77, 0x93, 0x1E,
			                0xA3, 0x2A, 0x2C, 0xC0,
			                0x4D, 0x58,
			                1, 
			                0x02, 
			        })
			
			        
			        Method(WMMX, 3)
			        {
			                CreateDWordField(Arg2, 0, FUNC)
			                If (LEqual(FUNC, 0x41494c53)) { 
			                   Return(\_SB.PCI0.SLI1)
			                   }
			              
			           
			
			                
			                Return(0)
			        } 
			} 
			
			
			


	
	
	
	
			Device(LPC0) { 
				Name(_ADR, 0x001F0000)
	
	
	
	
				





				



















				
				
				
				
				
				OperationRegion (LPCB, PCI_Config, 0x00, 0x100)
				Field (LPCB, DWordAcc, NoLock, Preserve)
				{
					Offset (0x4C),
					GLE0	,1, 				
					Offset (0xAC),
							, 16,
					XSMB, 1					
				}
				
				
				





				



















				
				Device (DMAC) {
				  Name (_HID, EISAID("PNP0200"))
				  Name (_CRS,ResourceTemplate() {
				    IO(Decode16, 0x0, 0x0, 0, 0x10)
				    IO(Decode16, 0x81, 0x81, 0, 0x3)
				    IO(Decode16, 0x87, 0x87, 0, 0x1)
				    IO(Decode16, 0x89, 0x89, 0, 0x3)
				    IO(Decode16, 0x8f, 0x8f, 0, 0x1)
				    IO(Decode16, 0xc0, 0xc0, 0, 0x20)
				    DMA(Compatibility,NotBusMaster,Transfer8) {4}
				  })
				}
				
				Device (RTC) {
				  Name (_HID,EISAID("PNP0B00"))
				  Name (_CRS,ResourceTemplate() {
				    IO(Decode16,0x70,0x70,0x01,0x02)
				    IO(Decode16,0x74,0x74,0x01,0x04)
				    IRQNoFlags(){8}
				  })
				}
				
				Device (PIC) {
				  Name (_HID,EISAID("PNP0000"))
				  Name (_CRS,ResourceTemplate() {
				    IO(Decode16,0x20,0x20,0x01,0x1E)        
				    IO(Decode16,0xA0,0xA0,0x01,0x1E)
				    IO(Decode16,0x4D0,0x4D0,0x01,0x02)
				  })
				}
				
				Device (FPU) {
				  Name (_HID,EISAID("PNP0C04"))
				  Name (_CRS,ResourceTemplate() {
				    IO(Decode16,0xF0,0xF0,0x01,0x1)
				    IRQNoFlags(){13}
				  })
				}
				
				Device(TMR)
				{
				  Name(_HID,EISAID("PNP0100"))
				
				  Name(_CRS,ResourceTemplate() {
				    IO(Decode16,0x40,0x40,0x01,0x04)
				    IO(Decode16,0x50,0x50,0x01,0x04)        
				    IRQNoFlags(){0}
				  })
				}
				
				Device (SPKR) {
				  Name (_HID,EISAID("PNP0800"))
				  Name (_CRS,ResourceTemplate() {
				    IO(Decode16,0x61,0x61,0x01,0x01)
				  })
				}
				
				
				
				
				Device (HPET) {
				  Name (_HID, EisaId ("PNP0103"))
				  OperationRegion(HPTC, SystemMemory, 0xFED1F404, 0x4)
				  Field (HPTC, DWordAcc, NoLock, Preserve) {
				    HPTS,   2,      
				        ,   5,
				    HPTE,   1,      
				        ,   24
				  }
				
				  Method (_STA, 0, NotSerialized) {
				    If (HPTE) {
				      Return (0x0F)
				    } Else {
				      Return (0x00)
				    }
				  }
				
				  Name (CRS0, ResourceTemplate () {
				    Memory32Fixed (ReadWrite, 0xFED00000, 0x00000400)
				  })
				
				  Name (CRS1, ResourceTemplate () {
				    Memory32Fixed (ReadWrite, 0xFED01000, 0x00000400)
				  })
				
				  Name (CRS2, ResourceTemplate () {
				    Memory32Fixed (ReadWrite, 0xFED02000, 0x00000400)
				  })
				
				  Name (CRS3, ResourceTemplate () {
				    Memory32Fixed (ReadWrite, 0xFED03000, 0x00000400)
				  })
				
				  
				  
				  
				  Method (_CRS, 0, Serialized) {
				    Switch (ToInteger(HPTS)) {
				      Case (0) {
				        Return (CRS0)
				      }
				
				      Case (1) {
				        Return (CRS1)
				      }
				
				      Case (2) {
				        Return (CRS2)
				      }
				
				      Case (3) {
				        Return (CRS3)
				      }
				    }
				    Return (CRS0)
				  }
				}
				
				
				
				
				Device(XTRA) {
				  Name(_HID,EISAID("PNP0C02"))        
				
				




  
				  Name (_UID, 0x10)             
				
				  Name(_CRS,
				      ResourceTemplate() {
				       
				        
				        IO(Decode16,0x500,0x500,0x01,0x80)                  
				       
				      IO(Decode16,0x400,0x400,0x01,0x80) 
				      IO(Decode16,0x92,0x92,0x01,0x01)                    
				      
				      
				      
				      
				      IO(Decode16,0x10,0x10,0x01,0x10)
				      IO(Decode16,0x72,0x72,0x01,0x02)
				      IO(Decode16,0x80,0x80,0x01,0x01)
				      IO(Decode16,0x84,0x84,0x01,0x03)
				      IO(Decode16,0x88,0x88,0x01,0x01)
				      IO(Decode16,0x8c,0x8c,0x01,0x03)
				      IO(Decode16,0x90,0x90,0x01,0x10)
				      
				      
				      
				      
				      IO(Decode16,0x580,0x580,0x01,0x20)      
				      
				      
				      
				      
				      IO(Decode16,0x600,0x600,0x01,0x20)
				      
				      
				      
				      
				      
				      
				      
				      IO(Decode16,0x880,0x880,0x01,0x4)
				
				      
				      IO(Decode16,0x800,0x800,0x01,0x20)
				      
				      
				      
				      
				
				      
				      
				      
				      
				      Memory32Fixed (ReadOnly, 0xFED1C000, 0x24000) 
				      
				      Memory32Fixed (ReadOnly, 0xFED45000, 0x47000) 
				
				      
				      
				      
				      Memory32Fixed (ReadOnly, 0xFF000000, 0x1000000) 
				
				      
				      
				      
				      Memory32Fixed (ReadOnly, 0xFEE00000, 0x100000)
				
				      
				      
				      
				      
				      Memory32Fixed (ReadWrite, 0xFED12000, 0x10)
				
				      
				      
				      
				      
				      Memory32Fixed (ReadWrite, 0xFED12010, 0x10)
				
				      
				      
				      
				      Memory32Fixed (ReadOnly, 0xFED1B000, 0x1000)
				    }
				  )
				}
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				    OperationRegion(LPCR, PCI_Config, 0x80, 4)
				    Field(LPCR, ByteAcc, NoLock, Preserve) {
				        CADR, 3,        
				        , 1,
				        CBDR, 3,        
				        , 1,
				        LTDR, 2,        
				        , 2,
				        FDDR, 1,        
				        , 3,
				        CALE, 1,        
				        CBLE, 1,        
				        LTLE, 1,        
				        FDLE, 1,        
				        , 4,
				        GLLE, 1,        
				        GHLE, 1,        
				        KCLE, 1,        
				        MCLE, 1,        
				        C1LE, 1,        
				        C2LE, 1,        
				        , 2,
				    }
				                                        
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				    Method(UXDV, 1, Serialized) {
				        Store(0xff, Local0) 
				        Switch (Add(Arg0, 0)) {
				            Case (0x3F8) { Store(0, Local0) }
				            Case (0x2F8) { Store(1, Local0) }
				            Case (0x220) { Store(2, Local0) }
				            Case (0x228) { Store(3, Local0) }
				            Case (0x238) { Store(4, Local0) }
				            Case (0x2E8) { Store(5, Local0) }
				            Case (0x338) { Store(6, Local0) }
				            Case (0x3E8) { Store(7, Local0) }
				        }
				        return (Local0)
				    }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				    Method(RRIO, 4, Serialized) {
				        Switch (Add(Arg0, 0)) {
				            Case (0) {  
				                Store(0, CALE) 
				                Store (UXDV(Arg2), Local0)
				                If (LNotEqual(Local0, 0xff)) { Store(Local0, CADR)}
				                If (Arg1) { Store(1, CALE) }
				            }
				            Case (1) {  
				                Store(0, CBLE) 
				                Store (UXDV(Arg2), Local0)
				                If (LNotEqual(Local0, 0xff)) { Store(Local0, CBDR)}
				                If (Arg1) { Store(1, CBLE) }
				            }
				            Case (2) {  
				                Store(0, LTLE) 
				                If (LEqual(Arg2, 0x378)) { Store(0, LTDR) }
				                If (LEqual(Arg2, 0x278)) { Store(1, LTDR) }
				                If (LEqual(Arg2, 0x3BC)) { Store(2, LTDR) }
				                If (Arg1) { Store(1, LTLE) }
				            }
				            Case (3) {  
				                Store(0, FDLE) 
				                If (LEqual(Arg2, 0x3F0)) { Store(0, FDDR) }
				                If (LEqual(Arg2, 0x370)) { Store(1, FDDR) }
				                If (Arg1) { Store(1, FDLE) }
				            }
				            Case (8) {  
				                If (LEqual(Arg2, 0x200)) {
				                    If (Arg1) { Store(1, GLLE) }
				                    Else { Store(0, GLLE) }
				                }
				                If (LEqual(Arg2, 0x208)) {
				                    If (Arg1) { Store(1, GHLE) }
				                    Else { Store(0, GHLE) }
				                }
				            }
				            Case (9) {  
				                If (LEqual(Arg2, 0x200)) {
				                    If (Arg1) { Store(1, GLLE) }
				                    Else { Store(0, GLLE) }
				                }
				                If (LEqual(Arg2, 0x208)) {
				                    If (Arg1) { Store(1, GHLE) }
				                    Else { Store(0, GHLE) }
				                }
				            }
				            Case (10) {  
				                If (LOr(LEqual(Arg2, 0x60), LEqual(Arg2, 0x64))) {
				                    If (Arg1) { Store(1, KCLE) }
				                    Else { Store(0, KCLE) }
				                }
				            }
				            Case (11) {  
				                If (LOr(LEqual(Arg2, 0x62), LEqual(Arg2, 0x66))) {
				                    If (Arg1) { Store(1, MCLE) }
				                    Else { Store(0, MCLE) }
				                }
				            }
				            Case (12) {  
				                If (LEqual(Arg2, 0x2E)) {
				                    If (Arg1) { Store(1, C1LE) }
				                    Else { Store(0, C1LE) }
				                }
				                If (LEqual(Arg2, 0x4E)) {
				                    If (Arg1) { Store(1, C2LE) }
				                    Else { Store(0, C2LE) }
				                }
				            }
				            Case (13) {  
				                If (LEqual(Arg2, 0x2E)) {
				                    If (Arg1) { Store(1, C1LE) }
				                    Else { Store(0, C1LE) }
				                }
				                If (LEqual(Arg2, 0x4E)) {
				                    If (Arg1) { Store(1, C2LE) }
				                    Else { Store(0, C2LE) }
				                }
				            }
				
				        }
				        
				    }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				    Method(RDMA, 3) {
				    
				    }
				
				
				
				
				
				
				
				
				
				
				
				
				
				

	
	
	
	
				Device(SIO1) {
					Name(_HID, EISAID("PNP0C02"))	
					Name(_UID,0x0)	
				
	
	
	
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Name(CRS, ResourceTemplate(){
					        IO(Decode16, 0, 0, 0, 0, IOI)   
					        IO(Decode16, 0, 0, 0, 0, IO1)   
					        IO(Decode16, 0, 0, 0, 0, IO2)   
					        IO(Decode16, 0, 0, 0, 0, IO3)   
					        IO(Decode16, 0, 0, 0, 0, IO4)   
					        IO(Decode16, 0, 0, 0, 0, IO5)   
					    }) 
					
					    Method (_CRS, 0){
					        
					        
					        
					        If(LAnd(LLess(SP1O, 0x3F0), LGreater(SP1O, 0x0F0))){
					            CreateWordField(CRS, ^IOI._MIN, GPI0)
					            CreateWordField(CRS, ^IOI._MAX, GPI1)
					            CreateByteField(CRS, ^IOI._LEN, GPIL)
					            Store(SP1O, GPI0)    
					            Store(SP1O, GPI1)
					            Store(0x02, GPIL)    
					        }
					
					        
					        If(IO1B){
					            CreateWordField(CRS, ^IO1._MIN, GP10)
					            CreateWordField(CRS, ^IO1._MAX, GP11)
					            CreateByteField(CRS, ^IO1._LEN, GPL1)
					            Store(IO1B, GP10)    
					            Store(IO1B, GP11)
					            Store(IO1L, GPL1)    
					        }
					
					        
					        If(IO2B){
					            CreateWordField(CRS, ^IO2._MIN, GP20)
					            CreateWordField(CRS, ^IO2._MAX, GP21)
					            CreateByteField(CRS, ^IO2._LEN, GPL2)
					            Store(IO2B, GP20)    
					            Store(IO2B, GP21)
					            Store(IO2L, GPL2)    
					        }
					        
					        
					        If(IO3B){
					            CreateWordField(CRS, ^IO3._MIN, GP30)
					            CreateWordField(CRS, ^IO3._MAX, GP31)
					            CreateByteField(CRS, ^IO3._LEN, GPL3)
					            Store(IO3B, GP30)    
					            Store(IO3B, GP31)
					            Store(IO3L, GPL3)    
					        }
					        
					        
					        If(IO4B){
					            CreateWordField(CRS, ^IO4._MIN, GP40)
					            CreateWordField(CRS, ^IO4._MAX, GP41)
					            CreateByteField(CRS, ^IO4._LEN, GPL4)
					            Store(IO4B, GP40)    
					            Store(IO4B, GP41)
					            Store(IO4L, GPL4)    
					        }
					        
					        
					        If(IO5B){
					            CreateWordField(CRS, ^IO5._MIN, GP50)
					            CreateWordField(CRS, ^IO5._MAX, GP51)
					            CreateByteField(CRS, ^IO5._LEN, GPL5)
					            Store(IO5B, GP50)    
					            Store(IO5B, GP51)
					            Store(IO5L, GPL5)    
					        }
					        Return(CRS)
					    }    
					
					    
					    
					    
					    
					    
					    
					    
					    Name (DCAT, Package(0x15){
					    
					    
					    
					        0x02,    
					        0x03,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0x05,    
					        0xFF,    
					        0xFF,    
					        0xFF,    
					        0x05,    
					        0xFF,    
					
					        0xFF,    
					        0x0B,    
					        0x0C,    
					        0xFF,    
					        0xFF,    
					    })
					
					    
					    
					    
					    Mutex(MUT0, 0)    
					
					    
					    
					    
					    
					    Method(ENFG, 1) {
					        Acquire(MUT0, 0xFFF)
					        
					        Store(0xA5, INDX)
					        Store(0xA5, INDX)
					        Store(Arg0, LDN)    
					    }
					
					    
					    
					    
					    Method(EXFG, 0) {
					        
					        Store(0xAA, INDX)
					        Release(MUT0)
					    }
					
					    
					    
					    
					    
					    Method(UHID, 1){
					        
					        Return(EISAID("PNP0501"))   
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    
					    
					    
					    OperationRegion(IOID,   
					        SystemIO,           
					        SP1O,               
					        2)                  
					                            
					    Field(IOID, ByteAcc, NoLock,Preserve){
					        INDX, 8,            
					        DATA, 8             
					    }
					
					    
					    
					    
					    IndexField(INDX, DATA, ByteAcc, NoLock, Preserve){
					        Offset(0x07),
					        LDN, 8,         
					
					        Offset(0x21),
					        SCF1, 8,        
					        Offset(0x22),
					        SCF2, 8,        
					        Offset(0x23),
					        SCF3, 8,        
					        Offset(0x24),
					        SCF4, 8,        
					        Offset(0x25),
					        SCF5, 8,        
					        Offset(0x26),
					        SCF6, 8,        
					        Offset(0x29),
					        CKCF, 8,        
					        Offset(0x30),
					        ACTR, 8,        
					        Offset(0x60),
					        IOAH, 8,        
					        IOAL, 8,        
					        IOH2, 8,        
					        IOL2, 8,        
					        Offset(0x70),
					        INTR, 4,        
					        INTT, 4,        
					        Offset(0x74),
					        DMCH, 8,        
					        Offset(0xE0),
					        RGE0, 8,        
					        RGE1, 8,        
					        RGE2, 8,        
					        RGE3, 8,        
					        RGE4, 8,        
					        RGE5, 8,        
					        RGE6, 8,        
					        RGE7, 8,        
					        RGE8, 8,        
					        RGE9, 8,        
					        Offset(0xF0),
					        OPT0, 8,        
					        OPT1, 8,        
					        OPT2, 8,        
					        OPT3, 8,        
					        OPT4, 8,        
					        OPT5, 8,        
					        OPT6, 8,        
					        OPT7, 8,        
					        OPT8, 8,        
					        OPT9, 8,        
					    }        
					
					    
					    
					    
					    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
					    Field (RNTR, ByteAcc, NoLock, Preserve){
					        PMES, 8,    
					        Offset(0x04),
					        PMEE, 1,    
					        ,7,
					        Offset(0x08),
					        PMS3, 8,    
					        PMS2, 8,    
					        PMS1, 8,    
					        ,8,
					        PME3, 8,    
					        PME2, 8,    
					        PME1, 8,    
					    } 
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(CGLD, 1) {
					        Return(DeRefOf(Index(DCAT, Arg0)))    
					    }
					
					
					
					
					
					
					
					
					
					
					
					    Method(DSTA, 1) {
					
					        
					        
					        
					        
					        ENFG(CGLD(Arg0))        
					        Store(ACTR, Local0)     
					        Or(ShiftLeft(IOAH, 8),IOAL,Local1) 
					        EXFG()                            
					
					        
					        If(LEqual(Local0, 0xFF)) {Return(0x0)}    
					
					        
					        
					        And(Local0, 1, Local0)  
					
					        
					        If(LLess(Arg0,0x10)) {Or(IOST, ShiftLeft(Local0, Arg0), IOST)}
					
					        
					        
					        If(Local0){ 
					            Return(0x0F)            
					        }    
					        Else{
					            If(LLess(Arg0,0x10)){
					                
					                If(And(ShiftLeft(1, Arg0), IOST)){ Return(0x0D)}  
					                
					                
					                Else{ Return(0x00)}  
					            }
					            Else{
					                If(Local1) { Return(0x0D)}  
					                Return(0x00) 
					            }
					        }
					    } 
					
					
					
					
					
					
					
					
					
					
					
					    Method(DCNT, 2) {
					
					        ENFG(CGLD(Arg0))    
					
					        
					        
					        
					        If(LAnd(LLess(DMCH,4), LNotEqual(And(DMCH, 3, Local1),0))){
					            rDMA(Arg0, Arg1, Increment(Local1))
					        }
					
					        Store(Arg1, ACTR)           
					        ShiftLeft(IOAH, 8, local1)  
					        Or(IOAL, Local1, Local1)
					
					        
					        
					        
					        
					        
					        RRIO(Arg0, Arg1, Local1, 0x08)
					
					        EXFG()              
					    } 
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					Name(CRS1, ResourceTemplate(){
					    IO(Decode16, 0, 0, 1, 0, IO01)
					    IRQNoFlags(IRQ1) {}
					    DMA(Compatibility, NotBusMaster, Transfer8, DMA1) {}
					})
					CreateWordField(CRS1, IRQ1._INT, IRQM)    
					CreateByteField(CRS1, DMA1._DMA, DMAM)    
					CreateWordField(CRS1, IO01._MIN, IO11)    
					CreateWordField(CRS1, IO01._MAX, IO12)    
					CreateByteField(CRS1, IO01._LEN, LEN1)    
					
					
					Name(CRS2, ResourceTemplate(){
					    IO(Decode16, 0, 0, 1, 0, IO02)
					    IO(Decode16, 0, 0, 1, 0, IO03)
					    IRQNoFlags(IRQ2) {}
					        DMA(Compatibility, NotBusMaster, Transfer8, DMA2) {}
					})
					CreateWordField(CRS2, IRQ2._INT, IRQE)    
					CreateByteField(CRS2, DMA2._DMA, DMAE)    
					CreateWordField(CRS2, IO02._MIN, IO21)    
					CreateWordField(CRS2, IO02._MAX, IO22)    
					CreateByteField(CRS2, IO02._LEN, LEN2)    
					CreateWordField(CRS2, IO03._MIN, IO31)    
					CreateWordField(CRS2, IO03._MAX, IO32)    
					CreateByteField(CRS2, IO03._LEN, LEN3)    
					
					
					Name(CRS3, ResourceTemplate(){
					    IO(Decode16, 0, 0, 1, 0, IO04)
					    IRQ(Edge,ActiveLow,Shared,IRQ3){}    
					    DMA(Compatibility, NotBusMaster, Transfer8, DMA3) {}
					})
					CreateWordField(CRS3, IRQ3._INT, IRQT)    
					CreateByteField(CRS3, 0x0B,IRQS)         
					CreateByteField(CRS3, DMA3._DMA, DMAT)    
					CreateWordField(CRS3, IO04._MIN, IO41)    
					CreateWordField(CRS3, IO04._MAX, IO42)    
					CreateByteField(CRS3, IO04._LEN, LEN4)    
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DCRS, 2) {
					        ENFG(CGLD(Arg0))            
					
					        
					        ShiftLeft(IOAH, 8, IO11)    
					        Or(IOAL, IO11, IO11)        
					        Store(IO11, IO12)           
					
					        
					        
					        
					        
					        
					        
					        Store(0x08, LEN1)
					
					        
					        If(INTR){
					            ShiftLeft(1, INTR, IRQM)
					        } 
					        Else{
					            Store(0, IRQM)          
					        }
					
					        
					        
					        
					        
					        If(LOr(LGreater(DMCH,3), LEqual(Arg1, 0))){
					            Store(0, DMAM)          
					        } 
					        Else{
					            And(DMCH, 3, Local1)
					            ShiftLeft(1, Local1, DMAM)
					        }
					        EXFG()                      
					        Return(CRS1)                
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DCR2, 2) {
					        ENFG(CGLD(Arg0))            
					
					        
					        ShiftLeft(IOAH, 8, IO21)    
					        Or(IOAL, IO21, IO21)        
					        Store(IO21, IO22)           
					        Store(0x08, LEN2)
					
					        
					        ShiftLeft(IOH2, 8, IO31)    
					        Or(IOL2, IO31, IO31)        
					        Store(IO31, IO32)           
					        Store(0x08, LEN3)
					
					        
					        If(INTR){
					            ShiftLeft(1, INTR, IRQE)
					        } 
					        Else{
					            Store(0, IRQE)          
					        }
					
					        
					        
					        
					        
					        If(LOr(LGreater(DMCH,3), LEqual(Arg1, 0))){
					            Store(0, DMAE)          
					        } Else {
					            And(DMCH, 3, Local1)
					            ShiftLeft(1, Local1, DMAE)
					        }
					
					        EXFG()                      
					        Return(CRS2)                
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DCR3, 2) {
					
					        ENFG(CGLD(Arg0))            
					
					        
					        ShiftLeft(IOAH, 8, IO41)    
					        Or(IOAL, IO41, IO41)        
					        Store(IO41, IO42)           
					        Store(0x08, LEN4)
					
					        
					        If(INTR){
					            ShiftLeft(1, INTR, IRQT)
						    
					        
					        
					        
					        
					        
					        
					        }Else{
					            Store(0, IRQT)            
					        }
					        
					        
					        
					        
					        If(LOr(LGreater(DMCH,3), LEqual(Arg1, 0))){
					            Store(0, DMAT)          
					        } Else {
					            And(DMCH, 3, Local1)
					            ShiftLeft(1, Local1, DMAT)
					        }
					
					        EXFG()                        
					        Return(CRS3)                  
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DSRS, 2) {
					            
					            CreateWordField(Arg0, ^IRQ1._INT, IRQM)    
					            CreateByteField(Arg0, ^DMA1._DMA, DMAM)    
					            CreateWordField(Arg0, ^IO01._MIN, IO11)    
					    
					            ENFG(CGLD(Arg1))            
					    
					            
					            And(IO11, 0xFF, IOAL)       
					            ShiftRight(IO11, 0x8, IOAH) 
					    
					            
					            If(IRQM){
					                FindSetRightBit(IRQM, Local0)
					                Subtract(Local0, 1, INTR)
					            }Else{
					                Store(0, INTR)          
					            }
					    
					            
					            If(DMAM){
					                FindSetRightBit(DMAM, Local0)
					                Subtract(Local0, 1, DMCH)
					            }Else{
					                Store(4, DMCH)          
					            }
					    
					            EXFG()                      
					    
					            
					            DCNT(Arg1, 1)               
					    
					            Store(Arg1, Local2)
					            If (LGreater(Local2, 0)){Subtract(Local2, 1, Local2)}
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DSR2, 2) {
					        CreateWordField(Arg0, ^IRQ2._INT, IRQE)    
					        CreateByteField(Arg0, ^DMA2._DMA, DMAE)    
					        CreateWordField(Arg0, ^IO02._MIN, IO21)    
					        CreateWordField(Arg0, ^IO03._MIN, IO31)    
					
					        ENFG(CGLD(Arg1))                
					
					        
					        And(IO21, 0xFF, IOAL)           
					        ShiftRight(IO21, 0x8, IOAH)     
					
					        And(IO31, 0xFF, IOL2)           
					        ShiftRight(IO31, 0x8, IOH2)     
					
					        
					        If(IRQE){
					            FindSetRightBit(IRQE, Local0)
					            Subtract(Local0, 1, INTR)
					        }Else{
					            Store(0, INTR)              
					        }
					
					        
					        If(DMAE){
					            FindSetRightBit(DMAE, Local0)
					            Subtract(Local0, 1, DMCH)
					        }Else{
					            Store(4, DMCH)              
					        }
					
					        EXFG()                          
					
					        
					        DCNT(Arg1, 1)                   
					
					        Store(Arg1, Local2)
					        If (LGreater(Local2, 0)){Subtract(Local2, 1, Local2)}
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					    Method(DSR3, 2) {
					        CreateWordField(Arg0, ^IO04._MIN, IO41) 
					        CreateWordField(Arg0, ^IRQ3._INT, IRQT) 
					        CreateByteField(Arg0, 0x0B, IRQS) 
					        CreateByteField(Arg0, ^DMA3._DMA, DMAT)    
					
					        ENFG(CGLD(Arg1))                
					
					        
					        And(IO41,0xff, IOAL)            
					        ShiftRight(IO41, 0x8, IOAH)     
					
					        
					        If(IRQT){
					            FindSetRightBit(IRQT, Local0)
					            Subtract(Local0, 1, INTR)
					        
					        
					        }Else{
					            Store(0, INTR)              
					        }
					        
					        If(DMAT){
					           FindSetRightBit(DMAT, Local0)
					           Subtract(Local0, 1, DMCH)
					        }Else{
					           Store(4, DMCH)          
					        }
					
					        EXFG()                          
					        
					        DCNT(Arg1, 1)                   
					        Store(Arg1, Local2)
					        If (LGreater(Local2, 0)){Subtract(Local2, 1, Local2)}
					    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					Name(PMFG, 0x00)    
					
					
					
					
					
					
					
					Method(SIOS, 1){
					    
					    Store("SIOS", Debug)
					
					}
					
					
					
					
					
					
					
					Method(SIOW, 1){
					    Store("SIOW", Debug)
					    
					}
					
					
					
					
					
					
					
					Method(SIOH, 0){
					
					}    
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

	
				}
	
				Device(UAR1) {
					Name(_HID, EISAID("PNP0501"))	
					Name(_UID, 0x00)	
					Name(LDN, 0x02)	
				
	
	
	
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
						Method(_STA, 0) {Return(^^SIO1.DSTA(0))}	
						Method(_DIS, 0) {^^SIO1.DCNT(0, 0)}			
						Method(_CRS, 0) {Return(^^SIO1.DCRS(0, 0))}	
						Method(_SRS, 1) {^^SIO1.DSRS(Arg0, 0)} 		
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
						Name(_PRS, ResourceTemplate() {
							StartDependentFn(0, 0) {
								IO(Decode16, 0x3F8, 0x3F8, 1, 8)
								IRQNoFlags() {4}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x3F8, 0x3F8, 1, 8)
								
								IRQNoFlags() {4}	
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x2F8, 0x2F8, 1, 8)
								
								
					                        IRQNoFlags() {3} 
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x3E8, 0x3E8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x2E8, 0x2E8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							EndDependentFn()
						})
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

	
				}	
	
				Device(UAR2) {
					Name(_HID, EISAID("PNP0501"))	
					Name(_UID, 0x01)	
					Name(LDN, 0x03)	
				
	
	
	
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
						Method(_STA, 0) {Return(^^SIO1.DSTA(1))}	
						Method(_DIS, 0) {^^SIO1.DCNT(1, 0)}			
					    Method(_CRS, 0) {Return(^^SIO1.DCRS(1, 0))}	
						Method(_SRS, 1) {^^SIO1.DSRS(Arg0, 1)}		
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
						Name(_PRS, ResourceTemplate() {
							StartDependentFn(0, 0) {
								IO(Decode16, 0x2F8, 0x2F8, 1, 8)
								IRQNoFlags() {3}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x3F8, 0x3F8, 1, 8)
								
								IRQNoFlags() {4}	
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x2F8, 0x2F8, 1, 8)
								
								IRQNoFlags() {3}	
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x3E8, 0x3E8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							StartDependentFnNoPri() {
								IO(Decode16, 0x2E8, 0x2E8, 1, 8)
								IRQNoFlags() {3,4,5,7,9,10,11,12}
								DMA(Compatibility, NotBusMaster, Transfer8) {}
							}
							EndDependentFn()
						})
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

	
				}	
	
				Device(LPC2) {
					Name(_HID, EISAID("PNP0C08"))	
					Name(_UID, 0x02)	
					Name(LDN, 0x0D)	
				
	
	
	
					
					Method(_STA,0){
					    
					    Return(0x00) 
					}

	
				}	
	
				Device(MAIL) {
					Name(_HID, EISAID("PNP0C08"))	
					Name(_UID, 0x03)	
					Name(LDN, 0x0E)	
				
	
	
	
					
					Method(_STA,0){
					    
					    Return(0x00) 
					}

	
				}	
	
			} 
	
			Device(IP2P) { 
				Name(_ADR, 0x001E0000)
				Method(_PRW, 0) { Return(GPRW(0x0B, 3)) }	
			} 
	
			Device(SAT1) { 
				Name(_ADR, 0x001F0002)
	
	
	
	
				





				


















				
				    OperationRegion (IDER,PCI_Config,0x40,0x20)
				    Field (IDER, AnyAcc, NoLock, Preserve) 
				    {
				        PFT0   , 1 ,    
				        PIE0   , 1 ,    
				        PPE0   , 1 ,    
				        PDE0   , 1 ,    
				        PFT1   , 1 ,    
				        PIE1   , 1 ,    
				        PPE1   , 1 ,    
				        PDE1   , 1 ,    
				        PRT0   , 2 ,    
				               , 2 ,    
				        PIP0   , 2 ,    
				        PSIT   , 1 ,    
				        PIDE   , 1 ,    
				        offset (0x2) ,
				        SFT0   , 1 ,    
				        SIE0   , 1 ,    
				        SPE0   , 1 ,    
				        SDE0   , 1 ,    
				        SFT1   , 1 ,    
				        SIE1   , 1 ,    
				        SPE1   , 1 ,    
				        SDE1   , 1 ,    
				        SRT0   , 2 ,    
				               , 2 ,    
				        SIP0   , 2 ,    
				        SSIT   , 1 ,    
				        SIDE   , 1 ,    
				    
				        PRT1   , 2 ,    
				        PIP1   , 2 ,    
				        SRT1   , 2 ,    
				        SIP1   , 2 ,    
				    
				        offset (0x08)  ,  
				    
				        UDM0   , 1 ,    
				        UDM1   , 1 ,    
				        UDM2   , 1 ,    
				        UDM3   , 1 ,    
				    
				        offset (0x0A)  ,
				    
				        PCT0   , 2 ,   
				               , 2 ,   
				        PCT1   , 2 ,   
				               , 2 ,   
				        SCT0   , 2 ,   
				               , 2 ,   
				        SCT1   , 2 ,   
				    
				        offset (0x14)  ,
				        PCB0   , 1 ,   
				        PCB1   , 1 ,   
				        SCB0   , 1 ,   
				        SCB1   , 1 ,   
				        PCCR   , 2 ,   
				        SCCR   , 2 ,   
				               , 4 ,   
				        PUM0   , 1 ,   
				        PUM1   , 1 ,   
				        SUM0   , 1 ,   
				        SUM1   , 1 ,   
				        PSIG   , 2 ,   
				        SSIG   , 2 ,   
				    }
				  
				    
				    
				    
				    
				    
				    
				    
				
				    Method(GPIO,4)
				    {
				  
				        If (LEqual (Or (Arg0, Arg1) , 0) ) {
				            
				            
				            
				            Return (0xFFFFFFFF)
				        
				        } Else {
				          If (And ( LEqual (Arg0, 0) , LEqual (Arg1, 1) ) ) {
				            
				            
				            
				            Return (900)        
				          }
				        }
				      
				        
				        
				        
				        Return (Multiply(30,Subtract(9,Add(Arg2,Arg3))))      
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    Method(GDMA,5)
				    {
				        
				        
				        
				        If (LEqual (Arg0, 1)) {
				            
				            
				            
				            If (LEqual (Arg1, 1)) {
				                
				                
				                
				                If (LEqual (Arg4, 2)) {
				                  Return (15)
				                }   
				                Return (20)
				        
				            } 
				            If (LEqual (Arg2, 1)) {
				                
				                
				                
				                Return (Multiply(15,Subtract(4,Arg4)))              
				            }
				            
				            
				            
				            Return (Multiply(30,Subtract(4,Arg4)))          
				        }   
				        
				    
				        Return (0xFFFFFFFE)
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    Method(SFLG, 5)
				    {
				        
				        
				        
				        Store (0, Local0)
				        Or (Arg1 ,Local0,Local0)
				        Or (ShiftLeft (Arg0,1) ,Local0, Local0)
				        Or (ShiftLeft (Arg2,3) ,Local0, Local0)
				        Or (ShiftLeft (Arg3,2) ,Local0, Local0)        
				        Or (ShiftLeft (Arg4,4) ,Local0, Local0)
				        Return (Local0)
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				  
				    Method(SPIO , 3)
				    {
				        Name(PBUF, Buffer(5) { 0x00,0x00,0x00,0x00,0x00})
				        CreateByteField(PBUF, 0,  RCT)
				        CreateByteField(PBUF, 1,  ISP)
				        CreateByteField(PBUF, 2,  FAST) 
				        CreateByteField(PBUF, 3,  DMAE)  
				        CreateByteField(PBUF, 4,  PIOT) 
				        If (LOr (LEqual (Arg0, 0x0), LEqual (Arg0, 0x0FFFFFFFF)) ) {
				        
				            Return (PBUF)
				        }
				        If (LGreater (Arg0, 240)) {
				            
				            
				            
				            Store (1, DMAE)   
				            Store (0, PIOT)   
				      
				        } Else {
				            
				            
				            
				            Store (1, FAST)   
				       
				            If (And (Arg1, 0x002)) {
				            
				            
				            
				                If (And (LEqual (Arg0, 120), And( Arg2 , 0x002) ) ) {
				                    
				                    
				                    
				                    Store (3, RCT)   
				                    Store (2, ISP)   
				                    Store (4, PIOT)  
				                } Else {
				                  If (And (LLessEqual (Arg0, 180), And( Arg2 , 0x001) ) ) {
				                    
				                    
				                    
				                    Store (1, RCT)   
				                    Store (2, ISP)   
				                    Store (3, PIOT)  
				                  } Else {
				                    
				                    
				                    
				                    Store (0, RCT)   
				                    Store (1, ISP)   
				                    Store (2, PIOT)  
				                  }
				                }
				            }
				        }
				        Return (PBUF)    
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				  
				    Method(SDMA , 3)
				    {
				        Name(PBUF, Buffer(5) { 0x00,0x00,0x00,0x00})
				        CreateByteField(PBUF, 0,  PCT)
				        CreateByteField(PBUF, 1,  PCB)
				        CreateByteField(PBUF, 2,  UDMT)     
				        CreateByteField(PBUF, 3,  UDME)     
				        CreateByteField(PBUF, 4,  DMAT) 
				        If (LOr (LEqual (Arg0, 0x0), LEqual (Arg0, 0x0FFFFFFFF)) ) {
				        
				            Return (PBUF)
				        }
				        If (LLessEqual (Arg0, 120)) {
				            
				            
				            
				            If (And (Arg1, 0x004)) {
				                
				                
				                
				                Store (1, UDME)   
				                If (And (LEqual (Arg0, 15), And( Arg2 , 0x0040) ) ) {
				                    
				                    
				                    
				                    Store (1, UDMT)
				                    Store (1, PCB)
				                    Store (2, PCT)
				                    Store (6, DMAT)  
				                } Else {      
				                If (And (LEqual (Arg0, 20), And( Arg2 , 0x0020) ) ) {
				                    
				                    
				                    
				                    Store (1, UDMT)
				                    Store (1, PCB)
				                    Store (1, PCT)
				                    Store (5, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 30), And( Arg2 , 0x00010) ) ) {
				                    
				                    
				                    
				                    Store (1, PCB) 
				                    Store (2, PCT)
				                    Store (4, DMAT)  
				          
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 45), And( Arg2 , 0x0008) ) ) {
				                    
				                    
				                    
				                    Store (1, PCB)
				                    Store (1, PCT)
				                    Store (3, DMAT)  
				          
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 60), And( Arg2 , 0x0004) ) ) {
				                    
				                    
				                    
				                    Store (2, PCT)
				                    Store (2, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 90), And( Arg2 , 0x0002) ) ) {
				                    
				                    
				                    
				                    Store (1, PCT)   
				                    Store (1, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 120), And( Arg2 , 0x0001) ) ) {
				                    
				                    
				                    
				                    Store (0, DMAT)  
				                }         
				                }}}}}}
				            }
				        }
				        Return (PBUF)    
				    }
				  
				
				    
				    
				    
				    Device(PRID)
				    {
				        Name(_ADR,0)
				        Name(TDM0, 0)          
				        Name(TPI0, 0)          
				        Name(TDM1, 0)          
				        Name(TPI1, 0)          
				        
				        Method(_GTM)
				        {
				            Name(PBUF, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				
				            CreateDwordField(PBUF, 0,  PIO0)
				            CreateDwordField(PBUF, 4,  DMA0)
				            CreateDwordField(PBUF, 8,  PIO1)
				            CreateDwordField(PBUF, 12, DMA1)
				            CreateDwordField(PBUF, 16, FLAG)    
				      
				            Store ( GPIO (PFT0, PDE0, PRT0, PIP0 ), PIO0)      
				            
				            
				            
				            
				            
				            
				            If ( And (PSIT, 1) ) {
				               Store ( GPIO (PFT1, PDE1, PRT1, PIP1 ), PIO1)
				            } Else {                
				               Store ( GPIO (PFT1, PDE1, PRT0, PIP0 ), PIO1)
				            }
				            
				            If (LEqual (PIO0, 0xFFFFFFFF)) {
				                Store(PIO0, DMA0)
				            } Else {
				                Store ( GDMA(UDM0, PUM0, PCB0,And (PCCR ,0x1), PCT0) , DMA0)
				                If ( LGreater ( DMA0, PIO0)) {
				                    Store(PIO0, DMA0)        
				                }       
				            }
				            If (LEqual (PIO1, 0xFFFFFFFF)) {
				                Store(PIO1, DMA1)   
				            } Else {
				                Store ( GDMA(UDM1, PUM1, PCB1,And (PCCR ,0x2), PCT1) , DMA1)
				                If ( LGreater ( DMA1, PIO1)) {
				                    Store(PIO1, DMA1)
				                }
				            }
				            Store (SFLG (PIE0, UDM0, PIE1, UDM1, 1), FLAG)       
				                                  
				            Return (PBUF)
				        }
				        
				        Method(_STM,3)
				        {
				            CreateDwordField(Arg0, 0,  PIO0)
				            CreateDwordField(Arg0, 4,  DMA0)
				            CreateDwordField(Arg0, 8,  PIO1)
				            CreateDwordField(Arg0, 12, DMA1)
				            CreateDwordField(Arg0, 16, FLAG)   
				                                   
				            
				            
				            
				            CreateWordField(Arg1, 106, RPS0)    
				            CreateWordField(Arg1, 128, IOM0)    
				            CreateWordField(Arg1, 176, DMM0)    
				      
				            
				            
				            
				            CreateWordField(Arg2, 106, RPS1)    
				            CreateWordField(Arg2, 128, IOM1)    
				            CreateWordField(Arg2, 176, DMM1)    
				      
				            Name(IOTM, Buffer(5) { 0x00,0x00,0x00,0x00})
				      
				            CreateByteField(IOTM, 0,  RCT)
				            CreateByteField(IOTM, 1,  ISP)
				            CreateByteField(IOTM, 2,  FAST) 
				            CreateByteField(IOTM, 3,  DMAE)
				            CreateByteField(IOTM, 4,  TPIO)     
				      
				            Name(DMAT, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(DMAT, 0,  PCT)
				            CreateByteField(DMAT, 1,  PCB)
				            CreateByteField(DMAT, 2,  UDMT)     
				            CreateByteField(DMAT, 3,  UDME)     
				            CreateByteField(DMAT, 4,  TDMA)     
				      
				            If (And (FLAG , 0x10)) {
				                Store (1, PSIT)
				            }
				            
				            Store (SPIO (PIO0,RPS0,IOM0), IOTM)
				            
				            If (Or (DMAE, FAST)) {
				                Store (RCT, PRT0)
				                Store (ISP, PIP0)
				                Store (FAST, PFT0)
				                Store (DMAE, PDE0)
				                Store (TPIO, TPI0)
				            }
				            Store (SPIO (PIO1,RPS1,IOM1), IOTM)
				                
				            If (Or (DMAE, FAST)) {
				                Store (FAST, PFT1)
				                Store (DMAE, PDE1)
				                Store (TPIO, TPI1)
				                If (And (PSIT,1)) {
				                    
				                    
				                    
				                    Store (RCT, PRT1)
				                    Store (ISP, PIP1)         
				                } Else {
				                    Store (RCT, PRT0)
				                    Store (ISP, PIP0)
				                }
				            }
				            If (And (FLAG , 0x01)) {
				                Store (SDMA (DMA0,RPS0,DMM0), DMAT)
				                Store (PCT , PCT0)
				                Store (PCB , PCB0)
				                Store (UDME, UDM0)
				                Store (UDMT, PUM0)
				                Store (TDMA, TDM0)
				            } Else {
				                Store (0, UDM0)
				            }
				      
				            If (And (FLAG , 0x04)) {
				                Store (SDMA (DMA1,RPS1,DMM1), DMAT)
				                Store (PCT , PCT1)
				                Store (PCB , PCB1)
				                Store (UDME, UDM1)
				                Store (UDMT, PUM1)
				                Store (TDMA, TDM1)
				            } Else {
				                Store (0, UDM1)
				            }      
				            
				            
				            
				            If (And (FLAG , 0x2)) { 
				                Store (1 , PIE0)
				            }
				            If (And (FLAG , 0x8)) { 
				                Store (1 , PIE1)
				            }
				                
				        }
				        Device(MAST)
				        {
				            Name(_ADR,0)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA0, Buffer(14)
				                    { 0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF,
				                      0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF })
				        
				                CreateByteField(ATA0,1,PIO0)  
				                CreateByteField(ATA0,8,DMA0)  
				        
				        
				                Store (TPI0, PIO0)            
				        
				                Or (PIO0, 0x08 ,PIO0)
				        
				                If ( And (UDM0, 1)) {
				                    Store (TDM0, DMA0)          
				                    Or (DMA0, 0x40, DMA0)
				                } Else {
				                    Store (TPI0, DMA0)          
				                    If ( LNotEqual (DMA0, 0)) {
				                        Subtract(DMA0, 2, DMA0)
				                    }
				                    Or (DMA0, 0x20, DMA0)
				                }
				                Return (ATA0)
				            }   
				        }
				        Device(SLAV)
				        {
				            Name(_ADR,1)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA1, Buffer(14)
				                    { 0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF,
				                      0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF })
				       
				                CreateByteField(ATA1,1,PIO1)  
				                CreateByteField(ATA1,8,DMA1)  
				                
				                Store (TPI1, PIO1)            
				        
				                Or (PIO1, 0x08 ,PIO1)
				        
				                If ( And (UDM1, 1)) {
				                    Store (TDM1, DMA1)          
				                    Or (DMA1, 0x40, DMA1)
				                } Else {
				                    Store (TPI1, DMA1)          
				                    If ( LNotEqual (DMA1, 0)) {
				                        Subtract(DMA1, 2, DMA1)
				                    }
				                    Or (DMA1, 0x20, DMA1)
				                }
				                Return(ATA1)
				            }   
				        }
				    }
				    
				    
				    
				    Device(SECD)
				    {
				        Name(_ADR,1)
				        Name(TDM0, 0)
				        Name(TPI0, 0)
				        Name(TDM1, 0)
				        Name(TPI1, 0)
				        
				        Name(DMT1, Buffer(5) { 0x00,0x00,0x00,0x00})
				        Name(DMT2, Buffer(5) { 0x00,0x00,0x00,0x00})
				        Name(POT1, Buffer(5) { 0x00,0x00,0x00,0x00})        
				        Name(POT2, Buffer(5) { 0x00,0x00,0x00,0x00})
				        
				        Name(STMI, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				     
				        Method(_GTM)
				        {
				            Name(PBUF, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				
				            CreateDwordField(PBUF, 0,  PIO0)
				            CreateDwordField(PBUF, 4,  DMA0)
				            CreateDwordField(PBUF, 8,  PIO1)
				            CreateDwordField(PBUF, 12, DMA1)
				            CreateDwordField(PBUF, 16, FLAG)
				  
				            Store ( GPIO (SFT0, SDE0, SRT0, SIP0 ), PIO0)  
				            
				            
				            
				            
				            
				            If ( And (SSIT, 1) ) {
				                 Store ( GPIO (SFT1, SDE1, SRT1, SIP1 ), PIO1)
				            } Else {                
				                 Store ( GPIO (SFT1, SDE1, SRT0, SIP0 ), PIO1)
				            }
				            
				            If (LEqual (PIO0, 0xFFFFFFFF)) {
				                Store(PIO0, DMA0)
				            } Else {
				                Store ( GDMA(UDM2, SUM0, SCB0,And (SCCR ,0x1), SCT0) , DMA0)
				                If ( LGreater ( DMA0, PIO0)) {
				                    Store(PIO0, DMA0)
				                }
				            }
				      
				            If (LEqual (PIO1, 0xFFFFFFFF)) {
				                Store(PIO1, DMA1)   
				            } Else {
				                Store ( GDMA(UDM3, SUM1, SCB1,And (SCCR ,0x2), SCT1) , DMA1)
				                If ( LGreater ( DMA1, PIO1)) {
				                    Store(PIO1, DMA1)
				                }
				            }
				      
				            Store (SFLG (SIE0, UDM2, SIE1, UDM3, 1), FLAG)
				                        
				            Return (PBUF)
				        }
				        Method(_STM,3)
				        {
				            CreateDwordField(Arg0, 0,  PIO0)
				            CreateDwordField(Arg0, 4,  DMA0)
				            CreateDwordField(Arg0, 8,  PIO1)
				            CreateDwordField(Arg0, 12, DMA1)
				            CreateDwordField(Arg0, 16, FLAG)
				                        
				            Store (Arg0, STMI)
				            
				            
				            
				            CreateWordField(Arg1, 106, RPS0)    
				            CreateWordField(Arg1, 128, IOM0)    
				            CreateWordField(Arg1, 176, DMM0)    
				      
				            
				            
				            
				            CreateWordField(Arg2, 106, RPS1)    
				            CreateWordField(Arg2, 128, IOM1)    
				            CreateWordField(Arg2, 176, DMM1)    
				      
				            Name(IOTM, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(IOTM, 0,  RCT)
				            CreateByteField(IOTM, 1,  ISP)
				            CreateByteField(IOTM, 2,  FAST) 
				            CreateByteField(IOTM, 3,  DMAE)
				            CreateByteField(IOTM, 4,  TPIO)     
				
				            Name(DMAT, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(DMAT, 0,  PCT)
				            CreateByteField(DMAT, 1,  PCB)
				            CreateByteField(DMAT, 2,  UDMT)     
				            CreateByteField(DMAT, 3,  UDME)     
				            CreateByteField(DMAT, 4,  TDMA)     
				
				            If (And (FLAG , 0x10)) {
				                Store (1, SSIT)
				            }
				                                    
				            
				            
				            
				            Store (SPIO (PIO0,RPS0,IOM0), IOTM)
				            
				            
				            
				            If (Or (DMAE, FAST)) {
				                Store (RCT, SRT0)
				                Store (ISP, SIP0)
				                Store (FAST, SFT0)
				                Store (DMAE, SDE0)
				                Store (TPIO, TPI0)
				            }             
				            
				            Store (SPIO (PIO1,RPS1,IOM1), IOTM)
				            
				            Store (IOTM,POT2)
				            
				            If (Or (DMAE, FAST)) {
				                Store (FAST, SFT1)
				                Store (DMAE, SDE1)
				                Store (TPIO, TPI1)
				                If (And (SSIT,1)) {
				                    
				                    
				                    
				                    Store (RCT, SRT1)
				                    Store (ISP, SIP1)
				                } Else {
				                    Store (RCT, SRT0)
				                    Store (ISP, SIP0)
				                } 
				            }
				            
				            If (And (FLAG , 0x01)) {
				                Store (SDMA (DMA0,RPS0,DMM0), DMAT)
				                Store (PCT , SCT0)
				                Store (PCB , SCB0)
				                Store (UDME , UDM2)
				                Store (UDMT , SUM0)
				                Store (TDMA, TDM0)
				            } Else {
				                Store (0, UDM2)
				            }
				            If (And (FLAG , 0x04)) {
				                Store (SDMA (DMA1,RPS1,DMM1), DMAT)
				                Store (PCT , SCT1)
				                Store (PCB , SCB1)
				                Store (UDME , UDM3)
				                Store (UDMT , SUM1)
				                Store (TDMA , TDM1)
				            } Else {
				                Store (0, UDM3)
				            }
				            
				            
				            
				            If (And (FLAG , 0x2)) { 
				                Store (1 , SIE0)
				            }
				            If (And (FLAG , 0x8)) { 
				                Store (1 , SIE1)
				            }
				                    
				        }
				        Device(MAST)
				        {
				            Name(_ADR,0)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA0, Buffer(14)
				                { 0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF,
				                  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF })
				       
				                CreateByteField(ATA0,1,PIO0)  
				                CreateByteField(ATA0,8,DMA0)  
				        
				                Store (TPI0, PIO0)            
				        
				                Or (PIO0, 0x08 ,PIO0)
				        
				                If ( And (UDM2, 1)) {
				                    Store (TDM0, DMA0)          
				                    Or (DMA0, 0x40, DMA0)
				                } Else {
				                    Store (TPI0, DMA0)          
				                    If ( LNotEqual (DMA0, 0)) {
				                        Subtract(DMA0, 2, DMA0)
				                    }
				                    Or (DMA0, 0x20, DMA0)
				                }
				                Return (ATA0)
				            }   
				        }
				        Device(SLAV)
				        {
				            Name(_ADR,1)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA1, Buffer(14)
				                { 0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF,
				                  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF })
				        
				                CreateByteField(ATA1,1,PIO1)  
				                CreateByteField(ATA1,8,DMA1)  
				        
				                Store (TPI1, PIO1)            
				        
				                Or (PIO1, 0x08 ,PIO1)
				        
				                If ( And (UDM3, 1)) {
				                    Store (TDM1, DMA1)          
				                    Or (DMA1, 0x40, DMA1)
				                } Else {
				                    Store (TPI1, DMA1)          
				                    If ( LNotEqual (DMA1, 0)) {
				                        Subtract(DMA1, 2, DMA1)
				                    }
				                    Or (DMA1, 0x20, DMA1)
				                }
				                Return(ATA1)
				            }
				        }
				    }

	
			} 
	
			Device(SAT2) { 
				Name(_ADR, 0x001F0005)
	
	
	
	
				





				


















				
				    OperationRegion (IDER,PCI_Config,0x40,0x20)
				    Field (IDER, AnyAcc, NoLock, Preserve) 
				    {
				        PFT0   , 1 ,    
				        PIE0   , 1 ,    
				        PPE0   , 1 ,    
				        PDE0   , 1 ,    
				        PFT1   , 1 ,    
				        PIE1   , 1 ,    
				        PPE1   , 1 ,    
				        PDE1   , 1 ,    
				        PRT0   , 2 ,    
				               , 2 ,    
				        PIP0   , 2 ,    
				        PSIT   , 1 ,    
				        PIDE   , 1 ,    
				        offset (0x2) ,
				        SFT0   , 1 ,    
				        SIE0   , 1 ,    
				        SPE0   , 1 ,    
				        SDE0   , 1 ,    
				        SFT1   , 1 ,    
				        SIE1   , 1 ,    
				        SPE1   , 1 ,    
				        SDE1   , 1 ,    
				        SRT0   , 2 ,    
				               , 2 ,    
				        SIP0   , 2 ,    
				        SSIT   , 1 ,    
				        SIDE   , 1 ,    
				    
				        PRT1   , 2 ,    
				        PIP1   , 2 ,    
				        SRT1   , 2 ,    
				        SIP1   , 2 ,    
				    
				        offset (0x08)  ,  
				    
				        UDM0   , 1 ,    
				        UDM1   , 1 ,    
				        UDM2   , 1 ,    
				        UDM3   , 1 ,    
				    
				        offset (0x0A)  ,
				    
				        PCT0   , 2 ,   
				               , 2 ,   
				        PCT1   , 2 ,   
				               , 2 ,   
				        SCT0   , 2 ,   
				               , 2 ,   
				        SCT1   , 2 ,   
				    
				        offset (0x14)  ,
				        PCB0   , 1 ,   
				        PCB1   , 1 ,   
				        SCB0   , 1 ,   
				        SCB1   , 1 ,   
				        PCCR   , 2 ,   
				        SCCR   , 2 ,   
				               , 4 ,   
				        PUM0   , 1 ,   
				        PUM1   , 1 ,   
				        SUM0   , 1 ,   
				        SUM1   , 1 ,   
				        PSIG   , 2 ,   
				        SSIG   , 2 ,   
				    }
				  
				    
				    
				    
				    
				    
				    
				    
				
				    Method(GPIO,4)
				    {
				  
				        If (LEqual (Or (Arg0, Arg1) , 0) ) {
				            
				            
				            
				            Return (0xFFFFFFFF)
				        
				        } Else {
				          If (And ( LEqual (Arg0, 0) , LEqual (Arg1, 1) ) ) {
				            
				            
				            
				            Return (900)        
				          }
				        }
				      
				        
				        
				        
				        Return (Multiply(30,Subtract(9,Add(Arg2,Arg3))))      
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    Method(GDMA,5)
				    {
				        
				        
				        
				        If (LEqual (Arg0, 1)) {
				            
				            
				            
				            If (LEqual (Arg1, 1)) {
				                
				                
				                
				                If (LEqual (Arg4, 2)) {
				                  Return (15)
				                }   
				                Return (20)
				        
				            } 
				            If (LEqual (Arg2, 1)) {
				                
				                
				                
				                Return (Multiply(15,Subtract(4,Arg4)))              
				            }
				            
				            
				            
				            Return (Multiply(30,Subtract(4,Arg4)))          
				        }   
				        
				    
				        Return (0xFFFFFFFE)
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    Method(SFLG, 5)
				    {
				        
				        
				        
				        Store (0, Local0)
				        Or (Arg1 ,Local0,Local0)
				        Or (ShiftLeft (Arg0,1) ,Local0, Local0)
				        Or (ShiftLeft (Arg2,3) ,Local0, Local0)
				        Or (ShiftLeft (Arg3,2) ,Local0, Local0)        
				        Or (ShiftLeft (Arg4,4) ,Local0, Local0)
				        Return (Local0)
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				  
				    Method(SPIO , 3)
				    {
				        Name(PBUF, Buffer(5) { 0x00,0x00,0x00,0x00,0x00})
				        CreateByteField(PBUF, 0,  RCT)
				        CreateByteField(PBUF, 1,  ISP)
				        CreateByteField(PBUF, 2,  FAST) 
				        CreateByteField(PBUF, 3,  DMAE)  
				        CreateByteField(PBUF, 4,  PIOT) 
				        If (LOr (LEqual (Arg0, 0x0), LEqual (Arg0, 0x0FFFFFFFF)) ) {
				        
				            Return (PBUF)
				        }
				        If (LGreater (Arg0, 240)) {
				            
				            
				            
				            Store (1, DMAE)   
				            Store (0, PIOT)   
				      
				        } Else {
				            
				            
				            
				            Store (1, FAST)   
				       
				            If (And (Arg1, 0x002)) {
				            
				            
				            
				                If (And (LEqual (Arg0, 120), And( Arg2 , 0x002) ) ) {
				                    
				                    
				                    
				                    Store (3, RCT)   
				                    Store (2, ISP)   
				                    Store (4, PIOT)  
				                } Else {
				                  If (And (LLessEqual (Arg0, 180), And( Arg2 , 0x001) ) ) {
				                    
				                    
				                    
				                    Store (1, RCT)   
				                    Store (2, ISP)   
				                    Store (3, PIOT)  
				                  } Else {
				                    
				                    
				                    
				                    Store (0, RCT)   
				                    Store (1, ISP)   
				                    Store (2, PIOT)  
				                  }
				                }
				            }
				        }
				        Return (PBUF)    
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				  
				    Method(SDMA , 3)
				    {
				        Name(PBUF, Buffer(5) { 0x00,0x00,0x00,0x00})
				        CreateByteField(PBUF, 0,  PCT)
				        CreateByteField(PBUF, 1,  PCB)
				        CreateByteField(PBUF, 2,  UDMT)     
				        CreateByteField(PBUF, 3,  UDME)     
				        CreateByteField(PBUF, 4,  DMAT) 
				        If (LOr (LEqual (Arg0, 0x0), LEqual (Arg0, 0x0FFFFFFFF)) ) {
				        
				            Return (PBUF)
				        }
				        If (LLessEqual (Arg0, 120)) {
				            
				            
				            
				            If (And (Arg1, 0x004)) {
				                
				                
				                
				                Store (1, UDME)   
				                If (And (LEqual (Arg0, 15), And( Arg2 , 0x0040) ) ) {
				                    
				                    
				                    
				                    Store (1, UDMT)
				                    Store (1, PCB)
				                    Store (2, PCT)
				                    Store (6, DMAT)  
				                } Else {      
				                If (And (LEqual (Arg0, 20), And( Arg2 , 0x0020) ) ) {
				                    
				                    
				                    
				                    Store (1, UDMT)
				                    Store (1, PCB)
				                    Store (1, PCT)
				                    Store (5, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 30), And( Arg2 , 0x00010) ) ) {
				                    
				                    
				                    
				                    Store (1, PCB) 
				                    Store (2, PCT)
				                    Store (4, DMAT)  
				          
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 45), And( Arg2 , 0x0008) ) ) {
				                    
				                    
				                    
				                    Store (1, PCB)
				                    Store (1, PCT)
				                    Store (3, DMAT)  
				          
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 60), And( Arg2 , 0x0004) ) ) {
				                    
				                    
				                    
				                    Store (2, PCT)
				                    Store (2, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 90), And( Arg2 , 0x0002) ) ) {
				                    
				                    
				                    
				                    Store (1, PCT)   
				                    Store (1, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 120), And( Arg2 , 0x0001) ) ) {
				                    
				                    
				                    
				                    Store (0, DMAT)  
				                }         
				                }}}}}}
				            }
				        }
				        Return (PBUF)    
				    }
				  
				
				    
				    
				    
				    Device(PRID)
				    {
				        Name(_ADR,0)
				        Name(TDM0, 0)          
				        Name(TPI0, 0)          
				        Name(TDM1, 0)          
				        Name(TPI1, 0)          
				        
				        Method(_GTM)
				        {
				            Name(PBUF, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				
				            CreateDwordField(PBUF, 0,  PIO0)
				            CreateDwordField(PBUF, 4,  DMA0)
				            CreateDwordField(PBUF, 8,  PIO1)
				            CreateDwordField(PBUF, 12, DMA1)
				            CreateDwordField(PBUF, 16, FLAG)    
				      
				            Store ( GPIO (PFT0, PDE0, PRT0, PIP0 ), PIO0)      
				            
				            
				            
				            
				            
				            
				            If ( And (PSIT, 1) ) {
				               Store ( GPIO (PFT1, PDE1, PRT1, PIP1 ), PIO1)
				            } Else {                
				               Store ( GPIO (PFT1, PDE1, PRT0, PIP0 ), PIO1)
				            }
				            
				            If (LEqual (PIO0, 0xFFFFFFFF)) {
				                Store(PIO0, DMA0)
				            } Else {
				                Store ( GDMA(UDM0, PUM0, PCB0,And (PCCR ,0x1), PCT0) , DMA0)
				                If ( LGreater ( DMA0, PIO0)) {
				                    Store(PIO0, DMA0)        
				                }       
				            }
				            If (LEqual (PIO1, 0xFFFFFFFF)) {
				                Store(PIO1, DMA1)   
				            } Else {
				                Store ( GDMA(UDM1, PUM1, PCB1,And (PCCR ,0x2), PCT1) , DMA1)
				                If ( LGreater ( DMA1, PIO1)) {
				                    Store(PIO1, DMA1)
				                }
				            }
				            Store (SFLG (PIE0, UDM0, PIE1, UDM1, 1), FLAG)       
				                                  
				            Return (PBUF)
				        }
				        
				        Method(_STM,3)
				        {
				            CreateDwordField(Arg0, 0,  PIO0)
				            CreateDwordField(Arg0, 4,  DMA0)
				            CreateDwordField(Arg0, 8,  PIO1)
				            CreateDwordField(Arg0, 12, DMA1)
				            CreateDwordField(Arg0, 16, FLAG)   
				                                   
				            
				            
				            
				            CreateWordField(Arg1, 106, RPS0)    
				            CreateWordField(Arg1, 128, IOM0)    
				            CreateWordField(Arg1, 176, DMM0)    
				      
				            
				            
				            
				            CreateWordField(Arg2, 106, RPS1)    
				            CreateWordField(Arg2, 128, IOM1)    
				            CreateWordField(Arg2, 176, DMM1)    
				      
				            Name(IOTM, Buffer(5) { 0x00,0x00,0x00,0x00})
				      
				            CreateByteField(IOTM, 0,  RCT)
				            CreateByteField(IOTM, 1,  ISP)
				            CreateByteField(IOTM, 2,  FAST) 
				            CreateByteField(IOTM, 3,  DMAE)
				            CreateByteField(IOTM, 4,  TPIO)     
				      
				            Name(DMAT, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(DMAT, 0,  PCT)
				            CreateByteField(DMAT, 1,  PCB)
				            CreateByteField(DMAT, 2,  UDMT)     
				            CreateByteField(DMAT, 3,  UDME)     
				            CreateByteField(DMAT, 4,  TDMA)     
				      
				            If (And (FLAG , 0x10)) {
				                Store (1, PSIT)
				            }
				            
				            Store (SPIO (PIO0,RPS0,IOM0), IOTM)
				            
				            If (Or (DMAE, FAST)) {
				                Store (RCT, PRT0)
				                Store (ISP, PIP0)
				                Store (FAST, PFT0)
				                Store (DMAE, PDE0)
				                Store (TPIO, TPI0)
				            }
				            Store (SPIO (PIO1,RPS1,IOM1), IOTM)
				                
				            If (Or (DMAE, FAST)) {
				                Store (FAST, PFT1)
				                Store (DMAE, PDE1)
				                Store (TPIO, TPI1)
				                If (And (PSIT,1)) {
				                    
				                    
				                    
				                    Store (RCT, PRT1)
				                    Store (ISP, PIP1)         
				                } Else {
				                    Store (RCT, PRT0)
				                    Store (ISP, PIP0)
				                }
				            }
				            If (And (FLAG , 0x01)) {
				                Store (SDMA (DMA0,RPS0,DMM0), DMAT)
				                Store (PCT , PCT0)
				                Store (PCB , PCB0)
				                Store (UDME, UDM0)
				                Store (UDMT, PUM0)
				                Store (TDMA, TDM0)
				            } Else {
				                Store (0, UDM0)
				            }
				      
				            If (And (FLAG , 0x04)) {
				                Store (SDMA (DMA1,RPS1,DMM1), DMAT)
				                Store (PCT , PCT1)
				                Store (PCB , PCB1)
				                Store (UDME, UDM1)
				                Store (UDMT, PUM1)
				                Store (TDMA, TDM1)
				            } Else {
				                Store (0, UDM1)
				            }      
				            
				            
				            
				            If (And (FLAG , 0x2)) { 
				                Store (1 , PIE0)
				            }
				            If (And (FLAG , 0x8)) { 
				                Store (1 , PIE1)
				            }
				                
				        }
				        Device(MAST)
				        {
				            Name(_ADR,0)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA0, Buffer(14)
				                    { 0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF,
				                      0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF })
				        
				                CreateByteField(ATA0,1,PIO0)  
				                CreateByteField(ATA0,8,DMA0)  
				        
				        
				                Store (TPI0, PIO0)            
				        
				                Or (PIO0, 0x08 ,PIO0)
				        
				                If ( And (UDM0, 1)) {
				                    Store (TDM0, DMA0)          
				                    Or (DMA0, 0x40, DMA0)
				                } Else {
				                    Store (TPI0, DMA0)          
				                    If ( LNotEqual (DMA0, 0)) {
				                        Subtract(DMA0, 2, DMA0)
				                    }
				                    Or (DMA0, 0x20, DMA0)
				                }
				                Return (ATA0)
				            }   
				        }
				        Device(SLAV)
				        {
				            Name(_ADR,1)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA1, Buffer(14)
				                    { 0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF,
				                      0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF })
				       
				                CreateByteField(ATA1,1,PIO1)  
				                CreateByteField(ATA1,8,DMA1)  
				                
				                Store (TPI1, PIO1)            
				        
				                Or (PIO1, 0x08 ,PIO1)
				        
				                If ( And (UDM1, 1)) {
				                    Store (TDM1, DMA1)          
				                    Or (DMA1, 0x40, DMA1)
				                } Else {
				                    Store (TPI1, DMA1)          
				                    If ( LNotEqual (DMA1, 0)) {
				                        Subtract(DMA1, 2, DMA1)
				                    }
				                    Or (DMA1, 0x20, DMA1)
				                }
				                Return(ATA1)
				            }   
				        }
				    }
				    
				    
				    
				    Device(SECD)
				    {
				        Name(_ADR,1)
				        Name(TDM0, 0)
				        Name(TPI0, 0)
				        Name(TDM1, 0)
				        Name(TPI1, 0)
				        
				        Name(DMT1, Buffer(5) { 0x00,0x00,0x00,0x00})
				        Name(DMT2, Buffer(5) { 0x00,0x00,0x00,0x00})
				        Name(POT1, Buffer(5) { 0x00,0x00,0x00,0x00})        
				        Name(POT2, Buffer(5) { 0x00,0x00,0x00,0x00})
				        
				        Name(STMI, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				     
				        Method(_GTM)
				        {
				            Name(PBUF, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				
				            CreateDwordField(PBUF, 0,  PIO0)
				            CreateDwordField(PBUF, 4,  DMA0)
				            CreateDwordField(PBUF, 8,  PIO1)
				            CreateDwordField(PBUF, 12, DMA1)
				            CreateDwordField(PBUF, 16, FLAG)
				  
				            Store ( GPIO (SFT0, SDE0, SRT0, SIP0 ), PIO0)  
				            
				            
				            
				            
				            
				            If ( And (SSIT, 1) ) {
				                 Store ( GPIO (SFT1, SDE1, SRT1, SIP1 ), PIO1)
				            } Else {                
				                 Store ( GPIO (SFT1, SDE1, SRT0, SIP0 ), PIO1)
				            }
				            
				            If (LEqual (PIO0, 0xFFFFFFFF)) {
				                Store(PIO0, DMA0)
				            } Else {
				                Store ( GDMA(UDM2, SUM0, SCB0,And (SCCR ,0x1), SCT0) , DMA0)
				                If ( LGreater ( DMA0, PIO0)) {
				                    Store(PIO0, DMA0)
				                }
				            }
				      
				            If (LEqual (PIO1, 0xFFFFFFFF)) {
				                Store(PIO1, DMA1)   
				            } Else {
				                Store ( GDMA(UDM3, SUM1, SCB1,And (SCCR ,0x2), SCT1) , DMA1)
				                If ( LGreater ( DMA1, PIO1)) {
				                    Store(PIO1, DMA1)
				                }
				            }
				      
				            Store (SFLG (SIE0, UDM2, SIE1, UDM3, 1), FLAG)
				                        
				            Return (PBUF)
				        }
				        Method(_STM,3)
				        {
				            CreateDwordField(Arg0, 0,  PIO0)
				            CreateDwordField(Arg0, 4,  DMA0)
				            CreateDwordField(Arg0, 8,  PIO1)
				            CreateDwordField(Arg0, 12, DMA1)
				            CreateDwordField(Arg0, 16, FLAG)
				                        
				            Store (Arg0, STMI)
				            
				            
				            
				            CreateWordField(Arg1, 106, RPS0)    
				            CreateWordField(Arg1, 128, IOM0)    
				            CreateWordField(Arg1, 176, DMM0)    
				      
				            
				            
				            
				            CreateWordField(Arg2, 106, RPS1)    
				            CreateWordField(Arg2, 128, IOM1)    
				            CreateWordField(Arg2, 176, DMM1)    
				      
				            Name(IOTM, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(IOTM, 0,  RCT)
				            CreateByteField(IOTM, 1,  ISP)
				            CreateByteField(IOTM, 2,  FAST) 
				            CreateByteField(IOTM, 3,  DMAE)
				            CreateByteField(IOTM, 4,  TPIO)     
				
				            Name(DMAT, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(DMAT, 0,  PCT)
				            CreateByteField(DMAT, 1,  PCB)
				            CreateByteField(DMAT, 2,  UDMT)     
				            CreateByteField(DMAT, 3,  UDME)     
				            CreateByteField(DMAT, 4,  TDMA)     
				
				            If (And (FLAG , 0x10)) {
				                Store (1, SSIT)
				            }
				                                    
				            
				            
				            
				            Store (SPIO (PIO0,RPS0,IOM0), IOTM)
				            
				            
				            
				            If (Or (DMAE, FAST)) {
				                Store (RCT, SRT0)
				                Store (ISP, SIP0)
				                Store (FAST, SFT0)
				                Store (DMAE, SDE0)
				                Store (TPIO, TPI0)
				            }             
				            
				            Store (SPIO (PIO1,RPS1,IOM1), IOTM)
				            
				            Store (IOTM,POT2)
				            
				            If (Or (DMAE, FAST)) {
				                Store (FAST, SFT1)
				                Store (DMAE, SDE1)
				                Store (TPIO, TPI1)
				                If (And (SSIT,1)) {
				                    
				                    
				                    
				                    Store (RCT, SRT1)
				                    Store (ISP, SIP1)
				                } Else {
				                    Store (RCT, SRT0)
				                    Store (ISP, SIP0)
				                } 
				            }
				            
				            If (And (FLAG , 0x01)) {
				                Store (SDMA (DMA0,RPS0,DMM0), DMAT)
				                Store (PCT , SCT0)
				                Store (PCB , SCB0)
				                Store (UDME , UDM2)
				                Store (UDMT , SUM0)
				                Store (TDMA, TDM0)
				            } Else {
				                Store (0, UDM2)
				            }
				            If (And (FLAG , 0x04)) {
				                Store (SDMA (DMA1,RPS1,DMM1), DMAT)
				                Store (PCT , SCT1)
				                Store (PCB , SCB1)
				                Store (UDME , UDM3)
				                Store (UDMT , SUM1)
				                Store (TDMA , TDM1)
				            } Else {
				                Store (0, UDM3)
				            }
				            
				            
				            
				            If (And (FLAG , 0x2)) { 
				                Store (1 , SIE0)
				            }
				            If (And (FLAG , 0x8)) { 
				                Store (1 , SIE1)
				            }
				                    
				        }
				        Device(MAST)
				        {
				            Name(_ADR,0)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA0, Buffer(14)
				                { 0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF,
				                  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF })
				       
				                CreateByteField(ATA0,1,PIO0)  
				                CreateByteField(ATA0,8,DMA0)  
				        
				                Store (TPI0, PIO0)            
				        
				                Or (PIO0, 0x08 ,PIO0)
				        
				                If ( And (UDM2, 1)) {
				                    Store (TDM0, DMA0)          
				                    Or (DMA0, 0x40, DMA0)
				                } Else {
				                    Store (TPI0, DMA0)          
				                    If ( LNotEqual (DMA0, 0)) {
				                        Subtract(DMA0, 2, DMA0)
				                    }
				                    Or (DMA0, 0x20, DMA0)
				                }
				                Return (ATA0)
				            }   
				        }
				        Device(SLAV)
				        {
				            Name(_ADR,1)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA1, Buffer(14)
				                { 0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF,
				                  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF })
				        
				                CreateByteField(ATA1,1,PIO1)  
				                CreateByteField(ATA1,8,DMA1)  
				        
				                Store (TPI1, PIO1)            
				        
				                Or (PIO1, 0x08 ,PIO1)
				        
				                If ( And (UDM3, 1)) {
				                    Store (TDM1, DMA1)          
				                    Or (DMA1, 0x40, DMA1)
				                } Else {
				                    Store (TPI1, DMA1)          
				                    If ( LNotEqual (DMA1, 0)) {
				                        Subtract(DMA1, 2, DMA1)
				                    }
				                    Or (DMA1, 0x20, DMA1)
				                }
				                Return(ATA1)
				            }
				        }
				    }

	
			} 
	
			Device(SMBS) { 
				Name(_ADR, 0x001F0003)
			} 
	
			Device(TERM) { 
				Name(_ADR, 0x001F0006)
			} 
	
			Device(XHCI) { 
				Name(_ADR, 0x00140000)
				Method(_PRW, 0) { Return(GPRW(0x0D, 4)) }	
	
	
	
	
				


















				






				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				Name (OPAC, 0)
				Name (XRST, 0)
				Name (XUSB, 0)
				
				OperationRegion (XPRT, PCI_Config, 0x74, 0x6C)
				Field (XPRT, DWordAcc, NoLock, Preserve)
				{
				      , 8,
				  PMEE, 1,   
				      , 6,
				  PMES, 1,   
				  Offset (0x5C),
				  PR2,  32,  
				  PR2M, 32,  
				  PR3,  32,  
				  PR3M, 32   
				}
				
				
				
				
				Method (_PSW, 1) {
				  If (Arg0) {
				    Store (1, PMEE)
				  }
				
				  Else {
				    Store (0,PMEE)
				  }
				}
				
				
				
				
				
				Method (_REG, 2) {
				  
				  
				  
				  If (LEqual (Arg0, 2)) {
				  
				    
				    
				    If (LEqual(Arg1, 1)) {
				      
				      
				      
				      Store (1, OPAC)
				
				    } Else {
				      
				      
				      
				      Store (0, OPAC)
				    }
				  }
				}
				
				
				
				
				Method (_INI, 0) {
				  
				  
				  
				  If (LEqual (OPAC, 1)) {
				    Store (1, PMES)     
				    Store (0, PMEE)     
				  }
				}
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				Method (POSC, 3) {
				
				  Store (0x81, IO80)
				
				  
				  
				  
				  CreateDWordField (Arg2, 0, CDW1)    
				  CreateDWordField (Arg2, 4, CDW2)    
				  CreateDWordField (Arg2, 8, CDW3)    
				
				  
				  
				  
				  
				  If (LAnd (LGreaterEqual (\_SB.OSYS, 9), LLessEqual (\_SB.OSYS, 12))) {
				    
				    
				    
				    
				    If (LLess (Arg0, 2)) {
				      
				      
				      
				      Or (CDW1, 8, CDW1)
				      Store (0x82, IO80)
				    }
				  } Else {
				    
				    
				    
				    If (LNotEqual (Arg0, 1)) {
				      
				      
				      
				      Or (CDW1, 8, CDW1)
				      Store (0x82, IO80)
				    }
				  }
				
				  
				  
				  
				  If (LEqual (XHMD, 0)) {
				    Or (CDW1, 2, CDW1)
				    Store (0x83, IO80)
				  }
				
				  
				  
				  
				  If (LEqual (And (CDW1, 0xE), 0)) {
				    
				    
				    
				    If (LNot (And (CDW1, 1))) {
				      
				      
				      
				      
				      If (And (CDW3, 1)) {
				        
				        
				        
				        ESEL()
				        Store (0x85, IO80)
				
				        
				        
				        
				        
				        
				        
				        Store (0, XHMD)
				      }
				
				      
				      
				      
				      
				      If (And (CDW2, 1)) {
				        
				        
				        
				        XSEL(0)
				        Store (0x84, IO80)
				      } Else {
				        
				        
				        
				        ESEL()
				        Store (0x85, IO80)
				      }
				    }
				  }
				
				  Return(Arg2)
				}
				
				
				
				
				Method (XSEL, 1, Serialized) {
				  
				  
				  
				  
				  If ( LOr (LOr (LEqual (XHMD, 2), LEqual (XHMD, 3)), Arg0) ) {
				    
				    
				    
				    If (LEqual (XHMD, 3)) {
				      
				      
				      
				      Store (1, \_SB.PCI0.LPC0.XSMB)
				    }
				
				    
				    
				    
				    
				    Store (1, XUSB)
				    Store (1, XRST) 
				
				    
				    
				    
				    Store (0, Local0)
				    And (PR3, 0xFFFFFFC0, Local0)
				    Or (Local0, PR3M, PR3)
				    Store (0, Local0)
				    And (PR2, 0xFFFF8000, Local0)
				    Or (Local0, PR2M, PR2)
				  }
				}
				
				
				
				
				Method (ESEL, 0, Serialized) {
				  
				  
				  
				  If (LOr (LEqual (XHMD, 2), LEqual (XHMD, 3))) {
				    
				    
				    
				    And (PR3, 0xFFFFFFC0, PR3)
				    And (PR2, 0xFFFF8000, PR2)
				
				    
				    
				    
				    Store (0, XUSB)
				    Store (0, XRST)
				  }
				}
				
				Method (XWAK, 0, Serialized) {
				  
				  
				  
				  If (LOr (LEqual (XUSB, 1), LEqual (XRST, 1))) {
				    
				    
				    
				    XSEL(1)
				
				    
				    
				    
				    Notify (\_SB.PCI0.XHCI, 0x00)
				  }
				}
				
				
				
				
				
				Method(_S3D, 0, NotSerialized) {
				  Return(2)
				}
				
				Method(_S4D, 0, NotSerialized) {
				  Return(2)
				}
				
				Device(RHUB) {
				  Name(_ADR, 0)
				
				  
				  
				  
				  Device (HS01) {
				    Name (_ADR, 1)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        
				        If (LEqual (\PLAT, 0x1B)) {
				          Store (0, Index (UPCP, 0))
				        }
				        
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LEqual (\PLAT, 0x05)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0xC1, 0x80, 0x00,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      
				      If (LEqual (\PLAT, 0x00)) {
				        Store (One, VISB)
				        Store (0x0C, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS02) {
				    Name (_ADR, 2)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LEqual (\PLAT, 0x05)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        If (LEqual (\PLAT, 0x1B)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x01, 0x01,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (One, VISB)
				        Store (0x0C, PANL)
				      }
				
				      
				      
				      
				      If (LEqual (\PLAT, 0x00)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      If (LEqual (\PLAT, 0x1B)) {
				        Store (One, VISB)
				        Store (0x28, PANL)
				      }
				      
				      Return (PLDP)
				    }
				  }
				
				  Device (HS03) {
				    Name (_ADR, 3)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x03) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x04) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0xC1, 0x81, 0x01,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x2E, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (One, VISB)
				        Store (0x01, PANL)  
				      }
				
				      
				      
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS04) {
				    Name (_ADR, 4)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				          
				          
				          Case (0x00) {
				            Store (0, Index (UPCP, 0))
				          }
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				          
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        
				        
				        
				        
				        
				        If (LEqual (\PLAT, 0x01)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LEqual (\PLAT, 0x05)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				      }
				
				      Return(UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x02, 0x02,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS05) {
				    Name (_ADR, 5)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				
				        
				        If (LEqual (\PLAT, 0x1B)) {
				          Store (0, Index (UPCP, 0))
				        }
				        
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LEqual (\PLAT, 0x05)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (1) {
				          
				          
				          If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0xC1, 0x82, 0x02,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x09), LEqual (\PLAT, 0x13))) {
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (1) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				        }
				      }
				
				      Else {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x05, PANL)
				        }
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS06) {
				    Name (_ADR, 6)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x0A) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x0B) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x07) {
				            If (LNot (1)) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          Case (0x08) {
				            If (LNot (1)) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          
				          
				          Case (0x03) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x04) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x05) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				          
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x03, 0x03,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (1) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x08, PANL)
				        }
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS07) {
				    Name (_ADR, 7)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x00) {
				            If (LNot (1)) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				          
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x07) {
				            If (LNot (1)) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          Case (0x08) {
				            If (LNot (1)) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          
				          
				          Case (0x03) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x04) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x05) {
				            Store (0, Index (UPCP, 0))
				          }
				
				        
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				        
				        
				        
				        
				
				        
				        
				        If (1) {
				          If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0xC1, 0x83, 0x03,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x15, PANL) 
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      If (1) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x08, PANL)
				        }
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS08) {
				    Name (_ADR, 8)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x00) {
				            Store (0, Index (UPCP, 0))
				          }
				
				        
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x04, 0x04,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (0x08, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (0x08, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS09) {
				    Name (_ADR, 9)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x0A) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x0B) {
				            Store (0, Index (UPCP, 0))
				          }
				
				        
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LNot (1)) {
				          
				          
				          If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0xC1, 0x84, 0x04,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (1) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x05, PANL)
				        }
				      }
				
				      Else {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				        }
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS10) {
				    Name (_ADR, 10)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x0A) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x0B) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x07) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          Case (0x08) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				          
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x05, 0x05,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (LNot (1)) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x08, PANL)
				        }
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS11) {
				    Name (_ADR, 11)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x00) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				          
				          Case (0x01) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x07) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          Case (0x08) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				        
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				        
				        
				        
				        
				        
				        If (LNot (1)) {
				          
				          
				          If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0xC1, 0x85, 0x05,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      If (LNot (1)) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				        }
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      If (LNot (1)) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x08, PANL)
				        }
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (0x08, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS12) {
				    Name (_ADR, 12)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				         
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				        
				        
				        
				        
				        
				        
				        
				        If (1) {
				          If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				        
				        
				        
				        If (1) {
				          If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x06, 0x06,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x4C, PANL) 
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (0x08, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (1) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				        }
				      }
				
				      Else {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x08, PANL)
				        }
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS13) {
				    Name (_ADR, 13)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x07) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          Case (0x08) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          
				          
				          Case (0x00) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				          
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				        
				        
				        
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0xC1, 0x86, 0x06,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (0x08, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (0x08, PANL)
				      }
				
				      If (LNot (1)) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (0x08, PANL)
				        }
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (HS14) {
				    Name (_ADR, 14)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x00, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x00) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				          
				          Case (0x01) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				          
				          
				          
				          Case (0x11) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x12) {
				            Store (0, Index (UPCP, 0))
				          }
				
				


















				
				          
				          
				          Case (0x07) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				
				          Case (0x08) {
				            If (1) {
				              Store (0, Index (UPCP, 0))
				            }
				          }
				        }
				      }
				
				      Else {
				        
				        
				        
				        
				        Store (0, Index (UPCP, 0))
				
				        
				        If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				        
				        
				        
				        
				        
				        If (LNot (1)) {
				          
				          
				          If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				        
				        
				        
				        If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LEqual (\PLAT, 0x05)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        
				        
				        If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				
				        If (LNot (1)) {
				          
				          
				          If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				            Store (0xFF, Index (UPCP, 0))
				          }
				        }
				
				        
				        If (LEqual (\PLAT, 0x1B)) {
				          Store (0xFF, Index (UPCP, 0))
				        }
				        
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x07, 0x07,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      If (LNot (1)) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				        }
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x08, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				      }
				
				      If (LNot (1)) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				        }
				      }
				
				      
				      If (LEqual (\PLAT, 0x1B)) {
				        Store (One, VISB)
				        Store (0x20, PANL)
				      }
				     
				
				      Return (PLDP)
				    }
				  }
				
				  
				  
				  
				  Device (SSP1) {
				    Name (_ADR, 16)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x03, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x00) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x00, 0x00,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateField (DeRefOf (Index (PLDP, 0)), 79, 8, GTOK)
				      CreateField (DeRefOf (Index (PLDP, 0)), 87, 8, GPOS)
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (4, GTOK)
				        Store (4, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				        Store (9, GTOK)
				        Store (9, GPOS)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				        Store (9, GTOK)
				        Store (9, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (5, GTOK)
				        Store (5, GPOS)
				      }
				
				      If (1) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				          Store (12, GTOK)
				          Store (12, GPOS)
				        }
				      }
				
				      Else {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				          Store (14, GTOK)
				          Store (14, GPOS)
				        }
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (SSP2) {
				    Name (_ADR, 17)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x03, 0x00, 0x00 })
				
				        
				        Switch (ToInteger (\PLAT)) {
				
				
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        }
				       
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x00, 0x00,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateField (DeRefOf (Index (PLDP, 0)), 79, 8, GTOK)
				      CreateField (DeRefOf (Index (PLDP, 0)), 87, 8, GPOS)
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x15, PANL) 
				        Store (7, GTOK)    
				        Store (7, GPOS)    
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				        Store (14, GTOK)
				        Store (14, GPOS)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				        Store (14, GTOK)
				        Store (14, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      If (1) {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				          Store (5, GTOK)
				          Store (5, GPOS)
				        }
				      }
				
				      Else {
				        
				        
				        If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				          Store (One, VISB)
				          Store (0x04, PANL)
				          Store (9, GTOK)
				          Store (9, GPOS)
				        }
				      }
				
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (SSP3) {
				    Name (_ADR, 18)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x03, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x03) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x04) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x05) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          
				          Case (0x07) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x08) {
				            Store (0, Index (UPCP, 0))
				          }
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x00, 0x00,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateField (DeRefOf (Index (PLDP, 0)), 79, 8, GTOK)
				      CreateField (DeRefOf (Index (PLDP, 0)), 87, 8, GPOS)
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (One, VISB)
				        Store (0x0C, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      
				      
				      
				      
				      If (LEqual (\PLAT, 0x00)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (3, GTOK)
				        Store (3, GPOS)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (3, GTOK)
				        Store (3, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (3, GTOK)
				        Store (3, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (13, GTOK)
				        Store (13, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				        Store (3, GTOK)
				        Store (3, GPOS)
				      }
				
				      
				      If (LEqual (\PLAT, 0x1B)) {
				        Store (One, VISB)
				        Store (0x28, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				     
				      Return (PLDP)
				    }
				  }
				
				  Device (SSP4) {
				    Name (_ADR, 19)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x03, 0x00, 0x00 })
				
				      
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        
				        
				        
				        
				        Switch (ToInteger (\PLAT)) {
				
				          
				          
				          Case (0x03) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x04) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          Case (0x05) {
				            Store (0, Index (UPCP, 0))
				          }
				
				          
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        
				        }
				      }
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x00, 0x00,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateField (DeRefOf (Index (PLDP, 0)), 79, 8, GTOK)
				      CreateField (DeRefOf (Index (PLDP, 0)), 87, 8, GPOS)
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x2E, PANL) 
				        Store (3, GTOK)
				        Store (3, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				        Store (4, GTOK)
				        Store (4, GPOS)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (4, GTOK)
				        Store (4, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (4, GTOK)
				        Store (4, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (14, GTOK)
				        Store (14, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				        Store (4, GTOK)
				        Store (4, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (One, VISB)
				        Store (0x01, PANL)  
				        Store (3, GTOK)
				        Store (3, GPOS)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (SSP5) {
				    Name (_ADR, 20)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x03, 0x00, 0x00 })
				
				      
				      If (LGreaterEqual (\_SB.OSYS, 13)) {
				        Switch (ToInteger (\PLAT)) {
				
				          Case (0x1B) {
				            Store (0, Index (UPCP, 0))
				          }
				        }
				      }
				      
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x00, 0x00,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateField (DeRefOf (Index (PLDP, 0)), 79, 8, GTOK)
				      CreateField (DeRefOf (Index (PLDP, 0)), 87, 8, GPOS)
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      
				      If (LOr (LEqual (\PLAT, 0x00), LEqual (\PLAT, 0x01))) {
				        Store (One, VISB)
				        Store (0x4C, PANL) 
				        Store (12, GTOK)   
				        Store (12, GPOS)   
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				


				        Store (0x20, PANL)
				        Store (9, GTOK)
				        Store (9, GPOS)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				


				        Store (0x20, PANL)
				        Store (9, GTOK)
				        Store (9, GPOS)
				      }
				
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (5, GTOK)
				        Store (5, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				        Store (7, GTOK)
				        Store (7, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				        Store (5, GTOK)
				        Store (5, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      Return (PLDP)
				    }
				  }
				
				  Device (SSP6) {
				    Name (_ADR, 21)
				
				    Method (_STA, 0) {
				      Return (0x0F)
				    }
				
				    Method (_UPC, 0, Serialized) {
				      Name (UPCP, Package() { 0xFF, 0x03, 0x00, 0x00 })
				
				      Return (UPCP)
				    }
				
				    Method (_PLD, 0, Serialized) {
				
				      
				      
				      
				      
				      
				      Name (PLDP, Package(1) {
				        Buffer (0x14) {
				          0x82, 0x00, 0x00, 0x00,   
				          0x00, 0x00, 0x00, 0x00,   
				          0x40, 0x41, 0x00, 0x00,   
				          0x01, 0x00, 0x00, 0x00,   
				          0xFF, 0xFF, 0xFF, 0xFF    
				        }
				      })
				
				      CreateField (DeRefOf (Index (PLDP, 0)), 67, 7, PANL) 
				      CreateField (DeRefOf (Index (PLDP, 0)), 79, 8, GTOK)
				      CreateField (DeRefOf (Index (PLDP, 0)), 87, 8, GPOS)
				      CreateBitField (DeRefOf (Index (PLDP, 0)), 64, VISB)
				
				      
				      
				      
				      
				      If (LEqual (\PLAT, 0x01)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      
				      
				      
				      
				      If (LEqual (\PLAT, 0x00)) {
				        Store (One, VISB)
				        Store (0x0C, PANL)
				        Store (1, GTOK)
				        Store (1, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x03), LEqual (\PLAT, 0x04))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      If (LEqual (\PLAT, 0x05)) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x13), LEqual (\PLAT, 0x16))) {
				        Store (One, VISB)
				


				        Store (0x20, PANL)
				        Store (10, GTOK)
				        Store (10, GPOS)
				      }
				
				      If (LOr (LEqual (\PLAT, 0x14), LEqual (\PLAT, 0x15))) {
				        Store (One, VISB)
				


				        Store (0x20, PANL)
				        Store (10, GTOK)
				        Store (10, GPOS)
				      }
				
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x11), LEqual (\PLAT, 0x12))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (6, GTOK)
				        Store (6, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0A), LEqual (\PLAT, 0x0B))) {
				        Store (One, VISB)
				        Store (0x04, PANL)
				        Store (8, GTOK)
				        Store (8, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x0F), LEqual (\PLAT, 0x10))) {
				        Store (One, VISB)
				        Store (0x03, PANL)
				        Store (6, GTOK)
				        Store (6, GPOS)
				      }
				
				      
				      
				      If (LOr (LEqual (\PLAT, 0x07), LEqual (\PLAT, 0x08))) {
				        Store (One, VISB)
				        Store (0x05, PANL)
				        Store (2, GTOK)
				        Store (2, GPOS)
				      }
				
				      
				      If (LEqual (\PLAT, 0x1B)) {
				        Store (One, VISB)
				        Store (0x28, PANL)
				        Store (14, GTOK)
				        Store (14, GPOS)
				      }
				      
				      Return (PLDP)
				    }
				  }
				}

	
			} 
	
			Device(LAN0) { 
				Name(_ADR, 0x00190000)
			} 
	
			Device(EHC1) { 
				Name(_ADR, 0x001D0000)
				Method(_PRW, 0) { Return(GPRW(0x0D, 4)) }	
	
	
	
	
				


















				





   
				
				Name (OPAC, 0)
				
				OperationRegion(PWKE,PCI_Config,0x54,0x18)
				Field(PWKE,DWordAcc,NoLock,Preserve)
				{
				      , 8,
				  PMEE, 1, 
				      , 6,
				  PMES, 1, 
				  Offset (0x0E),
				      , 1,
				  PWUC, 10 
				}
				
				
				
				
				Method (_REG, 2)
				{
				  
				  
				  If (LEqual (Arg0, 2))
				  {
				    
				    
				    If (LEqual(Arg1, 1))
				    {
				      
				      
				      Store (One, OPAC)
				    }
				    Else
				    {
				      
				      
				      Store (One, OPAC)
				    }
				  }
				}
				
				
				
				
				Method (_PSW,1)
				{
				  If (Arg0)
				  {
				    Store (Ones,PWUC)
				  }
				  Else
				  {
				    Store (0,PWUC)
				  }
				}
				
				
				
				
				Method (_INI, 0)
				{
				  
				  
				  If (LEqual (OPAC, One))
				  {
				    Store (1, PMES)     
				    Store (0, PMEE)     
				  }
				}
				
				
				
				
				
				
				Method(_S3D,0)
				{
				  Return(2)
				}
				
				Method(_S4D,0)
				{
				  Return(2)
				}
				
				
				
				Device(HUBN)
				{
				  Name(_ADR, Zero)
				
				  Device(PR01)
				  {
				    Name(_ADR, One)
				
				    
				    
				    
				    
				    
				    
				    Method(_UPC,0,Serialized) {
				      Name(UPCA, Package() { 0xFF,0x00,0x00,0x00 })
				
				
				
				















				
				
				
				      Return(UPCA)
				    }
				
				    Method(_PLD,0,Serialized) {
				      Name(PLDP, Package() {
				        Buffer (0x10) {
				          0x81, 0x00, 0x00, 0x00,     
				          0x00, 0x00, 0x00, 0x00,
				          0x30, 0x1C, 0x00, 0x00,     
				          0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				
				





				
				
				
				      Return (PLDP)
				    }
				
				    Device(PR11)
				    {
				      Name(_ADR, One)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1C, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				
				    Device(PR12)
				    {
				      Name(_ADR, 0x02)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1D, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				
				    Device(PR13)
				    {
				      Name(_ADR, 0x03)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1D, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				        })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				
				    Device(PR14)
				    {
				      Name(_ADR, 0x04)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				      Alias(SBV1,SDGV) 
				      



























				      





   
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      Method (_DSM, 4, Serialized, 0, UnknownObj, {BuffObj, IntObj, IntObj, PkgObj})
				      {
				      
				        If (LEqual(Arg0, ToUUID ("A5FC708F-8775-4BA6-BD0C-BA90A1EC72F8")))
				        {
				          
				          
				          
				          Switch (ToInteger(Arg2))
				          {
				            
				            
				            
				            
				            Case (0)
				            {
				              if (LEqual(Arg1, 1)){ 
				                Return (Buffer () {0x07})
				              } else {
				                Return (Buffer () {0})
				              }
				            }
				            
				            
				            
				            
				            
				            Case (1)
				            {
				              if (LEqual(SDGV,0xFF)){ 
				                Return (0)
				              } else {
				                Return (1)
				              }
				            }
				            
				            
				            
				            
				            Case (2)
				            {
				              Return (SDGV)
				            }
				          }
				        }
				      
				        Return (0)
				      }
				      
				    }
				
				    Device(PR15)
				    {
				      Name(_ADR, 0x05)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xB1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				      Alias(SBV2,SDGV) 
				      



























				      





   
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      Method (_DSM, 4, Serialized, 0, UnknownObj, {BuffObj, IntObj, IntObj, PkgObj})
				      {
				      
				        If (LEqual(Arg0, ToUUID ("A5FC708F-8775-4BA6-BD0C-BA90A1EC72F8")))
				        {
				          
				          
				          
				          Switch (ToInteger(Arg2))
				          {
				            
				            
				            
				            
				            Case (0)
				            {
				              if (LEqual(Arg1, 1)){ 
				                Return (Buffer () {0x07})
				              } else {
				                Return (Buffer () {0})
				              }
				            }
				            
				            
				            
				            
				            
				            Case (1)
				            {
				              if (LEqual(SDGV,0xFF)){ 
				                Return (0)
				              } else {
				                Return (1)
				              }
				            }
				            
				            
				            
				            
				            Case (2)
				            {
				              Return (SDGV)
				            }
				          }
				        }
				      
				        Return (0)
				      }
				      
				    }
				
				    Device(PR16)
				    {
				      Name(_ADR, 0x06)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xB1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				      Alias(SBV1,SDGV) 
				      



























				      





   
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      Method (_DSM, 4, Serialized, 0, UnknownObj, {BuffObj, IntObj, IntObj, PkgObj})
				      {
				      
				        If (LEqual(Arg0, ToUUID ("A5FC708F-8775-4BA6-BD0C-BA90A1EC72F8")))
				        {
				          
				          
				          
				          Switch (ToInteger(Arg2))
				          {
				            
				            
				            
				            
				            Case (0)
				            {
				              if (LEqual(Arg1, 1)){ 
				                Return (Buffer () {0x07})
				              } else {
				                Return (Buffer () {0})
				              }
				            }
				            
				            
				            
				            
				            
				            Case (1)
				            {
				              if (LEqual(SDGV,0xFF)){ 
				                Return (0)
				              } else {
				                Return (1)
				              }
				            }
				            
				            
				            
				            
				            Case (2)
				            {
				              Return (SDGV)
				            }
				          }
				        }
				      
				        Return (0)
				      }
				      
				    }
				
				    Device(PR17)
				    {
				      Name(_ADR, 0x07)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xB1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				      Alias(SBV2,SDGV) 
				      



























				      





   
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      Method (_DSM, 4, Serialized, 0, UnknownObj, {BuffObj, IntObj, IntObj, PkgObj})
				      {
				      
				        If (LEqual(Arg0, ToUUID ("A5FC708F-8775-4BA6-BD0C-BA90A1EC72F8")))
				        {
				          
				          
				          
				          Switch (ToInteger(Arg2))
				          {
				            
				            
				            
				            
				            Case (0)
				            {
				              if (LEqual(Arg1, 1)){ 
				                Return (Buffer () {0x07})
				              } else {
				                Return (Buffer () {0})
				              }
				            }
				            
				            
				            
				            
				            
				            Case (1)
				            {
				              if (LEqual(SDGV,0xFF)){ 
				                Return (0)
				              } else {
				                Return (1)
				              }
				            }
				            
				            
				            
				            
				            Case (2)
				            {
				              Return (SDGV)
				            }
				          }
				        }
				      
				        Return (0)
				      }
				      
				    }
				
				    Device(PR18)
				    {
				      Name(_ADR, 0x08)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xB1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				  } 
				} 
				
				
				

	
			} 
	
			Device(EHC2) { 
				Name(_ADR, 0x001A0000)
				Method(_PRW, 0) { Return(GPRW(0x0D, 4)) }	
	
	
	
	
				


















				





   
				
				Name (OPAC, 0)
				
				OperationRegion(PWKE,PCI_Config,0x54,0x18)
				Field(PWKE,DWordAcc,NoLock,Preserve)
				{
				      , 8,
				  PMEE, 1, 
				      , 6,
				  PMES, 1, 
				  Offset (0x0E),
				      , 1,
				  PWUC, 10 
				}
				
				
				
				
				Method (_REG, 2)
				{
				  
				  
				  If (LEqual (Arg0, 2))
				  {
				    
				    
				    If (LEqual(Arg1, 1))
				    {
				      
				      
				      Store (One, OPAC)
				    }
				    Else
				    {
				      
				      
				      Store (One, OPAC)
				    }
				  }
				}
				
				
				
				
				Method (_PSW,1)
				{
				  If (Arg0)
				  {
				    Store (Ones,PWUC)
				  }
				  Else
				  {
				    Store (0,PWUC)
				  }
				}
				
				
				
				
				Method (_INI, 0)
				{
				  
				  
				  If (LEqual (OPAC, One))
				  {
				    Store (1, PMES)     
				    Store (0, PMEE)     
				  }
				}
				
				
				
				
				
				
				Method(_S3D,0)
				{
				  Return(2)
				}
				
				Method(_S4D,0)
				{
				  Return(2)
				}
				
				
				
				Device(HUBN)
				{
				  Name(_ADR, Zero)
				
				  Device(PR01)
				  {
				    Name(_ADR, One)
				
				    
				    
				    
				    
				    
				    
				    Method(_UPC,0,Serialized) {
				      Name(UPCA, Package() { 0xFF,0x00,0x00,0x00 })
				
				
				
				














				
				
				
				      Return(UPCA)
				    }
				    Method(_PLD,0,Serialized) {
				      Name(PLDP, Package() {
				        Buffer (0x10) {
				          0x81, 0x00, 0x00, 0x00,     
				          0x00, 0x00, 0x00, 0x00,
				          0x30, 0x1C, 0x00, 0x00,     
				          0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				
				    Device(PR11)
				    {
				      Name(_ADR, One)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1C, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				
				    Device(PR12)
				    {
				      Name(_ADR, 0x02)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1D, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				      Alias(SBV1,SDGV) 
				      



























				      





   
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      Method (_DSM, 4, Serialized, 0, UnknownObj, {BuffObj, IntObj, IntObj, PkgObj})
				      {
				      
				        If (LEqual(Arg0, ToUUID ("A5FC708F-8775-4BA6-BD0C-BA90A1EC72F8")))
				        {
				          
				          
				          
				          Switch (ToInteger(Arg2))
				          {
				            
				            
				            
				            
				            Case (0)
				            {
				              if (LEqual(Arg1, 1)){ 
				                Return (Buffer () {0x07})
				              } else {
				                Return (Buffer () {0})
				              }
				            }
				            
				            
				            
				            
				            
				            Case (1)
				            {
				              if (LEqual(SDGV,0xFF)){ 
				                Return (0)
				              } else {
				                Return (1)
				              }
				            }
				            
				            
				            
				            
				            Case (2)
				            {
				              Return (SDGV)
				            }
				          }
				        }
				      
				        Return (0)
				      }
				      
				    }
				
				    Device(PR13)
				    {
				      Name(_ADR, 0x03)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1D, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				        Return (PLDP)
				      }
				      Alias(SBV2,SDGV) 
				      



























				      





   
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      Method (_DSM, 4, Serialized, 0, UnknownObj, {BuffObj, IntObj, IntObj, PkgObj})
				      {
				      
				        If (LEqual(Arg0, ToUUID ("A5FC708F-8775-4BA6-BD0C-BA90A1EC72F8")))
				        {
				          
				          
				          
				          Switch (ToInteger(Arg2))
				          {
				            
				            
				            
				            
				            Case (0)
				            {
				              if (LEqual(Arg1, 1)){ 
				                Return (Buffer () {0x07})
				              } else {
				                Return (Buffer () {0})
				              }
				            }
				            
				            
				            
				            
				            
				            Case (1)
				            {
				              if (LEqual(SDGV,0xFF)){ 
				                Return (0)
				              } else {
				                Return (1)
				              }
				            }
				            
				            
				            
				            
				            Case (2)
				            {
				              Return (SDGV)
				            }
				          }
				        }
				      
				        Return (0)
				      }
				      
				    }
				
				    Device(PR14)
				    {
				      Name(_ADR, 0x04)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xE1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				
				    Device(PR15)
				    {
				      Name(_ADR, 0x05)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xB1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				
				    Device(PR16)
				    {
				      Name(_ADR, 0x06)
				      Method(_UPC,0,Serialized) {
				        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
				
				
				
				




				
				
				
				        Return(UPCP)
				      }
				      Method(_PLD,0,Serialized) {
				        Name(PLDP, Package() {
				          Buffer (0x10) {
				            0x81, 0x00, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00,
				            0xB1, 0x1E, 0x00, 0x00,     
				            0x00, 0x00, 0x00, 0x00}
				          })
				
				
				
				





				
				
				
				        Return (PLDP)
				      }
				    }
				  } 
				} 
				
				
				

	
			} 
	
			Device(ALZA) { 
				Name(_ADR, 0x001B0000)
			} 
	
			Device(HECI) { 
				Name(_ADR, 0x00160000)
			} 
	
			Device(HEC2) { 
				Name(_ADR, 0x00160001)
	
	
	
	
				





				






















				















































































































































































































				

	
			} 
	
			Device(IDER) { 
				Name(_ADR, 0x00160002)
			} 
	
			Device(MEKT) { 
				Name(_ADR, 0x00160003)
			} 
	
			Device(RP01) { 
				Name(_ADR, 0x001C0000)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RP02) { 
				Name(_ADR, 0x001C0001)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RP03) { 
				Name(_ADR, 0x001C0002)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RP04) { 
				Name(_ADR, 0x001C0003)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG1A) }
					Return (PG1A) 
				} 
	
				Device(BR78) { 
					Name(_ADR, 0x00000000)
					Method(_PRT,0) {
						If(PICM) { Return(AG78) }
						Return (PG78) 
					} 
	
					Device(D079) { 
						Name(_ADR, 0x00000000)
					} 
	
				} 
	
			} 
	
			Device(RP05) { 
				Name(_ADR, 0x001C0004)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG1B) }
					Return (PG1B) 
				} 
	
				Device(LAN1) { 
					Name(_ADR, 0x00000000)
				} 
	
			} 
	
			Device(RP06) { 
				Name(_ADR, 0x001C0005)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RP07) { 
				Name(_ADR, 0x001C0006)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RP08) { 
				Name(_ADR, 0x001C0007)
	
	
	
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(EVMR) { 
				Name(_ADR, 0x00110000)
			} 
	
			Device(EVS0) { 
				Name(_ADR, 0x00110001)
			} 
	
			Device(EVS1) { 
				Name(_ADR, 0x00110002)
			} 
	
			Device(EVS2) { 
				Name(_ADR, 0x00110003)
			} 
	
			Device(EVSS) { 
				Name(_ADR, 0x00110004)
	
	
	
	
				





				


















				
				    OperationRegion (IDER,PCI_Config,0x40,0x20)
				    Field (IDER, AnyAcc, NoLock, Preserve) 
				    {
				        PFT0   , 1 ,    
				        PIE0   , 1 ,    
				        PPE0   , 1 ,    
				        PDE0   , 1 ,    
				        PFT1   , 1 ,    
				        PIE1   , 1 ,    
				        PPE1   , 1 ,    
				        PDE1   , 1 ,    
				        PRT0   , 2 ,    
				               , 2 ,    
				        PIP0   , 2 ,    
				        PSIT   , 1 ,    
				        PIDE   , 1 ,    
				        offset (0x2) ,
				        SFT0   , 1 ,    
				        SIE0   , 1 ,    
				        SPE0   , 1 ,    
				        SDE0   , 1 ,    
				        SFT1   , 1 ,    
				        SIE1   , 1 ,    
				        SPE1   , 1 ,    
				        SDE1   , 1 ,    
				        SRT0   , 2 ,    
				               , 2 ,    
				        SIP0   , 2 ,    
				        SSIT   , 1 ,    
				        SIDE   , 1 ,    
				    
				        PRT1   , 2 ,    
				        PIP1   , 2 ,    
				        SRT1   , 2 ,    
				        SIP1   , 2 ,    
				    
				        offset (0x08)  ,  
				    
				        UDM0   , 1 ,    
				        UDM1   , 1 ,    
				        UDM2   , 1 ,    
				        UDM3   , 1 ,    
				    
				        offset (0x0A)  ,
				    
				        PCT0   , 2 ,   
				               , 2 ,   
				        PCT1   , 2 ,   
				               , 2 ,   
				        SCT0   , 2 ,   
				               , 2 ,   
				        SCT1   , 2 ,   
				    
				        offset (0x14)  ,
				        PCB0   , 1 ,   
				        PCB1   , 1 ,   
				        SCB0   , 1 ,   
				        SCB1   , 1 ,   
				        PCCR   , 2 ,   
				        SCCR   , 2 ,   
				               , 4 ,   
				        PUM0   , 1 ,   
				        PUM1   , 1 ,   
				        SUM0   , 1 ,   
				        SUM1   , 1 ,   
				        PSIG   , 2 ,   
				        SSIG   , 2 ,   
				    }
				  
				    
				    
				    
				    
				    
				    
				    
				
				    Method(GPIO,4)
				    {
				  
				        If (LEqual (Or (Arg0, Arg1) , 0) ) {
				            
				            
				            
				            Return (0xFFFFFFFF)
				        
				        } Else {
				          If (And ( LEqual (Arg0, 0) , LEqual (Arg1, 1) ) ) {
				            
				            
				            
				            Return (900)        
				          }
				        }
				      
				        
				        
				        
				        Return (Multiply(30,Subtract(9,Add(Arg2,Arg3))))      
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    Method(GDMA,5)
				    {
				        
				        
				        
				        If (LEqual (Arg0, 1)) {
				            
				            
				            
				            If (LEqual (Arg1, 1)) {
				                
				                
				                
				                If (LEqual (Arg4, 2)) {
				                  Return (15)
				                }   
				                Return (20)
				        
				            } 
				            If (LEqual (Arg2, 1)) {
				                
				                
				                
				                Return (Multiply(15,Subtract(4,Arg4)))              
				            }
				            
				            
				            
				            Return (Multiply(30,Subtract(4,Arg4)))          
				        }   
				        
				    
				        Return (0xFFFFFFFE)
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    Method(SFLG, 5)
				    {
				        
				        
				        
				        Store (0, Local0)
				        Or (Arg1 ,Local0,Local0)
				        Or (ShiftLeft (Arg0,1) ,Local0, Local0)
				        Or (ShiftLeft (Arg2,3) ,Local0, Local0)
				        Or (ShiftLeft (Arg3,2) ,Local0, Local0)        
				        Or (ShiftLeft (Arg4,4) ,Local0, Local0)
				        Return (Local0)
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				  
				    Method(SPIO , 3)
				    {
				        Name(PBUF, Buffer(5) { 0x00,0x00,0x00,0x00,0x00})
				        CreateByteField(PBUF, 0,  RCT)
				        CreateByteField(PBUF, 1,  ISP)
				        CreateByteField(PBUF, 2,  FAST) 
				        CreateByteField(PBUF, 3,  DMAE)  
				        CreateByteField(PBUF, 4,  PIOT) 
				        If (LOr (LEqual (Arg0, 0x0), LEqual (Arg0, 0x0FFFFFFFF)) ) {
				        
				            Return (PBUF)
				        }
				        If (LGreater (Arg0, 240)) {
				            
				            
				            
				            Store (1, DMAE)   
				            Store (0, PIOT)   
				      
				        } Else {
				            
				            
				            
				            Store (1, FAST)   
				       
				            If (And (Arg1, 0x002)) {
				            
				            
				            
				                If (And (LEqual (Arg0, 120), And( Arg2 , 0x002) ) ) {
				                    
				                    
				                    
				                    Store (3, RCT)   
				                    Store (2, ISP)   
				                    Store (4, PIOT)  
				                } Else {
				                  If (And (LLessEqual (Arg0, 180), And( Arg2 , 0x001) ) ) {
				                    
				                    
				                    
				                    Store (1, RCT)   
				                    Store (2, ISP)   
				                    Store (3, PIOT)  
				                  } Else {
				                    
				                    
				                    
				                    Store (0, RCT)   
				                    Store (1, ISP)   
				                    Store (2, PIOT)  
				                  }
				                }
				            }
				        }
				        Return (PBUF)    
				    }
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				  
				    Method(SDMA , 3)
				    {
				        Name(PBUF, Buffer(5) { 0x00,0x00,0x00,0x00})
				        CreateByteField(PBUF, 0,  PCT)
				        CreateByteField(PBUF, 1,  PCB)
				        CreateByteField(PBUF, 2,  UDMT)     
				        CreateByteField(PBUF, 3,  UDME)     
				        CreateByteField(PBUF, 4,  DMAT) 
				        If (LOr (LEqual (Arg0, 0x0), LEqual (Arg0, 0x0FFFFFFFF)) ) {
				        
				            Return (PBUF)
				        }
				        If (LLessEqual (Arg0, 120)) {
				            
				            
				            
				            If (And (Arg1, 0x004)) {
				                
				                
				                
				                Store (1, UDME)   
				                If (And (LEqual (Arg0, 15), And( Arg2 , 0x0040) ) ) {
				                    
				                    
				                    
				                    Store (1, UDMT)
				                    Store (1, PCB)
				                    Store (2, PCT)
				                    Store (6, DMAT)  
				                } Else {      
				                If (And (LEqual (Arg0, 20), And( Arg2 , 0x0020) ) ) {
				                    
				                    
				                    
				                    Store (1, UDMT)
				                    Store (1, PCB)
				                    Store (1, PCT)
				                    Store (5, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 30), And( Arg2 , 0x00010) ) ) {
				                    
				                    
				                    
				                    Store (1, PCB) 
				                    Store (2, PCT)
				                    Store (4, DMAT)  
				          
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 45), And( Arg2 , 0x0008) ) ) {
				                    
				                    
				                    
				                    Store (1, PCB)
				                    Store (1, PCT)
				                    Store (3, DMAT)  
				          
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 60), And( Arg2 , 0x0004) ) ) {
				                    
				                    
				                    
				                    Store (2, PCT)
				                    Store (2, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 90), And( Arg2 , 0x0002) ) ) {
				                    
				                    
				                    
				                    Store (1, PCT)   
				                    Store (1, DMAT)  
				                } Else {
				                
				                If (And (LLessEqual (Arg0, 120), And( Arg2 , 0x0001) ) ) {
				                    
				                    
				                    
				                    Store (0, DMAT)  
				                }         
				                }}}}}}
				            }
				        }
				        Return (PBUF)    
				    }
				  
				
				    
				    
				    
				    Device(PRID)
				    {
				        Name(_ADR,0)
				        Name(TDM0, 0)          
				        Name(TPI0, 0)          
				        Name(TDM1, 0)          
				        Name(TPI1, 0)          
				        
				        Method(_GTM)
				        {
				            Name(PBUF, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				
				            CreateDwordField(PBUF, 0,  PIO0)
				            CreateDwordField(PBUF, 4,  DMA0)
				            CreateDwordField(PBUF, 8,  PIO1)
				            CreateDwordField(PBUF, 12, DMA1)
				            CreateDwordField(PBUF, 16, FLAG)    
				      
				            Store ( GPIO (PFT0, PDE0, PRT0, PIP0 ), PIO0)      
				            
				            
				            
				            
				            
				            
				            If ( And (PSIT, 1) ) {
				               Store ( GPIO (PFT1, PDE1, PRT1, PIP1 ), PIO1)
				            } Else {                
				               Store ( GPIO (PFT1, PDE1, PRT0, PIP0 ), PIO1)
				            }
				            
				            If (LEqual (PIO0, 0xFFFFFFFF)) {
				                Store(PIO0, DMA0)
				            } Else {
				                Store ( GDMA(UDM0, PUM0, PCB0,And (PCCR ,0x1), PCT0) , DMA0)
				                If ( LGreater ( DMA0, PIO0)) {
				                    Store(PIO0, DMA0)        
				                }       
				            }
				            If (LEqual (PIO1, 0xFFFFFFFF)) {
				                Store(PIO1, DMA1)   
				            } Else {
				                Store ( GDMA(UDM1, PUM1, PCB1,And (PCCR ,0x2), PCT1) , DMA1)
				                If ( LGreater ( DMA1, PIO1)) {
				                    Store(PIO1, DMA1)
				                }
				            }
				            Store (SFLG (PIE0, UDM0, PIE1, UDM1, 1), FLAG)       
				                                  
				            Return (PBUF)
				        }
				        
				        Method(_STM,3)
				        {
				            CreateDwordField(Arg0, 0,  PIO0)
				            CreateDwordField(Arg0, 4,  DMA0)
				            CreateDwordField(Arg0, 8,  PIO1)
				            CreateDwordField(Arg0, 12, DMA1)
				            CreateDwordField(Arg0, 16, FLAG)   
				                                   
				            
				            
				            
				            CreateWordField(Arg1, 106, RPS0)    
				            CreateWordField(Arg1, 128, IOM0)    
				            CreateWordField(Arg1, 176, DMM0)    
				      
				            
				            
				            
				            CreateWordField(Arg2, 106, RPS1)    
				            CreateWordField(Arg2, 128, IOM1)    
				            CreateWordField(Arg2, 176, DMM1)    
				      
				            Name(IOTM, Buffer(5) { 0x00,0x00,0x00,0x00})
				      
				            CreateByteField(IOTM, 0,  RCT)
				            CreateByteField(IOTM, 1,  ISP)
				            CreateByteField(IOTM, 2,  FAST) 
				            CreateByteField(IOTM, 3,  DMAE)
				            CreateByteField(IOTM, 4,  TPIO)     
				      
				            Name(DMAT, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(DMAT, 0,  PCT)
				            CreateByteField(DMAT, 1,  PCB)
				            CreateByteField(DMAT, 2,  UDMT)     
				            CreateByteField(DMAT, 3,  UDME)     
				            CreateByteField(DMAT, 4,  TDMA)     
				      
				            If (And (FLAG , 0x10)) {
				                Store (1, PSIT)
				            }
				            
				            Store (SPIO (PIO0,RPS0,IOM0), IOTM)
				            
				            If (Or (DMAE, FAST)) {
				                Store (RCT, PRT0)
				                Store (ISP, PIP0)
				                Store (FAST, PFT0)
				                Store (DMAE, PDE0)
				                Store (TPIO, TPI0)
				            }
				            Store (SPIO (PIO1,RPS1,IOM1), IOTM)
				                
				            If (Or (DMAE, FAST)) {
				                Store (FAST, PFT1)
				                Store (DMAE, PDE1)
				                Store (TPIO, TPI1)
				                If (And (PSIT,1)) {
				                    
				                    
				                    
				                    Store (RCT, PRT1)
				                    Store (ISP, PIP1)         
				                } Else {
				                    Store (RCT, PRT0)
				                    Store (ISP, PIP0)
				                }
				            }
				            If (And (FLAG , 0x01)) {
				                Store (SDMA (DMA0,RPS0,DMM0), DMAT)
				                Store (PCT , PCT0)
				                Store (PCB , PCB0)
				                Store (UDME, UDM0)
				                Store (UDMT, PUM0)
				                Store (TDMA, TDM0)
				            } Else {
				                Store (0, UDM0)
				            }
				      
				            If (And (FLAG , 0x04)) {
				                Store (SDMA (DMA1,RPS1,DMM1), DMAT)
				                Store (PCT , PCT1)
				                Store (PCB , PCB1)
				                Store (UDME, UDM1)
				                Store (UDMT, PUM1)
				                Store (TDMA, TDM1)
				            } Else {
				                Store (0, UDM1)
				            }      
				            
				            
				            
				            If (And (FLAG , 0x2)) { 
				                Store (1 , PIE0)
				            }
				            If (And (FLAG , 0x8)) { 
				                Store (1 , PIE1)
				            }
				                
				        }
				        Device(MAST)
				        {
				            Name(_ADR,0)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA0, Buffer(14)
				                    { 0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF,
				                      0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF })
				        
				                CreateByteField(ATA0,1,PIO0)  
				                CreateByteField(ATA0,8,DMA0)  
				        
				        
				                Store (TPI0, PIO0)            
				        
				                Or (PIO0, 0x08 ,PIO0)
				        
				                If ( And (UDM0, 1)) {
				                    Store (TDM0, DMA0)          
				                    Or (DMA0, 0x40, DMA0)
				                } Else {
				                    Store (TPI0, DMA0)          
				                    If ( LNotEqual (DMA0, 0)) {
				                        Subtract(DMA0, 2, DMA0)
				                    }
				                    Or (DMA0, 0x20, DMA0)
				                }
				                Return (ATA0)
				            }   
				        }
				        Device(SLAV)
				        {
				            Name(_ADR,1)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA1, Buffer(14)
				                    { 0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF,
				                      0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF })
				       
				                CreateByteField(ATA1,1,PIO1)  
				                CreateByteField(ATA1,8,DMA1)  
				                
				                Store (TPI1, PIO1)            
				        
				                Or (PIO1, 0x08 ,PIO1)
				        
				                If ( And (UDM1, 1)) {
				                    Store (TDM1, DMA1)          
				                    Or (DMA1, 0x40, DMA1)
				                } Else {
				                    Store (TPI1, DMA1)          
				                    If ( LNotEqual (DMA1, 0)) {
				                        Subtract(DMA1, 2, DMA1)
				                    }
				                    Or (DMA1, 0x20, DMA1)
				                }
				                Return(ATA1)
				            }   
				        }
				    }
				    
				    
				    
				    Device(SECD)
				    {
				        Name(_ADR,1)
				        Name(TDM0, 0)
				        Name(TPI0, 0)
				        Name(TDM1, 0)
				        Name(TPI1, 0)
				        
				        Name(DMT1, Buffer(5) { 0x00,0x00,0x00,0x00})
				        Name(DMT2, Buffer(5) { 0x00,0x00,0x00,0x00})
				        Name(POT1, Buffer(5) { 0x00,0x00,0x00,0x00})        
				        Name(POT2, Buffer(5) { 0x00,0x00,0x00,0x00})
				        
				        Name(STMI, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				     
				        Method(_GTM)
				        {
				            Name(PBUF, Buffer(20) { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				                0x00,0x00,0x00,0x00 })
				
				            CreateDwordField(PBUF, 0,  PIO0)
				            CreateDwordField(PBUF, 4,  DMA0)
				            CreateDwordField(PBUF, 8,  PIO1)
				            CreateDwordField(PBUF, 12, DMA1)
				            CreateDwordField(PBUF, 16, FLAG)
				  
				            Store ( GPIO (SFT0, SDE0, SRT0, SIP0 ), PIO0)  
				            
				            
				            
				            
				            
				            If ( And (SSIT, 1) ) {
				                 Store ( GPIO (SFT1, SDE1, SRT1, SIP1 ), PIO1)
				            } Else {                
				                 Store ( GPIO (SFT1, SDE1, SRT0, SIP0 ), PIO1)
				            }
				            
				            If (LEqual (PIO0, 0xFFFFFFFF)) {
				                Store(PIO0, DMA0)
				            } Else {
				                Store ( GDMA(UDM2, SUM0, SCB0,And (SCCR ,0x1), SCT0) , DMA0)
				                If ( LGreater ( DMA0, PIO0)) {
				                    Store(PIO0, DMA0)
				                }
				            }
				      
				            If (LEqual (PIO1, 0xFFFFFFFF)) {
				                Store(PIO1, DMA1)   
				            } Else {
				                Store ( GDMA(UDM3, SUM1, SCB1,And (SCCR ,0x2), SCT1) , DMA1)
				                If ( LGreater ( DMA1, PIO1)) {
				                    Store(PIO1, DMA1)
				                }
				            }
				      
				            Store (SFLG (SIE0, UDM2, SIE1, UDM3, 1), FLAG)
				                        
				            Return (PBUF)
				        }
				        Method(_STM,3)
				        {
				            CreateDwordField(Arg0, 0,  PIO0)
				            CreateDwordField(Arg0, 4,  DMA0)
				            CreateDwordField(Arg0, 8,  PIO1)
				            CreateDwordField(Arg0, 12, DMA1)
				            CreateDwordField(Arg0, 16, FLAG)
				                        
				            Store (Arg0, STMI)
				            
				            
				            
				            CreateWordField(Arg1, 106, RPS0)    
				            CreateWordField(Arg1, 128, IOM0)    
				            CreateWordField(Arg1, 176, DMM0)    
				      
				            
				            
				            
				            CreateWordField(Arg2, 106, RPS1)    
				            CreateWordField(Arg2, 128, IOM1)    
				            CreateWordField(Arg2, 176, DMM1)    
				      
				            Name(IOTM, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(IOTM, 0,  RCT)
				            CreateByteField(IOTM, 1,  ISP)
				            CreateByteField(IOTM, 2,  FAST) 
				            CreateByteField(IOTM, 3,  DMAE)
				            CreateByteField(IOTM, 4,  TPIO)     
				
				            Name(DMAT, Buffer(5) { 0x00,0x00,0x00,0x00})
				
				            CreateByteField(DMAT, 0,  PCT)
				            CreateByteField(DMAT, 1,  PCB)
				            CreateByteField(DMAT, 2,  UDMT)     
				            CreateByteField(DMAT, 3,  UDME)     
				            CreateByteField(DMAT, 4,  TDMA)     
				
				            If (And (FLAG , 0x10)) {
				                Store (1, SSIT)
				            }
				                                    
				            
				            
				            
				            Store (SPIO (PIO0,RPS0,IOM0), IOTM)
				            
				            
				            
				            If (Or (DMAE, FAST)) {
				                Store (RCT, SRT0)
				                Store (ISP, SIP0)
				                Store (FAST, SFT0)
				                Store (DMAE, SDE0)
				                Store (TPIO, TPI0)
				            }             
				            
				            Store (SPIO (PIO1,RPS1,IOM1), IOTM)
				            
				            Store (IOTM,POT2)
				            
				            If (Or (DMAE, FAST)) {
				                Store (FAST, SFT1)
				                Store (DMAE, SDE1)
				                Store (TPIO, TPI1)
				                If (And (SSIT,1)) {
				                    
				                    
				                    
				                    Store (RCT, SRT1)
				                    Store (ISP, SIP1)
				                } Else {
				                    Store (RCT, SRT0)
				                    Store (ISP, SIP0)
				                } 
				            }
				            
				            If (And (FLAG , 0x01)) {
				                Store (SDMA (DMA0,RPS0,DMM0), DMAT)
				                Store (PCT , SCT0)
				                Store (PCB , SCB0)
				                Store (UDME , UDM2)
				                Store (UDMT , SUM0)
				                Store (TDMA, TDM0)
				            } Else {
				                Store (0, UDM2)
				            }
				            If (And (FLAG , 0x04)) {
				                Store (SDMA (DMA1,RPS1,DMM1), DMAT)
				                Store (PCT , SCT1)
				                Store (PCB , SCB1)
				                Store (UDME , UDM3)
				                Store (UDMT , SUM1)
				                Store (TDMA , TDM1)
				            } Else {
				                Store (0, UDM3)
				            }
				            
				            
				            
				            If (And (FLAG , 0x2)) { 
				                Store (1 , SIE0)
				            }
				            If (And (FLAG , 0x8)) { 
				                Store (1 , SIE1)
				            }
				                    
				        }
				        Device(MAST)
				        {
				            Name(_ADR,0)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA0, Buffer(14)
				                { 0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF,
				                  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF })
				       
				                CreateByteField(ATA0,1,PIO0)  
				                CreateByteField(ATA0,8,DMA0)  
				        
				                Store (TPI0, PIO0)            
				        
				                Or (PIO0, 0x08 ,PIO0)
				        
				                If ( And (UDM2, 1)) {
				                    Store (TDM0, DMA0)          
				                    Or (DMA0, 0x40, DMA0)
				                } Else {
				                    Store (TPI0, DMA0)          
				                    If ( LNotEqual (DMA0, 0)) {
				                        Subtract(DMA0, 2, DMA0)
				                    }
				                    Or (DMA0, 0x20, DMA0)
				                }
				                Return (ATA0)
				            }   
				        }
				        Device(SLAV)
				        {
				            Name(_ADR,1)
				            Method(_GTF)
				            {
				                
				                
				                
				                Name(ATA1, Buffer(14)
				                { 0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF,
				                  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF })
				        
				                CreateByteField(ATA1,1,PIO1)  
				                CreateByteField(ATA1,8,DMA1)  
				        
				                Store (TPI1, PIO1)            
				        
				                Or (PIO1, 0x08 ,PIO1)
				        
				                If ( And (UDM3, 1)) {
				                    Store (TDM1, DMA1)          
				                    Or (DMA1, 0x40, DMA1)
				                } Else {
				                    Store (TPI1, DMA1)          
				                    If ( LNotEqual (DMA1, 0)) {
				                        Subtract(DMA1, 2, DMA1)
				                    }
				                    Or (DMA1, 0x20, DMA1)
				                }
				                Return(ATA1)
				            }
				        }
				    }

	
			} 
	
			Device(DMI0) { 
				Name(_ADR, 0x00000000)
			} 
	
			Device(BR1A) { 
				Name(_ADR, 0x00010000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG28) }
					Return (PG28) 
				} 
	
				Device(D07E) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(BR1B) { 
				Name(_ADR, 0x00010001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(BR2A) { 
				Name(_ADR, 0x00020000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG2A) }
					Return (PG2A) 
				} 
	
				Device(D080) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(BR2B) { 
				Name(_ADR, 0x00020001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(BR2C) { 
				Name(_ADR, 0x00020002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG2C) }
					Return (PG2C) 
				} 
	
				Device(D081) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(BR2D) { 
				Name(_ADR, 0x00020003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(BR3A) { 
				Name(_ADR, 0x00030000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG2E) }
					Return (PG2E) 
				} 
	
				Device(D07F) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(BR3B) { 
				Name(_ADR, 0x00030001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(BR3C) { 
				Name(_ADR, 0x00030002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG30) }
					Return (PG30) 
				} 
	
				Device(LAN1) { 
					Name(_ADR, 0x00000000)
				} 
	
			} 
	
			Device(BR3D) { 
				Name(_ADR, 0x00030003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG31) }
					Return (PG31) 
				} 
	
				Device(D082) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(CB0A) { 
				Name(_ADR, 0x00040000)
			} 
	
			Device(CB0B) { 
				Name(_ADR, 0x00040001)
			} 
	
			Device(CB0C) { 
				Name(_ADR, 0x00040002)
			} 
	
			Device(CB0D) { 
				Name(_ADR, 0x00040003)
			} 
	
			Device(CB0E) { 
				Name(_ADR, 0x00040004)
			} 
	
			Device(CB0F) { 
				Name(_ADR, 0x00040005)
			} 
	
			Device(CB0G) { 
				Name(_ADR, 0x00040006)
			} 
	
			Device(CB0H) { 
				Name(_ADR, 0x00040007)
			} 
	
		}	
		Device(PCI1) {	
			Name(_HID, EISAID("PNP0A08"))	
			Name(_CID, EISAID("PNP0A03"))	
			Name(_ADR, 0x0000FFFF)
			Method(^BN40, 0){ return(0x0040) }	
			Method(_BBN, 0){ return(BN40()) }	
			Name(_UID, 0x0040)	
				Method(_PRT,0) {
					If(PICM) { Return(AR40) }
					Return (PR40) 
				} 
	
	
	
	
	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			  Method(_OSC,4,Serialized)
					{ 
			    Name(SUPP,0) 
			    Name(CTRL,0) 
			    
			    CreateDWordField(Arg3,0,CDW1)
			    CreateDWordField(Arg3,4,CDW2)
			    If(LGreater(Arg2,2)) {         
			        CreateDWordField(Arg3,8,CDW3)
			    } 	
			    
			    
			    Store(_BBN(),Local0)
			    If( LEqual(Local0,0x0000) ) {					
			        
			        
			        
			        
			        If (LEqual (Arg0, ToUUID("7C9512A9-1705-4CB4-AF7D-506A2423AB71"))) {
			        Return (\_SB.PCI0.XHCI.POSC(Arg1, Arg2, Arg3))
			        }         
			    }
			    
			      
			    
			    If(LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766")))
			    {
							
							Store(CDW2,SUPP)
							Store(CDW3,CTRL)
							
							
							
							
							
							
					
							
							
							
							
							
							
					
							
							
							
							
					
			        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
			            And(CTRL,0x1E,CTRL) 
			            Sleep(1000)      
			        }
			    
			    
			    
			    And(CTRL, 0x1D, CTRL)
			    
			    if (LNot(PEPM)) 
			    {
			        And(CTRL,0x1B,CTRL) 
			        
			    }
			    if (LNot(PEER))	
			    {
			        And(CTRL,0x15,CTRL)
			    }
			    if (LNot(PECS)) 
			    {
			        And(CTRL,0xF,CTRL)
			    }
			
			    
			    If (Not(And(CDW1,1))) { 
			    
			    
			    
			    If (And(CTRL, 0x01)) { 
			                    
			        \_SB.PCI0.BR1A.OSHP ()
			        \_SB.PCI0.BR1B.OSHP ()
			        \_SB.PCI0.BR2A.OSHP ()
			        \_SB.PCI0.BR2B.OSHP ()
			        \_SB.PCI0.BR2C.OSHP ()
			        \_SB.PCI0.BR2D.OSHP ()
			        \_SB.PCI0.BR3A.OSHP ()
			        \_SB.PCI0.BR3B.OSHP ()
			        \_SB.PCI0.BR3C.OSHP ()
			        \_SB.PCI0.BR3D.OSHP ()
			
			        ShiftRight(IIOH, 1, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			         	\_SB.PCI1.QRP0.OSHP ()
					\_SB.PCI1.QR1A.OSHP ()
					\_SB.PCI1.QR1B.OSHP ()
					\_SB.PCI1.QR2A.OSHP ()
					\_SB.PCI1.QR2B.OSHP ()
					\_SB.PCI1.QR2C.OSHP ()
					\_SB.PCI1.QR2D.OSHP ()
					\_SB.PCI1.QR3A.OSHP ()
					\_SB.PCI1.QR3B.OSHP ()
					\_SB.PCI1.QR3C.OSHP ()
					\_SB.PCI1.QR3D.OSHP ()        
			        }  
			
			        ShiftRight(IIOH, 2, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI2.RRP0.OSHP ()
			                \_SB.PCI2.RR1A.OSHP ()
			                \_SB.PCI2.RR1B.OSHP ()
			                \_SB.PCI2.RR2A.OSHP ()
			                \_SB.PCI2.RR2B.OSHP ()
			                \_SB.PCI2.RR2C.OSHP ()
			                \_SB.PCI2.RR2D.OSHP ()
			                \_SB.PCI2.RR3A.OSHP ()
			                \_SB.PCI2.RR3B.OSHP ()
			                \_SB.PCI2.RR3C.OSHP ()
			                \_SB.PCI2.RR3D.OSHP ()
			        }  
			
			        ShiftRight(IIOH, 3, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI3.SRP0.OSHP ()
			                \_SB.PCI3.SR1A.OSHP ()
			                \_SB.PCI3.SR1B.OSHP ()
			                \_SB.PCI3.SR2A.OSHP ()
			                \_SB.PCI3.SR2B.OSHP ()
			                \_SB.PCI3.SR2C.OSHP ()
			                \_SB.PCI3.SR2D.OSHP ()
			                \_SB.PCI3.SR3A.OSHP ()
			                \_SB.PCI3.SR3B.OSHP ()
			                \_SB.PCI3.SR3C.OSHP ()
			                \_SB.PCI3.SR3D.OSHP ()
			        }
			                        
			        Store (0x01, GPSH)                
			        }
			        
			            
			          If (LNotEqual(Arg1,one)) { 
			            Or(CDW1,0x08,CDW1)
			          }
			
			          If(LNotEqual(CDW3,CTRL)) { 
			            Or(CDW1,0x10,CDW1)
			          }
			          
			          
			          
			          Store(CTRL,CDW3)
			          Return(Arg3)
			
			      } Else {
			        
			        
			        
			        
			        Or (CDW1,4,CDW1)
			        Store (0xEE, IO80)
			        Return(Arg3)
			      }
			    }
			  } 
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			





			



















			
			   Method(BN40, 0){          
			                   return(\BBI1) 
			    }	
			 
			   
			  
			  
			  Method(_PXM) {
			    if (LEqual (CLOD, 0)) {
			      Return(1)
			    } else {
			      Return(2)
			    }
			  }
			
			  
			  Device (IIOP) {
			    
			    Name(_ADR, 0x00000000)          
			    Name(_UID, "IIO1PRES")          
			
			    
			    OperationRegion(IIOR, PCI_Config, 0x00, 0x02)
			    Field(IIOR, ByteAcc, NoLock, Preserve){
			      offset(0x00),
			      VID0,16,  
			    }
			
			
			    
			    Method (_DSM, 4, Serialized) { 
			      if(LEqual(Arg0,ToUUID("D8C1A3A6-BE9B-4C9B-91BF-C3CB81FC5DAF"))){
			        Switch(ToInteger(Arg2)) {
			          case(0) {Return ( Buffer() {0x1F} )} 
			          case(1) {Return (Buffer() {0x44, 0x52, 0x48, 0x31,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) } 
			
			          case(2) {Return (Buffer()  {0x41, 0x54, 0x53, 0x31,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) }
			          case(3) {Return (Buffer()  {0x52, 0x48, 0x53, 0x31,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) }
			          Default { }
			        }
			      }
			      Return (Buffer() {0})
			    }
			
			  }
			
			  Method(_STA){
			    
			    ShiftRight(IIOH, 1, Local1)
			    And(Local1, 0x1, Local1)
			    if(LEqual(Local1, 0x0)) {
			      
			      Return(0x00)
			    } else {
			      
			      Return(0x0F) 
			    }
			  } 
			
			
			
			



















			
			  Name(P1RS, ResourceTemplate() {
			    
			    WORDBusNumber(            
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,              
			      0x4946,                 
			      0x3958,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                 
			    )
			
			    
			    
			    DWORDMEMORY(              
			      ResourceProducer,       
			      PosDecode,
			      MinFixed,               
			      MaxFixed,               
			      Cacheable,
			      ReadWrite,
			      0x56584946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000              
			    )
			
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x4158,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                 
			    )
			
			    
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x5758,                 
			      0x0000,                 
			      0x0000,                 
			      0x0000                 
			   ) 
			
			    
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x5858,                 
			      0x0000,                 
			      0x0000,                 
			      0x0000                 
			   ) 
			
			    
			    
			    
			    DWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x42584946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000             
			    )
			
			    
			    
			    
			    QWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x43584946,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000          
			    )
			  }) 
			
			
			  
			  Method(_CRS, 0x0, NotSerialized) {
			    Return(P1RS)
			  }
			
			  
			  
			  
			  
			  
			  Device (MHP0) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "01-00")
			
			    
			    OperationRegion(MHP0, PCI_Config, 0xE, 2)
			    Field(MHP0,ByteAcc,NoLock,Preserve) {
			      STM2,7,
			    }
			  }
			
			  Device (MHP1) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "01-01")
			
			    
			    OperationRegion(MHP1, PCI_Config, 0x1E, 2)
			    Field(MHP1,ByteAcc,NoLock,Preserve) {
			      STM3,7,
			    }
			  }
			

			





			



















			
			  
			  Name(_EJD,"\\_SB.SCK1")   

	
	
	
	
			Device(QRP0) { 
				Name(_ADR, 0x00000000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(QR1A) { 
				Name(_ADR, 0x00010000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG34) }
					Return (PG34) 
				} 
	
				Device(D083) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(QR1B) { 
				Name(_ADR, 0x00010001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(QR2A) { 
				Name(_ADR, 0x00020000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG36) }
					Return (PG36) 
				} 
	
				Device(D086) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(QR2B) { 
				Name(_ADR, 0x00020001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG37) }
					Return (PG37) 
				} 
	
				Device(D087) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(QR2C) { 
				Name(_ADR, 0x00020002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG38) }
					Return (PG38) 
				} 
	
				Device(D088) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(QR2D) { 
				Name(_ADR, 0x00020003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG39) }
					Return (PG39) 
				} 
	
				Device(D089) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(QR3A) { 
				Name(_ADR, 0x00030000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG3A) }
					Return (PG3A) 
				} 
	
				Device(D084) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(QR3B) { 
				Name(_ADR, 0x00030001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(QR3C) { 
				Name(_ADR, 0x00030002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
				Method(_PRT,0) {
					If(PICM) { Return(AG3C) }
					Return (PG3C) 
				} 
	
				Device(D085) { 
					Name(_ADR, 0x0000FFFF)
				} 
	
			} 
	
			Device(QR3D) { 
				Name(_ADR, 0x00030003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				
				
				
				
				
				
				
				



















				
				  
				  Name(_EJD,"\\_SB.PCI1")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(CB1A) { 
				Name(_ADR, 0x00040000)
			} 
	
			Device(CB1B) { 
				Name(_ADR, 0x00040001)
			} 
	
			Device(CB1C) { 
				Name(_ADR, 0x00040002)
			} 
	
			Device(CB1D) { 
				Name(_ADR, 0x00040003)
			} 
	
			Device(CB1E) { 
				Name(_ADR, 0x00040004)
			} 
	
			Device(CB1F) { 
				Name(_ADR, 0x00040005)
			} 
	
			Device(CB1G) { 
				Name(_ADR, 0x00040006)
			} 
	
			Device(CB1H) { 
				Name(_ADR, 0x00040007)
			} 
	
		}	
		Device(PCI2) {	
			Name(_HID, EISAID("PNP0A08"))	
			Name(_CID, EISAID("PNP0A03"))	
			Name(_ADR, 0x0000FFFF)
			Method(^BN80, 0){ return(0x0080) }	
			Method(_BBN, 0){ return(BN80()) }	
			Name(_UID, 0x0080)	
				Method(_PRT,0) {
					If(PICM) { Return(AR80) }
					Return (PR80) 
				} 
	
	
	
	
	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			  Method(_OSC,4,Serialized)
					{ 
			    Name(SUPP,0) 
			    Name(CTRL,0) 
			    
			    CreateDWordField(Arg3,0,CDW1)
			    CreateDWordField(Arg3,4,CDW2)
			    If(LGreater(Arg2,2)) {         
			        CreateDWordField(Arg3,8,CDW3)
			    } 	
			    
			    
			    Store(_BBN(),Local0)
			    If( LEqual(Local0,0x0000) ) {					
			        
			        
			        
			        
			        If (LEqual (Arg0, ToUUID("7C9512A9-1705-4CB4-AF7D-506A2423AB71"))) {
			        Return (\_SB.PCI0.XHCI.POSC(Arg1, Arg2, Arg3))
			        }         
			    }
			    
			      
			    
			    If(LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766")))
			    {
							
							Store(CDW2,SUPP)
							Store(CDW3,CTRL)
							
							
							
							
							
							
					
							
							
							
							
							
							
					
							
							
							
							
					
			        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
			            And(CTRL,0x1E,CTRL) 
			            Sleep(1000)      
			        }
			    
			    
			    
			    And(CTRL, 0x1D, CTRL)
			    
			    if (LNot(PEPM)) 
			    {
			        And(CTRL,0x1B,CTRL) 
			        
			    }
			    if (LNot(PEER))	
			    {
			        And(CTRL,0x15,CTRL)
			    }
			    if (LNot(PECS)) 
			    {
			        And(CTRL,0xF,CTRL)
			    }
			
			    
			    If (Not(And(CDW1,1))) { 
			    
			    
			    
			    If (And(CTRL, 0x01)) { 
			                    
			        \_SB.PCI0.BR1A.OSHP ()
			        \_SB.PCI0.BR1B.OSHP ()
			        \_SB.PCI0.BR2A.OSHP ()
			        \_SB.PCI0.BR2B.OSHP ()
			        \_SB.PCI0.BR2C.OSHP ()
			        \_SB.PCI0.BR2D.OSHP ()
			        \_SB.PCI0.BR3A.OSHP ()
			        \_SB.PCI0.BR3B.OSHP ()
			        \_SB.PCI0.BR3C.OSHP ()
			        \_SB.PCI0.BR3D.OSHP ()
			
			        ShiftRight(IIOH, 1, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			         	\_SB.PCI1.QRP0.OSHP ()
					\_SB.PCI1.QR1A.OSHP ()
					\_SB.PCI1.QR1B.OSHP ()
					\_SB.PCI1.QR2A.OSHP ()
					\_SB.PCI1.QR2B.OSHP ()
					\_SB.PCI1.QR2C.OSHP ()
					\_SB.PCI1.QR2D.OSHP ()
					\_SB.PCI1.QR3A.OSHP ()
					\_SB.PCI1.QR3B.OSHP ()
					\_SB.PCI1.QR3C.OSHP ()
					\_SB.PCI1.QR3D.OSHP ()        
			        }  
			
			        ShiftRight(IIOH, 2, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI2.RRP0.OSHP ()
			                \_SB.PCI2.RR1A.OSHP ()
			                \_SB.PCI2.RR1B.OSHP ()
			                \_SB.PCI2.RR2A.OSHP ()
			                \_SB.PCI2.RR2B.OSHP ()
			                \_SB.PCI2.RR2C.OSHP ()
			                \_SB.PCI2.RR2D.OSHP ()
			                \_SB.PCI2.RR3A.OSHP ()
			                \_SB.PCI2.RR3B.OSHP ()
			                \_SB.PCI2.RR3C.OSHP ()
			                \_SB.PCI2.RR3D.OSHP ()
			        }  
			
			        ShiftRight(IIOH, 3, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI3.SRP0.OSHP ()
			                \_SB.PCI3.SR1A.OSHP ()
			                \_SB.PCI3.SR1B.OSHP ()
			                \_SB.PCI3.SR2A.OSHP ()
			                \_SB.PCI3.SR2B.OSHP ()
			                \_SB.PCI3.SR2C.OSHP ()
			                \_SB.PCI3.SR2D.OSHP ()
			                \_SB.PCI3.SR3A.OSHP ()
			                \_SB.PCI3.SR3B.OSHP ()
			                \_SB.PCI3.SR3C.OSHP ()
			                \_SB.PCI3.SR3D.OSHP ()
			        }
			                        
			        Store (0x01, GPSH)                
			        }
			        
			            
			          If (LNotEqual(Arg1,one)) { 
			            Or(CDW1,0x08,CDW1)
			          }
			
			          If(LNotEqual(CDW3,CTRL)) { 
			            Or(CDW1,0x10,CDW1)
			          }
			          
			          
			          
			          Store(CTRL,CDW3)
			          Return(Arg3)
			
			      } Else {
			        
			        
			        
			        
			        Or (CDW1,4,CDW1)
			        Store (0xEE, IO80)
			        Return(Arg3)
			      }
			    }
			  } 
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			





			



















			Method(BN80, 0){                  
			                   return(\BBI2) 
			    }	
			
			  
			  
			  
			  Method(_PXM) {
			    if (LEqual (CLOD, 0)) {
			      Return(2)
			    } else {
			      Return(4)
			    }
			  }
			
			  
			  Device (IIOP) {
			    
			    Name(_ADR, 0x00000000)          
			    Name(_UID, "IIO2PRES")          
			
			    
			    OperationRegion(IIOR, PCI_Config, 0x00, 0x02)
			    Field(IIOR, ByteAcc, NoLock, Preserve){
			      offset(0x00),
			      VID0,16,  
			    }
			
			
			    
			    Method (_DSM, 4, Serialized) { 
			      if(LEqual(Arg0,ToUUID("D8C1A3A6-BE9B-4C9B-91BF-C3CB81FC5DAF"))){
			        Switch(ToInteger(Arg2)) {
			          case(0) {Return ( Buffer() {0x1F} )} 
			          case(1) {Return (Buffer() {0x44, 0x52, 0x48, 0x32,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) } 
			
			          case(2) {Return (Buffer()  {0x41, 0x54, 0x53, 0x32,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) }
			          case(3) {Return (Buffer()  {0x52, 0x48, 0x53, 0x32,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) }
			          Default { }
			        }
			      }
			      Return (Buffer() {0})
			    }
			
			  }
			
			  Method(_STA){
			    
			    ShiftRight(IIOH, 2, Local1)
			    And(Local1, 0x1, Local1)
			    if(LEqual(Local1, 0x0)) {
			      
			      Return(0x00)
			    } else {
			      
			      Return(0x0F) 
			    }
			  } 
			
			
			
			



















			
			  Name(P2RS, ResourceTemplate() {
			    
			    WORDBusNumber(            
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,              
			      0x4946,                 
			      0x4458,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                 
			    )
			
			    
			    
			    DWORDMEMORY(              
			      ResourceProducer,       
			      PosDecode,
			      MinFixed,               
			      MaxFixed,               
			      Cacheable,
			      ReadWrite,
			      0x41594946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000              
			    )
			
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x4558,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                 
			    )
			
			    
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x4259,                 
			      0x0000,                 
			      0x0000,                 
			      0x0000                 
			   ) 
			
			    
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x4359,                 
			      0x0000,                 
			      0x0000,                 
			      0x0000                 
			   ) 
			
			    
			    
			    
			    DWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x46584946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000             
			    )
			
			    
			    
			    
			    QWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x47584946,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000          
			    )
			  }) 
			
			  
			  Method(_CRS, 0x0, NotSerialized) {
			    Return(P2RS)
			  }
			
			  
			  
			  
			  
			  
			  Device (MHP0) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "02-00")
			
			    
			    OperationRegion(MHP0, PCI_Config, 0xE, 2)
			    Field(MHP0,ByteAcc,NoLock,Preserve) {
			      STM4,7,
			    }
			  }
			
			  Device (MHP1) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "02-01")
			
			    
			    OperationRegion(MHP1, PCI_Config, 0x1E, 2)
			    Field(MHP1,ByteAcc,NoLock,Preserve) {
			      STM5,7,
			    }
			  }
			

			





			



















			
			  
			  Name(_EJD,"\\_SB.SCK2")   

	
	
	
	
			Device(RRP0) { 
				Name(_ADR, 0x00000000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR1A) { 
				Name(_ADR, 0x00010000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR1B) { 
				Name(_ADR, 0x00010001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR2A) { 
				Name(_ADR, 0x00020000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR2B) { 
				Name(_ADR, 0x00020001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR2C) { 
				Name(_ADR, 0x00020002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR2D) { 
				Name(_ADR, 0x00020003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR3A) { 
				Name(_ADR, 0x00030000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR3B) { 
				Name(_ADR, 0x00030001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR3C) { 
				Name(_ADR, 0x00030002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(RR3D) { 
				Name(_ADR, 0x00030003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI2")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(CB2A) { 
				Name(_ADR, 0x00040000)
			} 
	
			Device(CB2B) { 
				Name(_ADR, 0x00040001)
			} 
	
			Device(CB2C) { 
				Name(_ADR, 0x00040002)
			} 
	
			Device(CB2D) { 
				Name(_ADR, 0x00040003)
			} 
	
			Device(CB2E) { 
				Name(_ADR, 0x00040004)
			} 
	
			Device(CB2F) { 
				Name(_ADR, 0x00040005)
			} 
	
			Device(CB2G) { 
				Name(_ADR, 0x00040006)
			} 
	
			Device(CB2H) { 
				Name(_ADR, 0x00040007)
			} 
	
		}	
		Device(PCI3) {	
			Name(_HID, EISAID("PNP0A08"))	
			Name(_CID, EISAID("PNP0A03"))	
			Name(_ADR, 0x0000FFFF)
			Method(^BNC0, 0){ return(0x00C0) }	
			Method(_BBN, 0){ return(BNC0()) }	
			Name(_UID, 0x00C0)	
				Method(_PRT,0) {
					If(PICM) { Return(ARC0) }
					Return (PRC0) 
				} 
	
	
	
	
	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			  Method(_OSC,4,Serialized)
					{ 
			    Name(SUPP,0) 
			    Name(CTRL,0) 
			    
			    CreateDWordField(Arg3,0,CDW1)
			    CreateDWordField(Arg3,4,CDW2)
			    If(LGreater(Arg2,2)) {         
			        CreateDWordField(Arg3,8,CDW3)
			    } 	
			    
			    
			    Store(_BBN(),Local0)
			    If( LEqual(Local0,0x0000) ) {					
			        
			        
			        
			        
			        If (LEqual (Arg0, ToUUID("7C9512A9-1705-4CB4-AF7D-506A2423AB71"))) {
			        Return (\_SB.PCI0.XHCI.POSC(Arg1, Arg2, Arg3))
			        }         
			    }
			    
			      
			    
			    If(LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766")))
			    {
							
							Store(CDW2,SUPP)
							Store(CDW3,CTRL)
							
							
							
							
							
							
					
							
							
							
							
							
							
					
							
							
							
							
					
			        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { 
			            And(CTRL,0x1E,CTRL) 
			            Sleep(1000)      
			        }
			    
			    
			    
			    And(CTRL, 0x1D, CTRL)
			    
			    if (LNot(PEPM)) 
			    {
			        And(CTRL,0x1B,CTRL) 
			        
			    }
			    if (LNot(PEER))	
			    {
			        And(CTRL,0x15,CTRL)
			    }
			    if (LNot(PECS)) 
			    {
			        And(CTRL,0xF,CTRL)
			    }
			
			    
			    If (Not(And(CDW1,1))) { 
			    
			    
			    
			    If (And(CTRL, 0x01)) { 
			                    
			        \_SB.PCI0.BR1A.OSHP ()
			        \_SB.PCI0.BR1B.OSHP ()
			        \_SB.PCI0.BR2A.OSHP ()
			        \_SB.PCI0.BR2B.OSHP ()
			        \_SB.PCI0.BR2C.OSHP ()
			        \_SB.PCI0.BR2D.OSHP ()
			        \_SB.PCI0.BR3A.OSHP ()
			        \_SB.PCI0.BR3B.OSHP ()
			        \_SB.PCI0.BR3C.OSHP ()
			        \_SB.PCI0.BR3D.OSHP ()
			
			        ShiftRight(IIOH, 1, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			         	\_SB.PCI1.QRP0.OSHP ()
					\_SB.PCI1.QR1A.OSHP ()
					\_SB.PCI1.QR1B.OSHP ()
					\_SB.PCI1.QR2A.OSHP ()
					\_SB.PCI1.QR2B.OSHP ()
					\_SB.PCI1.QR2C.OSHP ()
					\_SB.PCI1.QR2D.OSHP ()
					\_SB.PCI1.QR3A.OSHP ()
					\_SB.PCI1.QR3B.OSHP ()
					\_SB.PCI1.QR3C.OSHP ()
					\_SB.PCI1.QR3D.OSHP ()        
			        }  
			
			        ShiftRight(IIOH, 2, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI2.RRP0.OSHP ()
			                \_SB.PCI2.RR1A.OSHP ()
			                \_SB.PCI2.RR1B.OSHP ()
			                \_SB.PCI2.RR2A.OSHP ()
			                \_SB.PCI2.RR2B.OSHP ()
			                \_SB.PCI2.RR2C.OSHP ()
			                \_SB.PCI2.RR2D.OSHP ()
			                \_SB.PCI2.RR3A.OSHP ()
			                \_SB.PCI2.RR3B.OSHP ()
			                \_SB.PCI2.RR3C.OSHP ()
			                \_SB.PCI2.RR3D.OSHP ()
			        }  
			
			        ShiftRight(IIOH, 3, Local1)
			        And(Local1, 0x1, Local1)
			        if(LEqual(Local1, 1)) {
			
			                \_SB.PCI3.SRP0.OSHP ()
			                \_SB.PCI3.SR1A.OSHP ()
			                \_SB.PCI3.SR1B.OSHP ()
			                \_SB.PCI3.SR2A.OSHP ()
			                \_SB.PCI3.SR2B.OSHP ()
			                \_SB.PCI3.SR2C.OSHP ()
			                \_SB.PCI3.SR2D.OSHP ()
			                \_SB.PCI3.SR3A.OSHP ()
			                \_SB.PCI3.SR3B.OSHP ()
			                \_SB.PCI3.SR3C.OSHP ()
			                \_SB.PCI3.SR3D.OSHP ()
			        }
			                        
			        Store (0x01, GPSH)                
			        }
			        
			            
			          If (LNotEqual(Arg1,one)) { 
			            Or(CDW1,0x08,CDW1)
			          }
			
			          If(LNotEqual(CDW3,CTRL)) { 
			            Or(CDW1,0x10,CDW1)
			          }
			          
			          
			          
			          Store(CTRL,CDW3)
			          Return(Arg3)
			
			      } Else {
			        
			        
			        
			        
			        Or (CDW1,4,CDW1)
			        Store (0xEE, IO80)
			        Return(Arg3)
			      }
			    }
			  } 
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			





			



















			
			Method(BNC0, 0){    
			                   return(\BBI3) 
			    }	
			  
			  
			  
			  
			  Method(_PXM) {
			    if (LEqual (CLOD, 0)) {
			      Return(3)
			    } else {
			      Return(6)
			    }
			  }
			
			  
			  Device (IIOP) {
			    
			    Name(_ADR, 0x00000000)          
			    Name(_UID, "IIO3PRES")          
			
			    
			    OperationRegion(IIOR, PCI_Config, 0x00, 0x02)
			    Field(IIOR, ByteAcc, NoLock, Preserve){
			      offset(0x00),
			      VID0,16,  
			    }
			
			
			    
			    Method (_DSM, 4, Serialized) { 
			      if(LEqual(Arg0,ToUUID("D8C1A3A6-BE9B-4C9B-91BF-C3CB81FC5DAF"))){
			        Switch(ToInteger(Arg2)) {
			          case(0) {Return ( Buffer() {0x1F} )} 
			          case(1) {Return (Buffer() {0x44, 0x52, 0x48, 0x33,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) } 
			
			          case(2) {Return (Buffer()  {0x41, 0x54, 0x53, 0x33,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) }
			          case(3) {Return (Buffer()  {0x52, 0x48, 0x53, 0x33,
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00, 
			            00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 } ) }
			          Default { }
			        }
			      }
			      Return (Buffer() {0})
			    }
			
			  }
			
			  Method(_STA){
			    
			    ShiftRight(IIOH, 3, Local1)
			    And(Local1, 0x1, Local1)
			    if(LEqual(Local1, 0x0)) {
			      
			      Return(0x00)
			    } else {
			      
			      Return(0x0F) 
			    }
			  } 
			
			
			
			



















			
			  Name(P3RS, ResourceTemplate() {
			    
			    WORDBusNumber(            
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,              
			      0x4946,                 
			      0x4858,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                 
			    )
			
			    
			    
			    DWORDMEMORY(              
			      ResourceProducer,       
			      PosDecode,
			      MinFixed,               
			      MaxFixed,               
			      Cacheable,
			      ReadWrite,
			      0x44594946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000              
			    )
			
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x4958,                 
			      0x0000,                 
			      0x0000,                 
			      0x0001                 
			    )
			
			    
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x4559,                 
			      0x0000,                 
			      0x0000,                 
			      0x0000                 
			   ) 
			
			    
			    
			    WORDIO(                   
			      ResourceProducer,       
			      MinFixed,               
			      MaxFixed,               
			      PosDecode,
			      EntireRange,
			      0x4946,                 
			      0x4659,                 
			      0x0000,                 
			      0x0000,                 
			      0x0000                 
			   ) 
			
			    
			    
			    
			    DWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x4A584946,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000,             
			      0x00000000             
			    )
			
			    
			    
			    
			    QWORDMemory(              
			      ResourceProducer,       
			      PosDecode,              
			      MinFixed,               
			      MaxFixed,               
			      NonCacheable,
			      ReadWrite,
			      0x4B584946,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000,          
			      0x00000000000          
			    )
			  }) 
			
			  
			  Method(_CRS, 0x0, NotSerialized) {
			    Return(P3RS)
			  }
			
			  
			  
			  
			  
			  
			  Device (MHP0) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "03-00")
			
			    
			    OperationRegion(MHP0, PCI_Config, 0xE, 2)
			    Field(MHP0,ByteAcc,NoLock,Preserve) {
			      STM6,7,
			    }
			  }
			
			  Device (MHP1) {
			    
			    Name(_ADR, 0x00050001)          
			    Name(_UID, "03-01")
			
			    
			    OperationRegion(MHP1, PCI_Config, 0x1E, 2)
			    Field(MHP1,ByteAcc,NoLock,Preserve) {
			      STM7,7,
			    }
			  }
			

			





			



















			
			  
			  Name(_EJD,"\\_SB.SCK3")   

	
	
	
	
			Device(SRP0) { 
				Name(_ADR, 0x00000000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR1A) { 
				Name(_ADR, 0x00010000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR1B) { 
				Name(_ADR, 0x00010001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR2A) { 
				Name(_ADR, 0x00020000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR2B) { 
				Name(_ADR, 0x00020001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR2C) { 
				Name(_ADR, 0x00020002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR2D) { 
				Name(_ADR, 0x00020003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR3A) { 
				Name(_ADR, 0x00030000)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR3B) { 
				Name(_ADR, 0x00030001)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR3C) { 
				Name(_ADR, 0x00030002)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(SR3D) { 
				Name(_ADR, 0x00030003)
	
	
	
	
				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  OperationRegion (MCTL, SystemMemory, 0x54584946, 0x04)
				  Field (MCTL, ByteAcc, NoLock, Preserve) {
				        ,   3,
				    HGPE,   1,
				        ,   7,
				        ,   8,
				        ,   8
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method (_INI, 0, NotSerialized) {
				    Store (0x01, HGPE)          
				  }
				
				  Name(_HPP, Package(){0x08, 0x40, 1, 0})
				
				  
				  
				  
				  Name(SHPC, 0x40)            
				
				  Name(SPDS, 0x040)           
				
				  Name(MRLS, 0x0)             
				  Name(CCOM, 0x010)           
				  Name(SPDC, 0x08)            
				  Name(MRLC, 0x04)            
				  Name(SPFD, 0x02)            
				  Name(SABP, 0x01)            
				
				  Name(SPOF, 0x10)            
				  Name(SPON, 0x0F)            
				
				  Name(ALMK, 0x1C)            
				  Name(ALON, 0x01)            
				  Name(ALBL, 0x02)            
				  Name(ALOF, 0x03)            
				
				  Name(PLMK, 0x13)            
				  Name(PLON, 0x04)            
				  Name(PLBL, 0x08)            
				  Name(PLOF, 0x0C)            
				
				  
				  
				  
				  
				  
				  
				  Name(HPEV, 0xF)             
				
				  
				  
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  OperationRegion(PPA4, PCI_Config, 0x00, 0x100)
				  Field(PPA4,ByteAcc,NoLock,Preserve) {
				    Offset (0xA0),            
				    ,4,
				    LDIS,1,                   
				    ,11,
				    Offset(0xA4),             
				    ATBP,1,                   
				    ,1,                       
				    MRSP,1,                   
				    ATIP,1,                   
				    PWIP,1,                   
				    HPSR,1,                   
				    HPCP,1,                   
				    ,12,
				    PSNM,13,                  
				    Offset(0xA8),             
				    ABIE,1,                   
				    PFIE,1,                   
				    MSIE,1,                   
				    PDIE,1,                   
				    CCIE,1,                   
				    HPIE,1,                   
				    SCTL,5,                   
				    ,5,                       
				    Offset(0xAA),             
				    SSTS,7,                   
				    ,1,
				    Offset (0xB0),            
				        ,   16,
				    PMES,   1,                
				    PMEP,   1,                
				        ,   14
				  }
				
				  
				  
				  
				  
				  Method (ATID, 0) {
				    Return (And (SCTL, 0x03))
				  }
				
				  Method (PWID, 0) {
				    Return (ShiftRight (And (SCTL, 0x0C), 2))
				  }
				
				  Method (PWCC, 0) {
				    Return (ShiftRight (And (SCTL, 0x10), 4))
				  }
				  
				  
				  
				  
				  Method (ABPS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x01, SSTS)
				    }
				    Return (And (SSTS, 0x01))
				  }
				  Method (PFDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x02, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x02), 1))
				  }
				  Method (MSCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x04, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x04), 2))
				  }
				  Method (PDCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x08, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x08), 3))
				  }
				  Method (CMCS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x10, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x10), 4))
				  }
				  Method (MSSC, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x20, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x20), 5))
				  }
				  Method (PRDS, 1) {
				    If (LEqual (Arg0, 1)) {
				      Or (SSTS, 0x40, SSTS)
				    }
				    Return (ShiftRight (And (SSTS, 0x40), 6))
				  }
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  
				  
				  
				  
				  
				  
				  Method(OSHP) {              
				    Store(SSTS, SSTS)         
				    Store(0x0, HGPE)          
				  }
				
				  
				  
				  
				  
				  
				  
				  Method(HPCC,1) {
				    Store(SCTL, Local0)           
				    Store(0,    Local1)           
				    If(LNotEqual(Arg0, Local0)) { 
				      Store(Arg0, SCTL)           
				      While(LAnd (LNot(CMCS(0)), LNotEqual(100, Local1))) { 
				                                                            
				        Store(0xFB, IO80)
				        Sleep(2)                  
				        Add(Local1, 2, Local1)
				      }
				      CMCS(1)                     
				    }
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(ATCM,1) {
				    Store(SCTL, Local0)           
				    And(Local0, ALMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, ALON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, ALBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, ALOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(PWCM,1){
				    Store(SCTL, Local0)           
				    And(Local0, PLMK, Local0)     
				    If(LEqual(Arg0, 0x1)){        
				      Or(Local0, PLON, Local0)    
				    }
				    If(LEqual(Arg0, 0x2)){        
				      Or(Local0, PLBL, Local0)    
				    }
				    If(LEqual(Arg0, 0x3)){        
				      Or(Local0, PLOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  Method(PWSL,1){
				    Store(SCTL, Local0)           
				    If(Arg0){                     
				      And(Local0, SPON, Local0)   
				    } Else {                      
				      Or(Local0, SPOF, Local0)    
				    }
				    HPCC(Local0)
				  }
				
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  Method(_OST,3,Serialized) {
				    Switch(And(Arg0,0xFF)) {      
				      Case(0x03) {                
				        Switch(ToInteger(Arg1)) {
				          Case(Package() {0x80, 0x81, 0x82, 0x83}) {
				            
				            
				            
				            If (Lnot(PWCC())) {     
				              PWCM(0x1)           
				              Store(0x1,ABIE)     
				            }
				          }
				        }
				      }
				    }
				  } 
				
				  
				  
				  
				  
				  
				  
				  
				  Method(EJ0L, 1){
				    Store(0xFF, IO80)
				    Store(SCTL, Local0)             
				    if( LNot( LEqual( ATID(), 1))) {  
				      And(Local0, ALMK, Local0)     
				      Or(Local0, ALBL, Local0)      
				    }
				    HPCC(Local0)                    
				
				    Store(SCTL, Local0)             
				    Or(Local0, SPOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, PLOF, Local0)        
				    HPCC(Local0)
				
				    Store(SCTL, Local0)             
				    Or(Local0, ALOF, Local0)        
				    HPCC(Local0)
				
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PMEH,1){                   
				    If(And(HPEV, SSTS)){            
				      If(ABPS(0)) {
				        ABPS(1)                     
				        Sleep(200)                  
				      }
				    }
				    Return (0xff)                   
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(HPEH,1){                   
				  
				    If(LNot(HPCP)) {                
				      Return(0xff)                  
				    }
				    Store(0xFE, IO80)
				    Sleep(100)
				    Store(0,CCIE)                   
				    If(And(HPEV, SSTS)){            
				      Store(0xFD, IO80)
				      Sleep(10)
				      Store(PPXH(0x0), Local0)      
				      Return(Local0)                
				    }
				    Else{
				      Return (0xff)                 
				    }
				    Store(0xFC, IO80)
				    Sleep(10)
				  }  
				
				  
				  
				  
				  
				  
				  
				  Method(PPXH,1){                     
				    
				    
				    
				    Sleep(200)                        
				    If(ABPS(0)) {                     
				      If(LNot(PRDS(0))) {             
				        Store(0x1, LDIS)              
				        PWSL(0x0)                     
				        PWCM(0x3)                     
				        
				        
				        
				        If(LEqual(MSSC(0),MRLS)) {    
				          ATCM(0x2)                   
				        } else {                      
				         ATCM(0x3)                    
				        }
				
				        ABPS(1)                       
				        Sleep(200)                    
				        Return(0xff)                  
				      }
				      
				      
				      
				      Store(0x0, ABIE)                
				                                      
				      ABPS(1)                         
				      Sleep(200)                      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      If(PWCC()) {                      
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            Store(0x1, ABIE)          
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(600)                
				            Store(0x0, LDIS)          
				            PWSL(0x1)                 
				            Sleep(500)                
				            
				            If(LNot(PFDS(0))) {                    
				              
				              PWCM(0x1)                         
				              
				              
				              Store(0x00, Local1)
				              Store(0x1, ABIE)                  
				            } Else {                            
				              
				              PWSL(0x0)                         
				              PWCM(0x3)                         
				              ATCM(0x1)                         
				              Store(0x1, LDIS)                  
				              
				              Store(0x03, Local1)               
				              Store(0x1, ABIE)                  
				            }                                   
				            ABPS(1)                           
				            Sleep(200)                        
				            Return(Local1)
				          }
				        }
				        Return(0xff)                  
				      } Else {                        
				        
				        ATCM(0x2)                     
				        Sleep(600)                    
				        Store(600, Local0)            
				        ABPS(1)                       
				        Sleep(200)                    
				        While(LNot(ABPS(0))) {           
				          Sleep(200)                  
				          Add(Local0, 200, Local0)
				          If(LEqual(5000, Local0)) {  
				            ABPS(1)                   
				            ATCM(0x3)                 
				            PWCM(0x2)                 
				            Sleep(200)                
				            Store(0x1, ABIE)          
				            Store(0x1, LDIS)          
				            PWCM(0x3)                 
				            Return (0x3)              
				          }
				        }
				        PWCM(0x1)                     
				        ABPS(1)                       
				        Sleep(200)                    
				        Store(0x1, ABIE)              
				        Return (0xff)                 
				      }
				    }  
				
				    If(PFDS(0)) {                     
				      PFDS(1)                         
				      PWSL(0x0)                       
				      PWCM(0x3)                       
				      ATCM(0x1)                       
				      Store(0x1, LDIS)                
				      Return(0x03)            
				    }  
				














































































				    If(PDCS(0)) {                   
				      PDCS(1)                       
				      If(LNot(PRDS(0))) {           
				        PWSL(0x0)                   
				        PWCM(0x3)                   
				        If(LEqual(MSSC(0),MRLS)) {  
				          ATCM(0x2)                 
				        } else {
				          ATCM(0x3)                 
				        }
				        Store(0x1, LDIS)            
				        Return(0xFF)                
				      } Else {                      
				        
				        Store(0x0, LDIS)            
				        ABPS(1)                 
				        Sleep(200)                  
				          Store(0x1, ABIE)          
				        Sleep(200)                  
				        Return(Local1)
				      }
				    }  
				    Return(0xff)    
				  }  
				  
				  
				  

				





				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  Method(SNUM, 0, Serialized) {
				    Store(PSNM, Local0)
				    Return(Local0)
				  }
				
				  Device(H000) {
				    Name(_ADR, 0x00000000)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H001) {
				    Name(_ADR, 0x00000001)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H002) {
				    Name(_ADR, 0x00000002)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H003) {
				    Name(_ADR, 0x00000003)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H004) {
				    Name(_ADR, 0x00000004)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H005) {
				    Name(_ADR, 0x00000005)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H006) {
				    Name(_ADR, 0x00000006)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }
				  Device(H007) {
				    Name(_ADR, 0x00000007)
				    Method(_SUN, 0) { Return(SNUM) } 
				  }

				





				



















				
				  
				  Name(_EJD,"\\_SB.PCI3")   

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				  OperationRegion(PXCS,PCI_Config,0x00,0xE0)
				  Field(PXCS,AnyAcc, NoLock, Preserve)
				  {      
				    Offset(0),
				    VDID, 32,
				  
				    Offset(0x54), 
				    , 6,
				    HPCE, 1,      
				    Offset(0x5A), 
				    ABPX, 1,      
				    , 2,
				    PDCX, 1,      
				    , 2,
				    PDSX, 1,      
				    , 1,
				  
				    Offset(0x60), 
				    , 16,
				    PMEX, 1,      
				
				    Offset(0xDC), 
				    , 31,
				    PMCS, 1       
				  }
				
				  Method(DEVS, 0x0, NotSerialized)
				  {
				    If(LEqual(VDID, 0xFFFFFFFF)){
				      Return(0x00)
				    } Else {
				      Return(0x0F)
				    }
				  }
				
				  
				  
				  
				  Method(HPME,0,Serialized)
				  {
				    
				    
				    
				    
				    If(PMEX) {
				
				      
				      
				      
				      Store(200,Local0)
				
				      While(Local0) {
				
				        
				        
				        
				        Store(1, PMEX)
				
				        
				        
				        
				        
				        If(PMEX) {
				          Decrement(Local0)
				        } else {
				          Store(0,Local0)
				        } 
				
				      } 
				
				      
				      
				      
				      Store(1, PMCS)
				
				    } 
				
				  } 
				
				  Method(_PRW, 0) { Return(GPRW(0x09, 4)) }	
				  
				
				
				
				
				
				
				
				
				
				
				
				
				

	
			} 
	
			Device(CB3A) { 
				Name(_ADR, 0x00040000)
			} 
	
			Device(CB3B) { 
				Name(_ADR, 0x00040001)
			} 
	
			Device(CB3C) { 
				Name(_ADR, 0x00040002)
			} 
	
			Device(CB3D) { 
				Name(_ADR, 0x00040003)
			} 
	
			Device(CB3E) { 
				Name(_ADR, 0x00040004)
			} 
	
			Device(CB3F) { 
				Name(_ADR, 0x00040005)
			} 
	
			Device(CB3G) { 
				Name(_ADR, 0x00040006)
			} 
	
			Device(CB3H) { 
				Name(_ADR, 0x00040007)
			} 
	
		}	
	}	
	
	
	
		Scope(\_GPE){
			Method(_L0B, 0) {
				Notify(\_SB.PCI0.IP2P, 0x02)
				Notify(\_SB.PWRB, 0x02)
			}
			Method(_L0D, 0) {
				Notify(\_SB.PCI0.XHCI, 0x02)
				Notify(\_SB.PCI0.EHC1, 0x02)
				Notify(\_SB.PCI0.EHC2, 0x02)
				Notify(\_SB.PWRB, 0x02)
			}
		}
	
	
	
	
		Scope(\_SB) {
			Device(PWRB){
				Name(_HID,EISAID("PNP0C0C"))
				Name(_UID, 0xAA)	
				Name(_STA, 0x0B)	
			}
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	








	Name(\_S0, Package(4){0x0,0x0,0,0})
	Name(\_S5, Package(4){0x7,0x0,0,0})



	Method(_PTS, 1) {
		If(Arg0) {	

			\_SB.PCI0.LPC0.SIO1.SIOS(Arg0)
			IPTS(Arg0)
			\_SB.PCI0.LPC0.SPMI.BMCS(Arg0)
		}
	}



	Method(_WAK, 1) {

		\_SB.PCI0.LPC0.SPMI.BMCW()
		IWAK(Arg0)
		\_SB.PCI0.LPC0.SIO1.SIOW(Arg0)

		Return(WAKP)
	}






	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB.PCI0.LPC0) {
	    
	    
	    
	    Device(SPMI) {
	        
	        
	        
	        Name(_HID, EISAID("IPI0001"))
	
	        
	        
	        
	        
	        Name(_STR, Unicode("IPMI_KCS"))
	
	        
	        
	        
	        Name(_UID, 0)
	
	        
	        
	        
	        OperationRegion (IPST, SystemIO, \ICDP, 1)  
	        Field (IPST, ByteAcc,NoLock,Preserve)
	        { STAS,8,}
	
	        
	        
	        
	        Method(_STA,0) { 
	            Store(STAS, Local0)
	            If( LEqual(Local0, 0xFF) ) {  
	                Return(0x0)
	            } Else {    
	                Return (0x0F)
	            }
	        } 
	
	        
	        
	        
	        Name(ICRS, ResourceTemplate() {
	            IO(Decode16, 0, 0, 0, 0, BAS0)
	            IO(Decode16, 0, 0, 0, 0, BAS1)
	        })
	
	        
	        
	        
	        Method(_CRS,0) {
	            if ( IDTP ) {
	                CreateWordField(ICRS, ^BAS0._MIN, IPDB)
	                CreateWordField(ICRS, ^BAS0._MAX, IPDH)
	                CreateByteField(ICRS, ^BAS0._LEN, IPDL)
	                Store(\IDTP, IPDB)  
	                Store(\IDTP, IPDH)  
	                Store(1, IPDL)  
	            } 
	            if (ICDP) {
	                CreateWordField(ICRS, ^BAS1._MIN, IPCB)
	                CreateWordField(ICRS, ^BAS1._MAX, IPCH)
	                CreateByteField(ICRS, ^BAS1._LEN, IPCL)
	                Store(\ICDP, IPCB)  
	                Store(\ICDP, IPCH)  
	                Store(1, IPCL)  
	            }
	
	            
	            
	            
	            Return(ICRS)
	        } 
	
	        
	        
	        
	        Method(_IFT) {
	            Return(0x01)    
	        }
	
	        
	        
	        
	        Method(_SRV) {
	            Return(SRVV)  
	        }
	
	        
	        
	        
	
	    } 
	
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB.PCI0.LPC0.SPMI) {
	    
	    
	    
	    OperationRegion (IOB2, SystemIO, 0xB2, 1)   
	    Field (IOB2, ByteAcc, NoLock, Preserve) {
	        SMIC,   8,  
	    }
	
	    
	    
	    
	    Method(_INI,0) {
	        Store(BSMI, SMIC)   
	    }
	
	    
	    
	    
	    Method (BMCS,1) {
	        Add(Arg0, BSMI, SMIC)   
	    }
	    
	    
	    
	    
	    Method (BMCW,0) {
	        Store(BSMI, SMIC)   
	    } 
	
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	


	





	



















	
	
	Scope (\_GPE) {
	



























































































	
	  
	  
	  
	  
	  
	  
	  OperationRegion (TCOS, SystemIO, 0x464, 2) 
	  Field (TCOS, ByteAcc, NoLock, WriteAsZeros) {
	         Offset (0x1),
	         , 1,
	         DSCI, 1,
	  }
	
	
	




































































































	  
	  
	  
	  
	  
	  
	  Method (_L01, 0, NotSerialized) {
	    
	    
	    
	    
	    
	    
	    



















	    
	      
	      
	      
	      Sleep (200)
	      Store (0x01, IO80)
	      Sleep (10)
	      Store (0,Local1)
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR1A.PMEP,1) ) {
	        Store(\_SB.PCI0.BR1A.PMEH(9), Local0)
	      } else {
	        Store (\_SB.PCI0.BR1A.HPEH(9), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x01, Local1)
	        Notify(\_SB.PCI0.BR1A.H000, Local0)
	        Notify(\_SB.PCI0.BR1A.H001, Local0)
	        Notify(\_SB.PCI0.BR1A.H002, Local0)
	        Notify(\_SB.PCI0.BR1A.H003, Local0)
	        Notify(\_SB.PCI0.BR1A.H004, Local0)
	        Notify(\_SB.PCI0.BR1A.H005, Local0)
	        Notify(\_SB.PCI0.BR1A.H006, Local0)
	        Notify(\_SB.PCI0.BR1A.H007, Local0)
	      }
	      
	      
	      If( LEqual(\_SB.PCI0.BR1B.PMEP,1) ) {
	        Store(\_SB.PCI0.BR1B.PMEH(9), Local0)
	      } else {
	        Store (\_SB.PCI0.BR1B.HPEH(9), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x02, Local1)
	        Notify(\_SB.PCI0.BR1B.H000, Local0)
	        Notify(\_SB.PCI0.BR1B.H001, Local0)
	        Notify(\_SB.PCI0.BR1B.H002, Local0)
	        Notify(\_SB.PCI0.BR1B.H003, Local0)
	        Notify(\_SB.PCI0.BR1B.H004, Local0)
	        Notify(\_SB.PCI0.BR1B.H005, Local0)
	        Notify(\_SB.PCI0.BR1B.H006, Local0)
	        Notify(\_SB.PCI0.BR1B.H007, Local0)
	      }
	      
	      
	      If( LEqual(\_SB.PCI0.BR2A.PMEP,1) ) {
	        Store(\_SB.PCI0.BR2A.PMEH(1), Local0)
	      } else {
	        Store (\_SB.PCI0.BR2A.HPEH(1), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x03, Local1)
	        Notify(\_SB.PCI0.BR2A.H000, Local0)
	        Notify(\_SB.PCI0.BR2A.H001, Local0)
	        Notify(\_SB.PCI0.BR2A.H002, Local0)
	        Notify(\_SB.PCI0.BR2A.H003, Local0)
	        Notify(\_SB.PCI0.BR2A.H004, Local0)
	        Notify(\_SB.PCI0.BR2A.H005, Local0)
	        Notify(\_SB.PCI0.BR2A.H006, Local0)
	        Notify(\_SB.PCI0.BR2A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR2B.PMEP,1) ) {
	        Store(\_SB.PCI0.BR2B.PMEH(2), Local0)
	      } else {
	        Store (\_SB.PCI0.BR2B.HPEH(2), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x04, Local1)
	        Notify(\_SB.PCI0.BR2B.H000, Local0)
	        Notify(\_SB.PCI0.BR2B.H001, Local0)
	        Notify(\_SB.PCI0.BR2B.H002, Local0)
	        Notify(\_SB.PCI0.BR2B.H003, Local0)
	        Notify(\_SB.PCI0.BR2B.H004, Local0)
	        Notify(\_SB.PCI0.BR2B.H005, Local0)
	        Notify(\_SB.PCI0.BR2B.H006, Local0)
	        Notify(\_SB.PCI0.BR2B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR2C.PMEP,1) ) {
	        Store(\_SB.PCI0.BR2C.PMEH(3), Local0)
	      } else {
	        Store (\_SB.PCI0.BR2C.HPEH(3), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x05, Local1)
	        Notify(\_SB.PCI0.BR2C.H000, Local0)
	        Notify(\_SB.PCI0.BR2C.H001, Local0)
	        Notify(\_SB.PCI0.BR2C.H002, Local0)
	        Notify(\_SB.PCI0.BR2C.H003, Local0)
	        Notify(\_SB.PCI0.BR2C.H004, Local0)
	        Notify(\_SB.PCI0.BR2C.H005, Local0)
	        Notify(\_SB.PCI0.BR2C.H006, Local0)
	        Notify(\_SB.PCI0.BR2C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR2D.PMEP,1) ) {
	        Store(\_SB.PCI0.BR2D.PMEH(4), Local0)
	      } else {
	        Store (\_SB.PCI0.BR2D.HPEH(4), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x06, Local1)
	        Notify(\_SB.PCI0.BR2D.H000, Local0)
	        Notify(\_SB.PCI0.BR2D.H001, Local0)
	        Notify(\_SB.PCI0.BR2D.H002, Local0)
	        Notify(\_SB.PCI0.BR2D.H003, Local0)
	        Notify(\_SB.PCI0.BR2D.H004, Local0)
	        Notify(\_SB.PCI0.BR2D.H005, Local0)
	        Notify(\_SB.PCI0.BR2D.H006, Local0)
	        Notify(\_SB.PCI0.BR2D.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR3A.PMEP,1) ) {
	        Store(\_SB.PCI0.BR3A.PMEH(5), Local0)
	      } else {
	        Store (\_SB.PCI0.BR3A.HPEH(5), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x07, Local1)
	        Notify(\_SB.PCI0.BR3A.H000, Local0)
	        Notify(\_SB.PCI0.BR3A.H001, Local0)
	        Notify(\_SB.PCI0.BR3A.H002, Local0)
	        Notify(\_SB.PCI0.BR3A.H003, Local0)
	        Notify(\_SB.PCI0.BR3A.H004, Local0)
	        Notify(\_SB.PCI0.BR3A.H005, Local0)
	        Notify(\_SB.PCI0.BR3A.H006, Local0)
	        Notify(\_SB.PCI0.BR3A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR3B.PMEP,1) ) {
	        Store(\_SB.PCI0.BR3B.PMEH(6), Local0)
	      } else {
	        Store (\_SB.PCI0.BR3B.HPEH(6), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x08, Local1)
	        Notify(\_SB.PCI0.BR3B.H000, Local0)
	        Notify(\_SB.PCI0.BR3B.H001, Local0)
	        Notify(\_SB.PCI0.BR3B.H002, Local0)
	        Notify(\_SB.PCI0.BR3B.H003, Local0)
	        Notify(\_SB.PCI0.BR3B.H004, Local0)
	        Notify(\_SB.PCI0.BR3B.H005, Local0)
	        Notify(\_SB.PCI0.BR3B.H006, Local0)
	        Notify(\_SB.PCI0.BR3B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR3C.PMEP,1) ) {
	        Store(\_SB.PCI0.BR3C.PMEH(7), Local0)
	      } else {
	        Store (\_SB.PCI0.BR3C.HPEH(7), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x09, Local1)
	        Notify(\_SB.PCI0.BR3C.H000, Local0)
	        Notify(\_SB.PCI0.BR3C.H001, Local0)
	        Notify(\_SB.PCI0.BR3C.H002, Local0)
	        Notify(\_SB.PCI0.BR3C.H003, Local0)
	        Notify(\_SB.PCI0.BR3C.H004, Local0)
	        Notify(\_SB.PCI0.BR3C.H005, Local0)
	        Notify(\_SB.PCI0.BR3C.H006, Local0)
	        Notify(\_SB.PCI0.BR3C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI0.BR3D.PMEP,1) ) {
	        Store(\_SB.PCI0.BR3D.PMEH(8), Local0)
	      } else {
	        Store (\_SB.PCI0.BR3D.HPEH(8), Local0) 
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0xA, Local1)
	        Notify(\_SB.PCI0.BR3D.H000, Local0)
	        Notify(\_SB.PCI0.BR3D.H001, Local0)
	        Notify(\_SB.PCI0.BR3D.H002, Local0)
	        Notify(\_SB.PCI0.BR3D.H003, Local0)
	        Notify(\_SB.PCI0.BR3D.H004, Local0)
	        Notify(\_SB.PCI0.BR3D.H005, Local0)
	        Notify(\_SB.PCI0.BR3D.H006, Local0)
	        Notify(\_SB.PCI0.BR3D.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QRP0.PMEP,1) ) {
	        Store(\_SB.PCI1.QRP0.PMEH(9), Local0)
	      } else {
	        Store (\_SB.PCI1.QRP0.HPEH(9), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x10, Local1)
	        Notify(\_SB.PCI1.QRP0.H000, Local0)
	        Notify(\_SB.PCI1.QRP0.H001, Local0)
	        Notify(\_SB.PCI1.QRP0.H002, Local0)
	        Notify(\_SB.PCI1.QRP0.H003, Local0)
	        Notify(\_SB.PCI1.QRP0.H004, Local0)
	        Notify(\_SB.PCI1.QRP0.H005, Local0)
	        Notify(\_SB.PCI1.QRP0.H006, Local0)
	        Notify(\_SB.PCI1.QRP0.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR2A.PMEP,1) ) {
	        Store(\_SB.PCI1.QR2A.PMEH(1), Local0)
	      } else {
	        Store (\_SB.PCI1.QR2A.HPEH(1), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x11, Local1)
	        Notify(\_SB.PCI1.QR2A.H000, Local0)
	        Notify(\_SB.PCI1.QR2A.H001, Local0)
	        Notify(\_SB.PCI1.QR2A.H002, Local0)
	        Notify(\_SB.PCI1.QR2A.H003, Local0)
	        Notify(\_SB.PCI1.QR2A.H004, Local0)
	        Notify(\_SB.PCI1.QR2A.H005, Local0)
	        Notify(\_SB.PCI1.QR2A.H006, Local0)
	        Notify(\_SB.PCI1.QR2A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR2B.PMEP,1) ) {
	        Store(\_SB.PCI1.QR2B.PMEH(2), Local0)
	      } else {
	        Store (\_SB.PCI1.QR2B.HPEH(2), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x12, Local1)
	        Notify(\_SB.PCI1.QR2B.H000, Local0)
	        Notify(\_SB.PCI1.QR2B.H001, Local0)
	        Notify(\_SB.PCI1.QR2B.H002, Local0)
	        Notify(\_SB.PCI1.QR2B.H003, Local0)
	        Notify(\_SB.PCI1.QR2B.H004, Local0)
	        Notify(\_SB.PCI1.QR2B.H005, Local0)
	        Notify(\_SB.PCI1.QR2B.H006, Local0)
	        Notify(\_SB.PCI1.QR2B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR2C.PMEP,1) ) {
	        Store(\_SB.PCI1.QR2C.PMEH(3), Local0)
	      } else {
	        Store (\_SB.PCI1.QR2C.HPEH(3), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x13, Local1)
	        Notify(\_SB.PCI1.QR2C.H000, Local0)
	        Notify(\_SB.PCI1.QR2C.H001, Local0)
	        Notify(\_SB.PCI1.QR2C.H002, Local0)
	        Notify(\_SB.PCI1.QR2C.H003, Local0)
	        Notify(\_SB.PCI1.QR2C.H004, Local0)
	        Notify(\_SB.PCI1.QR2C.H005, Local0)
	        Notify(\_SB.PCI1.QR2C.H006, Local0)
	        Notify(\_SB.PCI1.QR2C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR2D.PMEP,1) ) {
	        Store(\_SB.PCI1.QR2D.PMEH(4), Local0)
	      } else {
	        Store (\_SB.PCI1.QR2D.HPEH(4), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x14, Local1)
	        Notify(\_SB.PCI1.QR2D.H000, Local0)
	        Notify(\_SB.PCI1.QR2D.H001, Local0)
	        Notify(\_SB.PCI1.QR2D.H002, Local0)
	        Notify(\_SB.PCI1.QR2D.H003, Local0)
	        Notify(\_SB.PCI1.QR2D.H004, Local0)
	        Notify(\_SB.PCI1.QR2D.H005, Local0)
	        Notify(\_SB.PCI1.QR2D.H006, Local0)
	        Notify(\_SB.PCI1.QR2D.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR3A.PMEP,1) ) {
	        Store(\_SB.PCI1.QR3A.PMEH(5), Local0)
	      } else {
	        Store (\_SB.PCI1.QR3A.HPEH(5), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x15, Local1)
	        Notify(\_SB.PCI1.QR3A.H000, Local0)
	        Notify(\_SB.PCI1.QR3A.H001, Local0)
	        Notify(\_SB.PCI1.QR3A.H002, Local0)
	        Notify(\_SB.PCI1.QR3A.H003, Local0)
	        Notify(\_SB.PCI1.QR3A.H004, Local0)
	        Notify(\_SB.PCI1.QR3A.H005, Local0)
	        Notify(\_SB.PCI1.QR3A.H006, Local0)
	        Notify(\_SB.PCI1.QR3A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR3B.PMEP,1) ) {
	        Store(\_SB.PCI1.QR3B.PMEH(6), Local0)
	      } else {
	        Store (\_SB.PCI1.QR3B.HPEH(6), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x16, Local1)
	        Notify(\_SB.PCI1.QR3B.H000, Local0)
	        Notify(\_SB.PCI1.QR3B.H001, Local0)
	        Notify(\_SB.PCI1.QR3B.H002, Local0)
	        Notify(\_SB.PCI1.QR3B.H003, Local0)
	        Notify(\_SB.PCI1.QR3B.H004, Local0)
	        Notify(\_SB.PCI1.QR3B.H005, Local0)
	        Notify(\_SB.PCI1.QR3B.H006, Local0)
	        Notify(\_SB.PCI1.QR3B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR3C.PMEP,1) ) {
	        Store(\_SB.PCI1.QR3C.PMEH(7), Local0)
	      } else {
	        Store (\_SB.PCI1.QR3C.HPEH(7), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x17, Local1)
	        Notify(\_SB.PCI1.QR3C.H000, Local0)
	        Notify(\_SB.PCI1.QR3C.H001, Local0)
	        Notify(\_SB.PCI1.QR3C.H002, Local0)
	        Notify(\_SB.PCI1.QR3C.H003, Local0)
	        Notify(\_SB.PCI1.QR3C.H004, Local0)
	        Notify(\_SB.PCI1.QR3C.H005, Local0)
	        Notify(\_SB.PCI1.QR3C.H006, Local0)
	        Notify(\_SB.PCI1.QR3C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI1.QR3D.PMEP,1) ) {
	        Store(\_SB.PCI1.QR3D.PMEH(8), Local0)
	      } else {
	        Store (\_SB.PCI1.QR3D.HPEH(8), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x18, Local1)
	        Notify(\_SB.PCI1.QR3D.H000, Local0)
	        Notify(\_SB.PCI1.QR3D.H001, Local0)
	        Notify(\_SB.PCI1.QR3D.H002, Local0)
	        Notify(\_SB.PCI1.QR3D.H003, Local0)
	        Notify(\_SB.PCI1.QR3D.H004, Local0)
	        Notify(\_SB.PCI1.QR3D.H005, Local0)
	        Notify(\_SB.PCI1.QR3D.H006, Local0)
	        Notify(\_SB.PCI1.QR3D.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RRP0.PMEP,1) ) {
	        Store(\_SB.PCI2.RRP0.PMEH(9), Local0)
	      } else {
	        Store (\_SB.PCI2.RRP0.HPEH(9), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x20, Local1)
	        Notify(\_SB.PCI2.RRP0.H000, Local0)
	        Notify(\_SB.PCI2.RRP0.H001, Local0)
	        Notify(\_SB.PCI2.RRP0.H002, Local0)
	        Notify(\_SB.PCI2.RRP0.H003, Local0)
	        Notify(\_SB.PCI2.RRP0.H004, Local0)
	        Notify(\_SB.PCI2.RRP0.H005, Local0)
	        Notify(\_SB.PCI2.RRP0.H006, Local0)
	        Notify(\_SB.PCI2.RRP0.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR2A.PMEP,1) ) {
	        Store(\_SB.PCI2.RR2A.PMEH(1), Local0)
	      } else {
	        Store (\_SB.PCI2.RR2A.HPEH(1), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x21, Local1)
	        Notify(\_SB.PCI2.RR2A.H000, Local0)
	        Notify(\_SB.PCI2.RR2A.H001, Local0)
	        Notify(\_SB.PCI2.RR2A.H002, Local0)
	        Notify(\_SB.PCI2.RR2A.H003, Local0)
	        Notify(\_SB.PCI2.RR2A.H004, Local0)
	        Notify(\_SB.PCI2.RR2A.H005, Local0)
	        Notify(\_SB.PCI2.RR2A.H006, Local0)
	        Notify(\_SB.PCI2.RR2A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR2B.PMEP,1) ) {
	        Store(\_SB.PCI2.RR2B.PMEH(2), Local0)
	      } else {
	        Store (\_SB.PCI2.RR2B.HPEH(2), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x22, Local1)
	        Notify(\_SB.PCI2.RR2B.H000, Local0)
	        Notify(\_SB.PCI2.RR2B.H001, Local0)
	        Notify(\_SB.PCI2.RR2B.H002, Local0)
	        Notify(\_SB.PCI2.RR2B.H003, Local0)
	        Notify(\_SB.PCI2.RR2B.H004, Local0)
	        Notify(\_SB.PCI2.RR2B.H005, Local0)
	        Notify(\_SB.PCI2.RR2B.H006, Local0)
	        Notify(\_SB.PCI2.RR2B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR2C.PMEP,1) ) {
	        Store(\_SB.PCI2.RR2C.PMEH(3), Local0)
	      } else {
	        Store (\_SB.PCI2.RR2C.HPEH(3), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x23, Local1)
	        Notify(\_SB.PCI2.RR2C.H000, Local0)
	        Notify(\_SB.PCI2.RR2C.H001, Local0)
	        Notify(\_SB.PCI2.RR2C.H002, Local0)
	        Notify(\_SB.PCI2.RR2C.H003, Local0)
	        Notify(\_SB.PCI2.RR2C.H004, Local0)
	        Notify(\_SB.PCI2.RR2C.H005, Local0)
	        Notify(\_SB.PCI2.RR2C.H006, Local0)
	        Notify(\_SB.PCI2.RR2C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR2D.PMEP,1) ) {
	        Store(\_SB.PCI2.RR2D.PMEH(4), Local0)
	      } else {
	        Store (\_SB.PCI2.RR2D.HPEH(4), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x24, Local1)
	        Notify(\_SB.PCI2.RR2D.H000, Local0)
	        Notify(\_SB.PCI2.RR2D.H001, Local0)
	        Notify(\_SB.PCI2.RR2D.H002, Local0)
	        Notify(\_SB.PCI2.RR2D.H003, Local0)
	        Notify(\_SB.PCI2.RR2D.H004, Local0)
	        Notify(\_SB.PCI2.RR2D.H005, Local0)
	        Notify(\_SB.PCI2.RR2D.H006, Local0)
	        Notify(\_SB.PCI2.RR2D.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR3A.PMEP,1) ) {
	        Store(\_SB.PCI2.RR3A.PMEH(5), Local0)
	      } else {
	        Store (\_SB.PCI2.RR3A.HPEH(5), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x25, Local1)
	        Notify(\_SB.PCI2.RR3A.H000, Local0)
	        Notify(\_SB.PCI2.RR3A.H001, Local0)
	        Notify(\_SB.PCI2.RR3A.H002, Local0)
	        Notify(\_SB.PCI2.RR3A.H003, Local0)
	        Notify(\_SB.PCI2.RR3A.H004, Local0)
	        Notify(\_SB.PCI2.RR3A.H005, Local0)
	        Notify(\_SB.PCI2.RR3A.H006, Local0)
	        Notify(\_SB.PCI2.RR3A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR3B.PMEP,1) ) {
	        Store(\_SB.PCI2.RR3B.PMEH(6), Local0)
	      } else {
	        Store (\_SB.PCI2.RR3B.HPEH(6), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x26, Local1)
	        Notify(\_SB.PCI2.RR3B.H000, Local0)
	        Notify(\_SB.PCI2.RR3B.H001, Local0)
	        Notify(\_SB.PCI2.RR3B.H002, Local0)
	        Notify(\_SB.PCI2.RR3B.H003, Local0)
	        Notify(\_SB.PCI2.RR3B.H004, Local0)
	        Notify(\_SB.PCI2.RR3B.H005, Local0)
	        Notify(\_SB.PCI2.RR3B.H006, Local0)
	        Notify(\_SB.PCI2.RR3B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR3C.PMEP,1) ) {
	        Store(\_SB.PCI2.RR3C.PMEH(7), Local0)
	      } else {
	        Store (\_SB.PCI2.RR3C.HPEH(7), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x27, Local1)
	        Notify(\_SB.PCI2.RR3C.H000, Local0)
	        Notify(\_SB.PCI2.RR3C.H001, Local0)
	        Notify(\_SB.PCI2.RR3C.H002, Local0)
	        Notify(\_SB.PCI2.RR3C.H003, Local0)
	        Notify(\_SB.PCI2.RR3C.H004, Local0)
	        Notify(\_SB.PCI2.RR3C.H005, Local0)
	        Notify(\_SB.PCI2.RR3C.H006, Local0)
	        Notify(\_SB.PCI2.RR3C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI2.RR3D.PMEP,1) ) {
	        Store(\_SB.PCI2.RR3D.PMEH(8), Local0)
	      } else {
	        Store (\_SB.PCI2.RR3D.HPEH(8), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x28, Local1)
	        Notify(\_SB.PCI2.RR3D.H000, Local0)
	        Notify(\_SB.PCI2.RR3D.H001, Local0)
	        Notify(\_SB.PCI2.RR3D.H002, Local0)
	        Notify(\_SB.PCI2.RR3D.H003, Local0)
	        Notify(\_SB.PCI2.RR3D.H004, Local0)
	        Notify(\_SB.PCI2.RR3D.H005, Local0)
	        Notify(\_SB.PCI2.RR3D.H006, Local0)
	        Notify(\_SB.PCI2.RR3D.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SRP0.PMEP,1) ) {
	        Store(\_SB.PCI3.SRP0.PMEH(0), Local0)
	      } else {
	        Store (\_SB.PCI3.SRP0.HPEH(0), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x30, Local1)
	        Notify(\_SB.PCI3.SRP0.H000, Local0)
	        Notify(\_SB.PCI3.SRP0.H001, Local0)
	        Notify(\_SB.PCI3.SRP0.H002, Local0)
	        Notify(\_SB.PCI3.SRP0.H003, Local0)
	        Notify(\_SB.PCI3.SRP0.H004, Local0)
	        Notify(\_SB.PCI3.SRP0.H005, Local0)
	        Notify(\_SB.PCI3.SRP0.H006, Local0)
	        Notify(\_SB.PCI3.SRP0.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR2A.PMEP,1) ) {
	        Store(\_SB.PCI3.SR2A.PMEH(1), Local0)
	      } else {
	        Store (\_SB.PCI3.SR2A.HPEH(1), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x31, Local1)
	        Notify(\_SB.PCI3.SR2A.H000, Local0)
	        Notify(\_SB.PCI3.SR2A.H001, Local0)
	        Notify(\_SB.PCI3.SR2A.H002, Local0)
	        Notify(\_SB.PCI3.SR2A.H003, Local0)
	        Notify(\_SB.PCI3.SR2A.H004, Local0)
	        Notify(\_SB.PCI3.SR2A.H005, Local0)
	        Notify(\_SB.PCI3.SR2A.H006, Local0)
	        Notify(\_SB.PCI3.SR2A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR2B.PMEP,1) ) {
	        Store(\_SB.PCI3.SR2B.PMEH(2), Local0)
	      } else {
	        Store (\_SB.PCI3.SR2B.HPEH(2), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x32, Local1)
	        Notify(\_SB.PCI3.SR2B.H000, Local0)
	        Notify(\_SB.PCI3.SR2B.H001, Local0)
	        Notify(\_SB.PCI3.SR2B.H002, Local0)
	        Notify(\_SB.PCI3.SR2B.H003, Local0)
	        Notify(\_SB.PCI3.SR2B.H004, Local0)
	        Notify(\_SB.PCI3.SR2B.H005, Local0)
	        Notify(\_SB.PCI3.SR2B.H006, Local0)
	        Notify(\_SB.PCI3.SR2B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR2C.PMEP,1) ) {
	        Store(\_SB.PCI3.SR2C.PMEH(3), Local0)
	      } else {
	        Store (\_SB.PCI3.SR2C.HPEH(3), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x33, Local1)
	        Notify(\_SB.PCI3.SR2C.H000, Local0)
	        Notify(\_SB.PCI3.SR2C.H001, Local0)
	        Notify(\_SB.PCI3.SR2C.H002, Local0)
	        Notify(\_SB.PCI3.SR2C.H003, Local0)
	        Notify(\_SB.PCI3.SR2C.H004, Local0)
	        Notify(\_SB.PCI3.SR2C.H005, Local0)
	        Notify(\_SB.PCI3.SR2C.H006, Local0)
	        Notify(\_SB.PCI3.SR2C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR2D.PMEP,1) ) {
	        Store(\_SB.PCI3.SR2D.PMEH(4), Local0)
	      } else {
	        Store (\_SB.PCI3.SR2D.HPEH(4), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x34, Local1)
	        Notify(\_SB.PCI3.SR2D.H000, Local0)
	        Notify(\_SB.PCI3.SR2D.H001, Local0)
	        Notify(\_SB.PCI3.SR2D.H002, Local0)
	        Notify(\_SB.PCI3.SR2D.H003, Local0)
	        Notify(\_SB.PCI3.SR2D.H004, Local0)
	        Notify(\_SB.PCI3.SR2D.H005, Local0)
	        Notify(\_SB.PCI3.SR2D.H006, Local0)
	        Notify(\_SB.PCI3.SR2D.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR3A.PMEP,1) ) {
	        Store(\_SB.PCI3.SR3A.PMEH(5), Local0)
	      } else {
	        Store (\_SB.PCI3.SR3A.HPEH(5), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x35, Local1)
	        Notify(\_SB.PCI3.SR3A.H000, Local0)
	        Notify(\_SB.PCI3.SR3A.H001, Local0)
	        Notify(\_SB.PCI3.SR3A.H002, Local0)
	        Notify(\_SB.PCI3.SR3A.H003, Local0)
	        Notify(\_SB.PCI3.SR3A.H004, Local0)
	        Notify(\_SB.PCI3.SR3A.H005, Local0)
	        Notify(\_SB.PCI3.SR3A.H006, Local0)
	        Notify(\_SB.PCI3.SR3A.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR3B.PMEP,1) ) {
	        Store(\_SB.PCI3.SR3B.PMEH(6), Local0)
	      } else {
	        Store (\_SB.PCI3.SR3B.HPEH(6), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x36, Local1)
	        Notify(\_SB.PCI3.SR3B.H000, Local0)
	        Notify(\_SB.PCI3.SR3B.H001, Local0)
	        Notify(\_SB.PCI3.SR3B.H002, Local0)
	        Notify(\_SB.PCI3.SR3B.H003, Local0)
	        Notify(\_SB.PCI3.SR3B.H004, Local0)
	        Notify(\_SB.PCI3.SR3B.H005, Local0)
	        Notify(\_SB.PCI3.SR3B.H006, Local0)
	        Notify(\_SB.PCI3.SR3B.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR3C.PMEP,1) ) {
	        Store(\_SB.PCI3.SR3C.PMEH(7), Local0)
	      } else {
	        Store (\_SB.PCI3.SR3C.HPEH(7), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x37, Local1)
	        Notify(\_SB.PCI3.SR3C.H000, Local0)
	        Notify(\_SB.PCI3.SR3C.H001, Local0)
	        Notify(\_SB.PCI3.SR3C.H002, Local0)
	        Notify(\_SB.PCI3.SR3C.H003, Local0)
	        Notify(\_SB.PCI3.SR3C.H004, Local0)
	        Notify(\_SB.PCI3.SR3C.H005, Local0)
	        Notify(\_SB.PCI3.SR3C.H006, Local0)
	        Notify(\_SB.PCI3.SR3C.H007, Local0)
	      }
	    
	      
	      
	      If( LEqual(\_SB.PCI3.SR3D.PMEP,1) ) {
	        Store(\_SB.PCI3.SR3D.PMEH(8), Local0)
	      } else {
	        Store (\_SB.PCI3.SR3D.HPEH(8), Local0)
	      }
	      If(Lnot(LEqual(Local0,0xFF))) {
	        Store(0x38, Local1)
	        Notify(\_SB.PCI3.SR3D.H000, Local0)
	        Notify(\_SB.PCI3.SR3D.H001, Local0)
	        Notify(\_SB.PCI3.SR3D.H002, Local0)
	        Notify(\_SB.PCI3.SR3D.H003, Local0)
	        Notify(\_SB.PCI3.SR3D.H004, Local0)
	        Notify(\_SB.PCI3.SR3D.H005, Local0)
	        Notify(\_SB.PCI3.SR3D.H006, Local0)
	        Notify(\_SB.PCI3.SR3D.H007, Local0)
	      }
	    
	      
	      If (Lnot (LEqual(Local0, 0))) {
	        
	        
	        If( LEqual(Local1, 0x01)) {
	          Store(1, \_SB.PCI0.BR1A.PMES)
	          Store(1, \_SB.PCI0.BR1A.PMEP)
	        }
	        If( LEqual(Local1, 0x02)) {
	          Store(1, \_SB.PCI0.BR1B.PMES)
	          Store(1, \_SB.PCI0.BR1B.PMEP)
	        }
	        If( LEqual(Local1, 0x03)) {
	          Store(1, \_SB.PCI0.BR2A.PMES)
	          Store(1, \_SB.PCI0.BR2A.PMEP)
	        }
	        If( LEqual(Local1, 0x04)) {
	          Store(1, \_SB.PCI0.BR2B.PMES)
	          Store(1, \_SB.PCI0.BR2B.PMEP)
	        }
	        If( LEqual(Local1, 0x05)) {
	          Store(1, \_SB.PCI0.BR2C.PMES)
	          Store(1, \_SB.PCI0.BR2C.PMEP)
	        }
	        If( LEqual(Local1, 0x06)) {
	          Store(1, \_SB.PCI0.BR2D.PMES)
	          Store(1, \_SB.PCI0.BR2D.PMEP)
	        }
	        If( LEqual(Local1, 0x07)) {
	          Store(1, \_SB.PCI0.BR3A.PMES)
	          Store(1, \_SB.PCI0.BR3A.PMEP)
	        }
	        If( LEqual(Local1, 0x08)) {
	          Store(1, \_SB.PCI0.BR3B.PMES)
	          Store(1, \_SB.PCI0.BR3B.PMEP)
	        }
	        If( LEqual(Local1, 0x09)) {
	          Store(1, \_SB.PCI0.BR3C.PMES)
	          Store(1, \_SB.PCI0.BR3C.PMEP)
	        }
	        If( LEqual(Local1, 0x0A)) {
	          Store(1, \_SB.PCI0.BR3D.PMES)
	          Store(1, \_SB.PCI0.BR3D.PMEP)
	        }
	    
	        If( LEqual(Local1, 0x10)) {
	          Store(1, \_SB.PCI1.QRP0.PMES)
	          Store(1, \_SB.PCI1.QRP0.PMEP)
	        }
	        If( LEqual(Local1, 0x11)) {
	          Store(1, \_SB.PCI1.QR2A.PMES)
	          Store(1, \_SB.PCI1.QR2A.PMEP)
	        }
	        If( LEqual(Local1, 0x12)) {
	          Store(1, \_SB.PCI1.QR2B.PMES)
	          Store(1, \_SB.PCI1.QR2B.PMEP)
	        }
	        If( LEqual(Local1, 0x13)) {
	          Store(1, \_SB.PCI1.QR2C.PMES)
	          Store(1, \_SB.PCI1.QR2C.PMEP)
	        }
	        If( LEqual(Local1, 0x14)) {
	          Store(1, \_SB.PCI1.QR2D.PMES)
	          Store(1, \_SB.PCI1.QR2D.PMEP)
	        }
	        If( LEqual(Local1, 0x15)) {
	          Store(1, \_SB.PCI1.QR3A.PMES)
	          Store(1, \_SB.PCI1.QR3A.PMEP)
	        }
	        If( LEqual(Local1, 0x16)) {
	          Store(1, \_SB.PCI1.QR3B.PMES)
	          Store(1, \_SB.PCI1.QR3B.PMEP)
	        }
	        If( LEqual(Local1, 0x17)) {
	          Store(1, \_SB.PCI1.QR3C.PMES)
	          Store(1, \_SB.PCI1.QR3C.PMEP)
	        }
	        If( LEqual(Local1, 0x18)) {
	          Store(1, \_SB.PCI1.QR3D.PMES)
	          Store(1, \_SB.PCI1.QR3D.PMEP)
	        }
	    
	        If( LEqual(Local1, 0x20)) {
	          Store(1, \_SB.PCI2.RRP0.PMES)
	          Store(1, \_SB.PCI2.RRP0.PMEP)
	        }
	        If( LEqual(Local1, 0x21)) {
	          Store(1, \_SB.PCI2.RR2A.PMES)
	          Store(1, \_SB.PCI2.RR2A.PMEP)
	        }
	        If( LEqual(Local1, 0x22)) {
	          Store(1, \_SB.PCI2.RR2B.PMES)
	          Store(1, \_SB.PCI2.RR2B.PMEP)
	        }
	        If( LEqual(Local1, 0x23)) {
	          Store(1, \_SB.PCI2.RR2C.PMES)
	          Store(1, \_SB.PCI2.RR2C.PMEP)
	        }
	        If( LEqual(Local1, 0x24)) {
	          Store(1, \_SB.PCI2.RR2D.PMES)
	          Store(1, \_SB.PCI2.RR2D.PMEP)
	        }
	        If( LEqual(Local1, 0x25)) {
	          Store(1, \_SB.PCI2.RR3A.PMES)
	          Store(1, \_SB.PCI2.RR3A.PMEP)
	        }
	        If( LEqual(Local1, 0x26)) {
	          Store(1, \_SB.PCI2.RR3B.PMES)
	          Store(1, \_SB.PCI2.RR3B.PMEP)
	        }
	        If( LEqual(Local1, 0x27)) {
	          Store(1, \_SB.PCI2.RR3C.PMES)
	          Store(1, \_SB.PCI2.RR3C.PMEP)
	        }
	        If( LEqual(Local1, 0x28)) {
	          Store(1, \_SB.PCI2.RR3D.PMES)
	          Store(1, \_SB.PCI2.RR3D.PMEP)
	        }
	    
	        If( LEqual(Local1, 0x30)) {
	          Store(1, \_SB.PCI3.SRP0.PMES)
	          Store(1, \_SB.PCI3.SRP0.PMEP)
	        }
	        If( LEqual(Local1, 0x31)) {
	          Store(1, \_SB.PCI3.SR2A.PMES)
	          Store(1, \_SB.PCI3.SR2A.PMEP)
	        }
	        If( LEqual(Local1, 0x32)) {
	          Store(1, \_SB.PCI3.SR2B.PMES)
	          Store(1, \_SB.PCI3.SR2B.PMEP)
	        }
	        If( LEqual(Local1, 0x33)) {
	          Store(1, \_SB.PCI3.SR2C.PMES)
	          Store(1, \_SB.PCI3.SR2C.PMEP)
	        }
	        If( LEqual(Local1, 0x34)) {
	          Store(1, \_SB.PCI3.SR2D.PMES)
	          Store(1, \_SB.PCI3.SR2D.PMEP)
	        }
	        If( LEqual(Local1, 0x35)) {
	          Store(1, \_SB.PCI3.SR3A.PMES)
	          Store(1, \_SB.PCI3.SR3A.PMEP)
	        }
	        If( LEqual(Local1, 0x36)) {
	          Store(1, \_SB.PCI3.SR3B.PMES)
	          Store(1, \_SB.PCI3.SR3B.PMEP)
	        }
	        If( LEqual(Local1, 0x37)) {
	          Store(1, \_SB.PCI3.SR3C.PMES)
	          Store(1, \_SB.PCI3.SR3C.PMEP)
	        }
	        If( LEqual(Local1, 0x38)) {
	          Store(1, \_SB.PCI3.SR3D.PMES)
	          Store(1, \_SB.PCI3.SR3D.PMEP)
	        }
	    
	        Store(0x01,PEES)               
	        Store(0x00,PMEE)               
	      }

	    





	    



















	    
	    




































	  }
	
	
	  Method (_L09, 0, NotSerialized) {
	    
	    
	    
	    
	    
	    If(LNotEqual(\_SB.PCI0.RP01.DEVS(),0))
	    {
	      \_SB.PCI0.RP01.HPME()
	      Notify(\_SB.PCI0.RP01, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.RP02.DEVS(),0))
	    {
	      \_SB.PCI0.RP02.HPME()
	      Notify(\_SB.PCI0.RP02, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.RP03.DEVS(),0))
	    {
	      \_SB.PCI0.RP03.HPME()
	      Notify(\_SB.PCI0.RP03, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.RP04.DEVS(),0))
	    {
	      \_SB.PCI0.RP04.HPME()
	      Notify(\_SB.PCI0.RP04, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.RP05.DEVS(),0))
	    {
	      \_SB.PCI0.RP05.HPME()
	      Notify(\_SB.PCI0.RP05, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.RP06.DEVS(),0))
	    {
	      \_SB.PCI0.RP06.HPME()
	      Notify(\_SB.PCI0.RP06, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.RP07.DEVS(),0))
	    {
	      \_SB.PCI0.RP07.HPME()
	      Notify(\_SB.PCI0.RP07, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.RP08.DEVS(),0))
	    {
	      \_SB.PCI0.RP08.HPME()
	      Notify(\_SB.PCI0.RP08, 0x02)
	    }
	
	    
	    
	    
	    
	    If(LNotEqual(\_SB.PCI0.BR1A.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR1A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR1B.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR1B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR2A.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR2A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR2B.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR2B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR2C.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR2C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR2D.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR2D, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR3A.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR3A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR3B.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR3B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR3C.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR3C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI0.BR3D.DEVS(),0))
	    {
	      Notify(\_SB.PCI0.BR3D, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QRP0.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QRP0, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR1A.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR1A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR1B.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR1B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR2A.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR2A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR2B.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR2B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR2C.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR2C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR2D.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR2D, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR3A.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR3A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR3B.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR3B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR3C.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR3C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI1.QR3D.DEVS(),0))
	    {
	      Notify(\_SB.PCI1.QR3D, 0x02)
	    }
	
	
	    If(LNotEqual(\_SB.PCI2.RRP0.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RRP0, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR1A.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR1A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR1B.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR1B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR2A.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR2A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR2B.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR2B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR2C.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR2C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR2D.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR2D, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR3A.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR3A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR3B.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR3B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR3C.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR3C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI2.RR3D.DEVS(),0))
	    {
	      Notify(\_SB.PCI2.RR3D, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SRP0.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SRP0, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR1A.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR1A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR1B.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR1B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR2A.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR2A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR2B.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR2B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR2C.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR2C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR2D.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR2D, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR3A.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR3A, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR3B.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR3B, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR3C.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR3C, 0x02)
	    }
	
	    If(LNotEqual(\_SB.PCI3.SR3D.DEVS(),0))
	    {
	      Notify(\_SB.PCI3.SR3D, 0x02)
	    }
	
	  }
	}


	





	



















	




	
	    
	Scope(\_SB) {   
	    
	    
	    
	
	    Name(\PCAP, 0x00010000)
	    Name(\PSSW, 0x9b)
	    Name(\HWPS, 0)
	    Name(\POSC, 0)
	    Name(\_SB_.NITL, 0)
	    
	
	    External (WSIC)
	    External (WSIS)
	    External (WSIB)
	    External (WSID)
	    External (WSIF)
	    External (WSTS)
	    External (PLAT, FieldUnitObj)
	
	    
	    
	    
	    OperationRegion (CMOS, SystemIO, 0x70, 4)
	    Field (CMOS, ByteAcc, NoLock, Preserve)
	    {
	        IDX0, 7,
	        , 1,
	        DAT0, 8,
	        IDX1, 7,
	        , 1,
	        DAT1, 8
	    }
	
	    IndexField (IDX1, DAT1, ByteAcc, NoLock, Preserve)
	    {
	        Offset (0x1B),    
	        WIWH, 8,          
	    }
	
	    
	    
	    
	    Method (SWWE,1)   
	    {
	        Store(0, \_SB.SMIS)         
	        Store(Arg0, \_SB.SMIC)      
	                                    
	    } 
	
	    
	    
	    
	    
	    Device (WERR) {
	        Name(_HID, EISAID("PNP0C33"))   
	
	        Name (_UID, 0)
	
	        Method(_STA){
	            
	            If (LGreaterEqual (\_SB.OSYS, 12)) {                                \
	                If(LAnd(And(\PCAP,0x00010000),LEqual(WHEA,0x1))) {
	                    Return(0x0F)
	                }
	            }
	            Return(0x00)
	        }
	    }
	
	    
	    
	    
	    
	    
	    
	
	    
	    
	    
	    
	    
	    Method(_OSC , 4) {
	        
	        
	        
	        Store(Arg3,Local0)
	
	        
	        CreateDWordField(Local0,0,CPB1)
	        CreateDWordField(Local0,4,CPB2)
	        
	
	        
	        If(LEqual(Arg0, ToUUID("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c"))) {
			       
	              
	 
	                If(And(CPB2, 0x01)) { 
	                    
	                    If(LAnd(And(\PCAP,0x00010000),LEqual(WHEA,0x1)))
	                    {
	                        
	                        If(Not(And(CPB1,1))) {   
	                            SWWE(0x9E) 
	                        }
	                    } else {
	                        And(CPB2, 0xfffffffe,CPB2)
	                        Or(CPB1, 0x10, CPB1)        
	                        If(Not(And(CPB1,1))) {   
	                            
	                        }
	                    }
	                }
	        
	            Return (Local0)
	      } Else {
	
	        
	        If(LEqual(Arg0, ToUUID("0811B06E-4A27-44F9-8D60-3CBBC22E7B48"))) {
	              
	
	         If (\_OSI ("Windows 2015")) {				
	               If(LEqual(And(CPB2, 0x00000060), 0x00000060)) {     
					Store(1,HWPS)
					
	               }
	              }
	          			
	           Else {						
	               If(LEqual(And(CPB2, 0x00000060), 0x00000020)) {	   
					Store(1,HWPS)
					
	               }
	              }
	
	
	              
	              If(LEqual(And(CPB2, 0x00001000), 0x00001000)) {
					Store(1,POSC)
				  }else
				  {
				  if(LOr(LOr(LEqual(0x13, \PLAT), LEqual(0x16, \PLAT)), LOr(LEqual(0x07, \PLAT), LEqual(0x14, \PLAT))))
				  {
	                                  if (LEqual(0, \NITR))
	                                  {
						if(LEqual(\_SB_.NITL,0))
						{
							Store(1,\_SB_.NITL)
							LoadTable("NITR", "ALASKA", "A M I ",,,) 
					
						}
					  }
				  }
				 }
	              
	            If(And(CPB2,0x10)) { 
	                
	                If(LAnd(And(\PCAP,0x00010000),LEqual(WHEA,0x1))) {
	                    
	                    
	                    
	                    Store(0x1b, WIWH)
	
	                    
	                    If(Not(And(CPB1,1))) {   
	                        SWWE(0x9E) 
	                    }
	              } Else {
	                    And(CPB2, 0xffffffef, CPB2)
	                    Or(CPB1, 0x10, CPB1)        
	                    If(Not(And(CPB1,1))) {   
	                        
	                    }
	                }
	            }
	            Return (Local0)
	          } Else {
	
	            If (\_OSI ("Windows 2009"))
	            {
	                If(LOr(LOr(LEqual(0x13, \PLAT), LEqual(0x16, \PLAT)), LOr(LEqual(0x07, \PLAT), LEqual(0x14, \PLAT))))
	                {
	                    if (LEqual(0, \NITR))
	                    {
	                        if(LEqual(\_SB_.NITL,0))
	                        {
				    Store(1,\_SB_.NITL)
				    LoadTable("NITR", "ALASKA", "A M I ",,,)
				}
	                    }
	                }
	            }
	
	          
	          
	          
	          
	          
	          Return (\_SB.PCI0._OSC (Arg0, Arg1, Arg2, Arg3))
	        }
	      }
	    }
	
	    Device(SRIO) {
	        
	        
	        Name(_HID, "PNP0C14")
	        Name(_UID, 0x0)
	        
	        
	        
	
	        Name(_WDG, Buffer() {
	            
	            0xf2, 0xf9, 0x7a, 0x0e, 0xa1, 0x44, 0x6f, 0x4c,0xA4,0xB0,0xA7,0x67,0x84,0x80,0xDA,0x61,
	            0x41, 0x41,                   
	            0x01,                         
	            0x02,                         
	            }
	        )
	
	        Method (_STA) {
	            Return (0xf)
	        }
	
	        Method (WMAA, 3) {
	            
	            
	            
	            
	            
	            
	            
	            
	            
	            
	
	            
	            Store(Arg2,Local0)
	
	            
	            CreateWordField(Local0,0,CPW0)
	            CreateByteField(Local0,2,CPB2)
	
	            CreateByteField(Local0,4,CPB4)
	            CreateByteField(Local0,5,CPB5)
	
	            Store(CPW0,WSIS)
	            Store(CPB2,WSIB)
	
	            Store(CPB4,WSIF)
	
	            
	            
	            if(LEqual (Arg1, 1) ) {
	                Store(01, WSIC)
	                SWWE(0x9B)
	            }
	
	            
	            
	            if(LEqual (Arg1, 2) ) {
	                Store(02, WSIC)
	                SWWE(0x9B)
	            }
	
	            
	            
	            if(LEqual (Arg1, 3) ) {
	                Store(03, WSIC)
	                SWWE(0x9B)
	            }
	
	            
	            
	            
	            
	        Return(WSTS)
	        }
	    }
	} 


	
	External(CRBI)
	    Device(\_SB.TPM)
		{
	        Method(_HID, 0){		
			    If(TCMF)		
				    {
				    	Return(EISAID("ZIT0101"))
					}	
			    Else
				    {
					  If(LEqual(TTDP, 0)){
	                    Return(EISAID("PNP0C31"))
	                  }else{
	                     Return("MSFT0101")
	                  }
					}
		    }
	
	
		    Method(_STR,0)
	        {
	           If(LEqual(TTDP, 0)){
	                Return (Unicode ("TPM 1.2 Device"))
	           }else {
	                Return (Unicode ("TPM 2.0 Device"))
	           }
	        }
	        
		    Name(_UID,0x01)
		    
	      Name(CRST,ResourceTemplate()
		  {
	            Memory32Fixed (ReadOnly, 0x00000000, 0x1000,PCRB)
	            Memory32Fixed (ReadOnly, 0xFED70000, 0x1000,PCRC)
		  })
		  
		  Name(CRSD,ResourceTemplate()
	      {
	            Memory32Fixed (ReadOnly, 0xFED40000, 0x1000, PCRE)
	      })
	
	      Name(CRSI,ResourceTemplate()
		  {
	            Memory32Fixed (ReadOnly, 0xFED40000, 0x1000,PCRS)            
		  })
	      
	      
	      
	      Method(_CRS,0,Serialized)
		  {
	         If(LEqual(AMDT, 1))
	         {
	             CreateDWordField(CRST, ^PCRB._BAS, MTFB) 
	             CreateDWordField(CRST, ^PCRB._LEN, LTFB) 
	                   
	             Store(TPMB, MTFB)
	             Store(0x1000, LTFB)
	
	             CreateDWordField(CRST, ^PCRC._BAS, MTFC) 
	             CreateDWordField(CRST, ^PCRC._LEN, LTFC) 
	               
	             Store(TPMC, MTFC)
	             Store(0x1000, LTFC)
	            
	             Return (CRST)
	         }Else{
	            If(LEqual(DTPT,1))
	            {
	               CreateDWordField(CRSD, ^PCRE._BAS, MTFE) 
	               CreateDWordField(CRSD, ^PCRE._LEN, LTFE) 
	               
	               Store(0x0FED40000, MTFE)
	               Store(0x00000880, LTFE)
	                              
	               Return(CRSD)
	            }            
	            ElseIf(LEqual(TTPF, 1))
	            {
	               CreateDWordField(CRSI, ^PCRS._BAS, MTFD) 
	               CreateDWordField(CRSI, ^PCRS._LEN, LTFD) 
	               
	               Store(0x0FED40000, MTFD)
	               Store(0x00005000, LTFD)
	               Return (CRSI)
	            }ElseIf(LEqual(TTPF, 0))
	            {
	               CreateDWordField(CRSI, ^PCRS._BAS, MTFF) 
	               Store(TPMM, MTFF)
	               Return (CRSI)
	            }
	
	            Store(0x00000000, MTFE)
	            Store(0x00000000, LTFE)
	            Return (CRSI)  
	         }
		  }
	
		  OperationRegion(TMMB, SystemMemory, 0x0FED40000, 0x5000)
		  Field(TMMB, ByteAcc, Lock, Preserve)
		  {
		    Offset(0x04),
		    LCST, 32,          
		    Offset(0x40),
	        CREQ, 32,          
		    Offset(0x44), 
		    CSTS, 32,          
		    Offset(0x4C),
		    SCMD, 32,          
		  }
	
	      OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
	      Field (CRBD, AnyAcc, NoLock, Preserve)
	      {
	        Offset(0x04),
	        HERR, 32,
	        Offset (0x40),
	        HCMD, 32,
	        Offset(0x44), 
	        HSTS, 32,
	      }
	
	      Method(_STA, 0){
		   	If(LEqual(TTDP, 0)){
	            If(TPMF){
	                 Return(0x0F)  
	             }
	             Return(0x00)  
	         }ElseIF(LEqual(TTDP, 1)){
	            If(TPMF){
	             Return(0x0F)  
	            }
	            Return (0x00)
	         } 
	         Return (0x00)
		   }
	   
	       Method (STRT, 3, Serialized, 0, IntObj, {UnknownObj, UnknownObj, UnknownObj}) 
	       {
	          OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
	          Field (TPMR, AnyAcc, NoLock, Preserve)
	          {
	            Offset(0x04),
	            FERR, 32,
	            Offset(0x0c),
	            BEGN, 32,
	          }
	          
	          Name (TIMR, 0)  
			  
	          
	          
	          
	          Switch (ToInteger (Arg1))
	          {
	              Case (0)
	              {
	                
	                
	                
	                Return (Buffer () {0x03})
	              }
	              Case (1)
	              {   
	                Store(0, TIMR)
	                
	                If(LEqual(AMDT, 1))
	                {
	                  While(LAND(LEqual(BEGN, One), LLESS(TIMR, 0x200)))
	       		      {
	        			 If(LEqual(BEGN, One))
	    				 {
	    				   Sleep(0x1)
	    				   Increment(TIMR)
	    		         }
	    			  }
	    			  Return(Zero)
	                }Else{
	                  If(LEqual(Or(And(HSTS,0x00000002),And(HSTS,0x00000001)),0x00000003))
	                  {
	                    
	                    
	                    
	                    Store (0x00000001, HCMD)
	                  }              
	                  Else
	                  {
	                    
	                    Store(0x00000001,FERR)
	                    
	                    Store(0x00000000,BEGN)
	                  }
	
	                  Return (0)     
	              }
	           }    
	        }
		  
		    Return (1)    
		  }
	
	      Method (CRYF, 3, Serialized, 0, {BuffObj, PkgObj}, {UnknownObj, UnknownObj, UnknownObj}) 
	      {
	        
	        
	        
	        Switch (ToInteger(Arg1))
	        {
	          Case (0)
	          {
	            
	            
	            
	            Return (Buffer () {0x03})
	          }
	          Case (1)
	          {
	            
	            
	            
	            Name(TPMV, Package () {0x01, Package () {0x1, 0x20}})
	            if (LEqual (_STA (), 0x00))
	            {
	              Return (Package () {0x00})
	            }
	            Return (TPMV)
	          }
	        }
	        Return (Buffer () {0})
	      }
	
	  }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope(\_SB.TPM)
	{    
	    OperationRegion (TSMI, SystemIO, SMIA , 0x2) 
	    Field (TSMI, WordAcc, NoLock, Preserve) 
	    { 
	        SMI,16,
	    } 
	
	    Method( _DSM , 4, Serialized)
	    {
	        if( LEqual(Arg0,ToUUID("3DDDFAA6-361B-4EB4-A424-8D10089D1653")))
	        {
	                switch(ToInteger(Arg2))            
	                {
	                    
	                    
	                    
	                    case(0)
	                    {
	                        return (Buffer() {0xff,0x01}) 
	                    }
	
	                    
	                    
	                    
	                    case(1)
	                    {
	                        return ("1.2")                        
	                    }
	
	                    
	                    
	                    
	                    case(2)
	                    {
	                        ToInteger(DeRefOf(Index(Arg3,0)), TMF2)  
	                        Store(OFST, TMF1)                           
	                        Or(0x1200, TMF1, TMF1)
	
	                        Store(TMF1,SMI) 
	                        Store(SMI,TMF1) 
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        }       
	
	                        ShiftLeft(TMF2, 0x8, TMF2)
	                        Or(OFST, TMF2, TMF2)
	
	                        Store(TMF2,SMI)    
	                        Store(SMI,TMF1) 
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        } 
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x1)
	                        }
	
	                        return (Zero)        
	                    }
	
	                    
	                    
	                    case(3)
	                    {
	                        Name(PPI1, Package(){0,0})
	                        Store(OFST,TMF1)                            
	                        Or(0x1100, TMF1, TMF1)
	
	                        Store(TMF1, SMI)    
	                        Store(SMI,TMF1) 
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x1)
	                        } 
	
	                        Store(TMF1, Index(PPI1,1))
	                        return(PPI1)
	                    }
	
	                    
	                    
	                    
	                    
	                    
	                    
	                    
	                    
	                    case(4)
	                    {      
	                        return (TRST) 
	                    }
	
	                    
	                    
	                    
	                    case(5)
	                    {
	                        Name(PPI2, Package(){0,0,0})
	                        Store(OFST,TMF1)                            
	                        Or(0x2100, TMF1, TMF1)
	                        Store(TMF1,SMI) 
	
	                        Store(SMI,TMF1) 
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        }       
	
	                        Store(TMF1, Index(PPI2,1))                
	
	                        Store(OFST,TMF1)                            
	                        Or(0x3100, TMF1, TMF1)
	
	                        Store(TMF1,SMI) 
	
	                        Store(SMI,TMF1) 
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        }       
	
	                        IF (Lequal(TMF1, 0xF0))
	                        {
	                           Store(OFST,TMF1)                         
	                           Or(0x5100, TMF1, TMF1)
	                           Store(TMF1,SMI)  
	                           Store(SMI,TMF1)  
	                           ShiftRight(TMF1, 0x8, TMF1)
	
	                           if(Lequal(TMF1,0xFF)){
	                              Store(0xFFFFFFF0, Index(PPI2,2))
	                              return(PPI2)
	                           }
	
	                        }
	                        ElseIF (Lequal(TMF1, 0xF1))
	                        {
	                           Store(OFST,TMF1)                         
	                           Or(0x5100, TMF1, TMF1)
	                           Store(TMF1,SMI)  
	                           Store(SMI,TMF1)  
	                           ShiftRight(TMF1, 0x8, TMF1)
	
	                           if(Lequal(TMF1,0xFF)){
	                              Store(0xFFFFFFF1, Index(PPI2,2))
	                              return(PPI2)
	                           }
	                        }
	                        Else
	                        {Store(TMF1, Index(PPI2,2))}
	                        return(PPI2) 
	                    }
	
	
	                    
	                    
	                    
	                    
	                    case(6)
	                    {
	                        return ( 0x03 ) 
	                    }
	                    
	                    
	                    
	                    
	                    
	                    
	                    case(7)
	                    {
	                        ToInteger(DeRefOf(Index(Arg3,0)), TMF2)  
	                        Store(OFST,TMF1)                            
	                        Or(0x1200, TMF1, TMF1)
	                        Store(TMF1,SMI) 
	
	                        Store(SMI,TMF1) 
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        }       
	
	                        ShiftLeft(TMF2, 0x8, TMF2)
	                        Or(OFST, TMF2, TMF2)
	
	                        Store(TMF2,SMI)    
	                        Store(SMI,TMF1) 
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	    
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        } 
	
	                        if(Lequal(TMF1,0xF1)){
	                            return(0x1)
	                        }
	
	                        return (Zero)        
	                    }
	
	                    case(8)
	                    {
	                          ToInteger(DeRefOf(Index(Arg3,0)), TMF2)  
	                          Store(OFST,TMF1)                          
	                          Or(0x4300, TMF1, TMF1)
	                          Store(TMF1,SMI)   
	                          Store(SMI,TMF1)
	                          ShiftLeft(TMF2, 0x8, TMF2)
	                          Or(OFST, TMF2, TMF2)
	                          Store(TMF2,SMI)      
	                          Store(SMI,TMF1)   
	                          ShiftRight(TMF1, 0x8, TMF1)   
	                          return (TMF1)
	                    }
	
	                    default { }                    
	                }
	        } else {if(LEqual(Arg0,
	        ToUUID("376054ED-CC13-4675-901C-4756D7F2D45D"))){
	            
	            
	            
	             switch(ToInteger(Arg2))            
	                {
	                    
	                    
	                    
	                    case(0)
	                    {
	                        return (Buffer() {0x3}) 
	                    }
	
	                    
	                    
	                    
	                    case(1)
	                    {   
	                        Store(OFST,TMF1) 
	                        Or(0x2200, TMF1, TMF1)
	                        Store(TMF1,SMI) 
	                        Store(SMI,TMF1)
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        }  
	
	                        ToInteger(DeRefOf(Index(Arg3,0)), TMF1)  
	                        ShiftLeft(TMF1, 0x8, TMF1)
	                        Or(OFST, TMF1, TMF1)
	                        Store(TMF1,SMI)    
	                        Store(SMI,TMF1)
	                        ShiftRight(TMF1, 0x8, TMF1)
	
	                        if(Lequal(TMF1,0xFF)){
	                            return(0x2)
	                        } 
	     
	                        return (Zero)        
	                    }
	                    default { }                    
	                }
	            
	        }}               
	        
	        
	        If(LEqual(Arg0, ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
	        {
	          Return (CRYF (Arg1, Arg2, Arg3))
	        }
	
	        If(LEqual(Arg0, ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
	        {
	          Return (STRT (Arg1, Arg2, Arg3))
	        }
	        return (Buffer() {0})
	    }
	}


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		OperationRegion(\_SB.PCI0.LPC0.PIX0, PCI_Config, 0x60, 12)
		Field(\_SB.PCI0.LPC0.PIX0,ByteAcc,NoLock,Preserve){
			PIRA,8, 		
			PIRB,8, 		
			PIRC,8, 		
			PIRD,8, 		
			, 32,
			PIRE,8, 		
			PIRF,8, 		
			PIRG,8, 		
			PIRH,8, 		
			}
	
	Scope(\_SB) {
	
	
	
	
	
	
	
	
	
		Name(BUFA,
			ResourceTemplate()
			{
				IRQ(Level, ActiveLow, Shared ) {15}
		})
		CreateWordField(BUFA, 0x1, IRA0)	
	
		Device(LNKA){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 1)
	
	                Method(_STA,0) {
				And(PIRA, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSA)}
	
			Method(_DIS){Or(PIRA, 0x80 ,PIRA)} 
	
			Method(_CRS){
				And(PIRA, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRA)
			}					
		} 
	
		Device(LNKB){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 2)
	
	                Method(_STA,0) {
				And(PIRB, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSB)}
	
			Method(_DIS){Or(PIRB, 0x80 ,PIRB)} 
	
			Method(_CRS){
				And(PIRB, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRB)
			}					
		} 
	
		Device(LNKC){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 3)
	
	                Method(_STA,0) {
				And(PIRC, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSC)}
	
			Method(_DIS){Or(PIRC, 0x80 ,PIRC)} 
	
			Method(_CRS){
				And(PIRC, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRC)
			}					
		} 
	
		Device(LNKD){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 4)
	
	                Method(_STA,0) {
				And(PIRD, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSD)}
	
			Method(_DIS){Or(PIRD, 0x80 ,PIRD)} 
	
			Method(_CRS){
				And(PIRD, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRD)
			}					
		} 
	
		Device(LNKE){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 5)
	
	                Method(_STA,0) {
				And(PIRE, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSE)}
	
			Method(_DIS){Or(PIRE, 0x80 ,PIRE)} 
	
			Method(_CRS){
				And(PIRE, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRE)
			}					
		} 
	
		Device(LNKF){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 6)
	
	                Method(_STA,0) {
				And(PIRF, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSF)}
	
			Method(_DIS){Or(PIRF, 0x80 ,PIRF)} 
	
			Method(_CRS){
				And(PIRF, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRF)
			}					
		} 
	
		Device(LNKG){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 7)
	
	                Method(_STA,0) {
				And(PIRG, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSG)}
	
			Method(_DIS){Or(PIRG, 0x80 ,PIRG)} 
	
			Method(_CRS){
				And(PIRG, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRG)
			}					
		} 
	
		Device(LNKH){
	                Name(_HID, EISAID("PNP0C0F"))
	                Name(_UID, 8)
	
	                Method(_STA,0) {
				And(PIRH, 0x80, Local0)
				If(Local0) {Return (0x9)} 
				Else   {Return (0xb)} 
			}
	
			Method(_PRS,0){Return(PRSH)}
	
			Method(_DIS){Or(PIRH, 0x80 ,PIRH)} 
	
			Method(_CRS){
				And(PIRH, 0x0f, Local0)
				ShiftLeft(0x1, Local0, IRA0)
				Return(BUFA)
			}					
	
			Method(_SRS, 1){	
				CreateWordField(ARG0, 0x01, IRA)
				FindSetRightBit(IRA, Local0)
				Decrement(Local0)
				Store(Local0, PIRH)
			}					
		} 
	
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Scope (\_SB) {
	
	
	
	Name (XCPD, 0x0)			
	Name (XNPT, 0x1)			
	Name (XCAP, 0x2)			
	Name (XDCP, 0x4)			
	Name (XDCT, 0x8)			
	Name (XDST, 0xa)			
	Name (XLCP, 0xc)			
	Name (XLCT, 0x10)			
	Name (XLST, 0x12)			
	Name (XSCP, 0x14)			
	Name (XSCT, 0x18)			
	Name (XSST, 0x1A)			
	Name (XRCT, 0x1C)			
	Mutex(MUTe, 0)				
	
	
	
	
	
		Method (RbPe, 1) {			
			Acquire(MUTe, 1000)
			Add (Arg0, \PEBS, Local0) 		
			OperationRegion (PCFG, SystemMemory, Local0, 0x1)
	
			Field (PCFG, ByteAcc, Nolock, Preserve){
				XCFG, 8 ,	
			}
			Release (MUTe)		
			Return (XCFG)
		}					
	
	
		Method (RwPe, 1) {			
			Acquire(MUTe, 1000)
			And (Arg0, 0xFFFFFFFE, Arg0)
			Add (Arg0, \PEBS, Local0) 		
			OperationRegion (PCFG, SystemMemory, Local0, 0x2)
	
			Field (PCFG, WordAcc, Nolock, Preserve){
				XCFG, 16 ,	
			}
			Release (MUTe)		
			Return (XCFG)
		}					
	
	
		Method (RdPe, 1) {			
			Acquire(MUTe, 1000)
			And (Arg0, 0xFFFFFFFC, Arg0)	
			Add (Arg0, \PEBS, Local0) 		
			OperationRegion (PCFG, SystemMemory, Local0, 0x4)
	
			Field (PCFG, DwordAcc, Nolock, Preserve){
				XCFG, 32 ,	
			}
			Release (MUTe)		
			Return (XCFG)
		}					
	
	
		Method (WbPe, 2) {			 
			Acquire(MUTe, 0xfff)
			Add (Arg0, \PEBS, Local0) 
			OperationRegion (PCFG, SystemMemory, Local0, 0x1)
			Field (PCFG, ByteAcc, Nolock, Preserve){
				XCFG, 8 ,	
			}
			Store (Arg1,XCFG)
			Release (MUTe)
		}					
	
	
		Method (WwPe, 2) {			 
			Acquire(MUTe, 1000)
			And (Arg0, 0xFFFFFFFE, Arg0)		
			Add (Arg0, \PEBS, Local0) 
			OperationRegion (PCFG, SystemMemory, Local0, 0x2)
			Field (PCFG, WordAcc, Nolock, Preserve){
				XCFG, 16 ,	
			}
			Store (Arg1,XCFG)
			Release (MUTe)
		}					
	
	
		Method (WdPe, 2) {			 
			Acquire(MUTe, 1000)
			And (Arg0, 0xFFFFFFFC, Arg0)		
			Add (Arg0, \PEBS, Local0) 
			OperationRegion (PCFG, SystemMemory, Local0, 0x4)
	
			Field (PCFG, DwordAcc, Nolock, Preserve){
				XCFG, 32 ,	
			}
			Store (Arg1,XCFG)
			Release (MUTe)
		}					
	
	
	
		Method (RWdP, 3) {			 
			Acquire(MUTe, 1000)
			And (Arg0, 0xFFFFFFFC, Arg0)	
			Add (Arg0, \PEBS, Local0) 
			OperationRegion (PCFG, SystemMemory, Local0, 0x4)
	
			Field (PCFG, DwordAcc, Nolock, Preserve){
				XCFG, 32 ,	
			}
			And (XCFG, Arg2, Local1)
			Or (Local1, Arg1, XCFG)
			Release (MUTe)		
		}					
	
	
		Method (RPME, 1) {			
			add (Arg0, 0x84, Local0)			
			Store (\_SB.RdPe(Local0), Local1)
			if (LEQUAL(Local1, 0xffffffff)) {
				Return (0)		
			}  	
			else {
				if (Land(Local1, 0x10000)) {
					\_SB.WdPe(Local0, And(Local1, 0x10000))
					Return (1)		
				}
				Return (0)		
			}
		}					
	}						


	Scope( \_SB.PCI0.BR2A){
	  Method ( _DSM, 4, NotSerialized, 0, UnknownObj, {BuffObj, IntObj, IntObj,PkgObj})
	  {
	        If (LEqual(Arg0, ToUUID ("E5C937D0-3553-4d7a-9117-EA4D19C3434D"))) {
	          If (Land( Lequal(Arg1, 2 ), Lequal(Arg2,0 ))){
	             return (Buffer() {0x80})
	          }
	          If (Land( Lequal(Arg1, 2), Lequal(Arg2,7 ))){
	             Return ( Package(2 ){
	                         0x1,
	                         Unicode(" Slot1 x16")
	                     }
	                 )
	          }
	         }
	             return(Buffer(){0})
	  }
	}
	Scope( \_SB.PCI0.BR2C){
	  Method ( _DSM, 4, NotSerialized, 0, UnknownObj, {BuffObj, IntObj, IntObj,PkgObj})
	  {
	        If (LEqual(Arg0, ToUUID ("E5C937D0-3553-4d7a-9117-EA4D19C3434D"))) {
	          If (Land( Lequal(Arg1, 2 ), Lequal(Arg2,0 ))){
	             return (Buffer() {0x80})
	          }
	          If (Land( Lequal(Arg1, 2), Lequal(Arg2,7 ))){
	             Return ( Package(2 ){
	                         0x3,
	                         Unicode(" Slot3 x8")
	                     }
	                 )
	          }
	         }
	             return(Buffer(){0})
	  }
	}
	Scope( \_SB.PCI0.BR3D){
	  Method ( _DSM, 4, NotSerialized, 0, UnknownObj, {BuffObj, IntObj, IntObj,PkgObj})
	  {
	        If (LEqual(Arg0, ToUUID ("E5C937D0-3553-4d7a-9117-EA4D19C3434D"))) {
	          If (Land( Lequal(Arg1, 2 ), Lequal(Arg2,0 ))){
	             return (Buffer() {0x80})
	          }
	          If (Land( Lequal(Arg1, 2), Lequal(Arg2,7 ))){
	             Return ( Package(2 ){
	                         0x3,
	                         Unicode(" Slot3 x4")
	                     }
	                 )
	          }
	         }
	             return(Buffer(){0})
	  }
	}
	Scope( \_SB.PCI1.QR3A){
	  Method ( _DSM, 4, NotSerialized, 0, UnknownObj, {BuffObj, IntObj, IntObj,PkgObj})
	  {
	        If (LEqual(Arg0, ToUUID ("E5C937D0-3553-4d7a-9117-EA4D19C3434D"))) {
	          If (Land( Lequal(Arg1, 2 ), Lequal(Arg2,0 ))){
	             return (Buffer() {0x80})
	          }
	          If (Land( Lequal(Arg1, 2), Lequal(Arg2,7 ))){
	             Return ( Package(2 ){
	                         0x2,
	                         Unicode(" Slot2 x16")
	                     }
	                 )
	          }
	         }
	             return(Buffer(){0})
	  }
	}
	Scope( \_SB.PCI1.QR3C){
	  Method ( _DSM, 4, NotSerialized, 0, UnknownObj, {BuffObj, IntObj, IntObj,PkgObj})
	  {
	        If (LEqual(Arg0, ToUUID ("E5C937D0-3553-4d7a-9117-EA4D19C3434D"))) {
	          If (Land( Lequal(Arg1, 2 ), Lequal(Arg2,0 ))){
	             return (Buffer() {0x80})
	          }
	          If (Land( Lequal(Arg1, 2), Lequal(Arg2,7 ))){
	             Return ( Package(2 ){
	                         0x4,
	                         Unicode(" Slot4 x8")
	                     }
	                 )
	          }
	         }
	             return(Buffer(){0})
	  }
	}
	Scope( \_SB.PCI1.QR1A){
	  Method ( _DSM, 4, NotSerialized, 0, UnknownObj, {BuffObj, IntObj, IntObj,PkgObj})
	  {
	        If (LEqual(Arg0, ToUUID ("E5C937D0-3553-4d7a-9117-EA4D19C3434D"))) {
	          If (Land( Lequal(Arg1, 2 ), Lequal(Arg2,0 ))){
	             return (Buffer() {0x80})
	          }
	          If (Land( Lequal(Arg1, 2), Lequal(Arg2,7 ))){
	             Return ( Package(2 ){
	                         0x4,
	                         Unicode(" Slot4 x8")
	                     }
	                 )
	          }
	         }
	             return(Buffer(){0})
	  }
	}


}	




































