#
# DO NOT EDIT
# This file is auto-generated by build utility
#
# Module Name:
#
#   Makefile
#
# Abstract:
#
#   Auto-generated makefile for building modules, libraries or platform
#
    

#
# Platform Macro Definition
#
PLATFORM_NAME = GRANTLEY
PLATFORM_GUID = A361BEE1-AEB7-4921-8505-A323899516E6
PLATFORM_VERSION = 1
PLATFORM_RELATIVE_DIR = Build
PLATFORM_DIR = $(WORKSPACE)\Build
PLATFORM_OUTPUT_DIR = Build\GRANTLEY

#
# Module Macro Definition
#
MODULE_NAME = PeiCryptLib
MODULE_GUID = 9a2a4375-194c-4e97-9f67-547ec98d96ca
MODULE_NAME_GUID = PeiCryptLib
MODULE_VERSION = 1.0
MODULE_TYPE = PEIM
MODULE_FILE = PeiCryptLib.inf
MODULE_FILE_BASE_NAME = PeiCryptLib
BASE_NAME = $(MODULE_NAME)
MODULE_RELATIVE_DIR = CryptoPkg\Library\BaseCryptLib
PACKAGE_RELATIVE_DIR = Library\BaseCryptLib
MODULE_DIR = $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib

MODULE_ENTRY_POINT = _ModuleEntryPoint
ARCH_ENTRY_POINT = _ModuleEntryPoint
IMAGE_ENTRY_POINT = _ModuleEntryPoint

INF_VERSION = 0x00010005
BASE_NAME = PeiCryptLib
MODULE_UNI_FILE = PeiCryptLib.uni
FILE_GUID = 9a2a4375-194c-4e97-9f67-547ec98d96ca
MODULE_TYPE = PEIM
VERSION_STRING = 1.0

#
# Build Configuration Macro Definition
#
ARCH = IA32
TOOLCHAIN = MYTOOLS
TOOLCHAIN_TAG = MYTOOLS
TARGET = RELEASE

#
# Build Directory Macro Definition
#
# PLATFORM_BUILD_DIR = c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS
BUILD_DIR = c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS
BIN_DIR = $(BUILD_DIR)\IA32
LIB_DIR = $(BIN_DIR)
MODULE_BUILD_DIR = c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib
OUTPUT_DIR = c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT
DEBUG_DIR = c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\DEBUG
DEST_DIR_OUTPUT = $(OUTPUT_DIR)
DEST_DIR_DEBUG = $(DEBUG_DIR)

#
# Shell Command Macro
#
RD = rmdir /s /q
RM = del /f /q
MD = mkdir
CP = copy /y
MV = move /y


#
# Tools definitions specific to this module
#
SYMRENAME =  echo
SYMRENAME_FLAGS = Symbol renaming not needed for

CBINDLINK_FLAGS = /nologo /NODEFAULTLIB /NOENTRY /DLL /ALIGN:16

ASLDLINK =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\link.exe
ASLDLINK_FLAGS = /nologo /NODEFAULTLIB /ENTRY:ReferenceAcpiTable /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER

DT =  C:/Aptio_5.x_TOOLS_29/Tools/iasl5

VFR =  VfrCompile
VFR_FLAGS = -n

PP =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\cl.exe
PP_FLAGS = /nologo /E /TC /FIAutoGen.h

LZMAF86 =  LzmaF86Compress
LZMAF86_GUID =  D42AE6BD-1352-4bfb-909A-CA72A6EAE889

GENFW =  GenFw
GENFW_FLAGS = 

DLINK =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\link.exe
DLINK_FLAGS = /MACHINE:I386 /NOLOGO /NODEFAULTLIB /IGNORE:4001 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /MERGE:.data=.text /MERGE:.rdata=.text /IGNORE:4254 /PDB:$(DEBUG_DIR)/$(BASE_NAME).pdb

SLINK =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\link.exe /LIB
SLINK_FLAGS = /nologo /LTCG

ASM =  ml.exe
ASM_FLAGS = /nologo /c /WX /W3 /Cx /Zd /coff

ASL =  C:/Aptio_5.x_TOOLS_29/Tools/iasl5 #AptioV server override
ASL_FLAGS = 
ASL_OUTFLAGS =  -cr -p #AptioV server override: Flag added to skip resource descriptor checks

TIANO =  TianoCompress
TIANO_GUID =  A31280AD-481E-41B6-95E8-127F4C984779

CC =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\cl.exe
CC_FLAGS = /nologo /c /WX /GS- /W3 /Gs32768 /Gy /D UNICODE /GL /FIAutoGen.h /EHs-c- /GR- /GF -D PI_SPECIFICATION_VERSION=0x1001E -D EFI_SPECIFICATION_VERSION=0x20028 /wd4819 /O1ib2 -DMDEPKG_NDEBUG /D CRB_FLAG /D VFR_CRB_FLAG /D EXTERNAL_PACKAGE /D SSA_FLAG /D SSA_LOADER_FLAG /D HSX_HOST /D BDX_HOST /D LT_FLAG /DTRAD_FLAG=1 /DPCH_SERVER_BIOS_FLAG=1 /DPCH_SERVER_BIOS_FLAG=1 /DME_SUPPORT_FLAG=1 /DSPS_SUPPORT=1 /DPFAT_FLAG=1 /D AMI_PAM_SAVE_RESTORE_SWSMI_VALUE=0xBE /D AMI_PAM_SAVE_CMD=0xE0 /D AMI_PAM_RESTORE_CMD=0xE1 /DUSB_PRECONDITION_ENABLE_FLAG=1 /DWDT_SUPPORT_ENABLED=1

VFRPP =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\cl.exe
VFRPP_FLAGS = /nologo /E /TC /DVFRCOMPILE /FI$(MODULE_NAME)StrDefs.h -D PI_SPECIFICATION_VERSION=0x1001E -D EFI_SPECIFICATION_VERSION=0x20028 /wd4819 /O1ib2 -DMDEPKG_NDEBUG /D CRB_FLAG /D VFR_CRB_FLAG /D EXTERNAL_PACKAGE /D SSA_FLAG /D SSA_LOADER_FLAG /D HSX_HOST /D BDX_HOST /D LT_FLAG /DTRAD_FLAG=1 /DPCH_SERVER_BIOS_FLAG=1 /DPCH_SERVER_BIOS_FLAG=1 /DME_SUPPORT_FLAG=1 /DSPS_SUPPORT=1 /DPFAT_FLAG=1 /D AMI_PAM_SAVE_RESTORE_SWSMI_VALUE=0xBE /D AMI_PAM_SAVE_CMD=0xE0 /D AMI_PAM_RESTORE_CMD=0xE1 /DUSB_PRECONDITION_ENABLE_FLAG=1 /DWDT_SUPPORT_ENABLED=1

LZMA =  LzmaCompress
LZMA_GUID =  EE4E5898-3914-4259-9D6E-DC7BD79403CF

ASM16 =  ml.exe

ASLCC =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\cl.exe
ASLCC_FLAGS = /nologo /c /TC /FIAutoGen.h /Dmain=ReferenceAcpiTable

CBINCC_FLAGS = /nologo /c /TC /Os /FIAutoGen.h

APP =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\cl.exe
APP_FLAGS = /nologo /E /TC

OPTROM =  EfiRom
OPTROM_FLAGS = -e

NASMB_FLAGS = -f bin

VPDTOOL =  BPDG
VPDTOOL_GUID =  8C3D856A-9BE6-468E-850A-24F7A8D38E08

ASLPP =  C:\WinDDK_7600.16385.1\WinDDk\WinDDK\7600.16385.1\bin\x86\x86\cl.exe
ASLPP_FLAGS = /nologo /EP /TC

OBJCOPY =  echo
OBJCOPY_FLAGS = objcopy not needed for

MAKE =  nmake.exe

ASMLINK =  link16.exe
ASMLINK_FLAGS = /nologo /tiny

NASM =  nasm
NASM_FLAGS = -Ox -f win32


MAKE_FILE = $(MODULE_BUILD_DIR)\Makefile

#
# Build Macro
#
OBJECT_FILES =  \
    $(OUTPUT_DIR)\Hash\CryptMd4Null.obj \
    $(OUTPUT_DIR)\Hash\CryptMd5.obj \
    $(OUTPUT_DIR)\Hash\CryptSha1.obj \
    $(OUTPUT_DIR)\Hash\CryptSha256.obj \
    $(OUTPUT_DIR)\Hash\CryptSha512Null.obj \
    $(OUTPUT_DIR)\Hmac\CryptHmacMd5Null.obj \
    $(OUTPUT_DIR)\Hmac\CryptHmacSha1Null.obj \
    $(OUTPUT_DIR)\Cipher\CryptAesNull.obj \
    $(OUTPUT_DIR)\Cipher\CryptTdesNull.obj \
    $(OUTPUT_DIR)\Cipher\CryptArc4Null.obj \
    $(OUTPUT_DIR)\Pk\CryptRsaBasic.obj \
    $(OUTPUT_DIR)\Pk\CryptRsaExtNull.obj \
    $(OUTPUT_DIR)\Pk\CryptPkcs7SignNull.obj \
    $(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj \
    $(OUTPUT_DIR)\Pk\CryptDhNull.obj \
    $(OUTPUT_DIR)\Pk\CryptX509Null.obj \
    $(OUTPUT_DIR)\Pk\CryptAuthenticodeNull.obj \
    $(OUTPUT_DIR)\Pk\CryptTsNull.obj \
    $(OUTPUT_DIR)\Pem\CryptPemNull.obj \
    $(OUTPUT_DIR)\Rand\CryptRandNull.obj \
    $(OUTPUT_DIR)\SysCall\ConstantTimeClock.obj \
    $(OUTPUT_DIR)\SysCall\BaseMemAllocation.obj

INC =  \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\SysCall \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Rand \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pem \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Cipher \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hmac \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hash \
    /I$(WORKSPACE)\CryptoPkg\Library\BaseCryptLib \
    /I$(DEBUG_DIR) \
    /I$(WORKSPACE)\MdePkg \
    /I$(WORKSPACE)\MdePkg\Include \
    /I$(WORKSPACE)\MdePkg\Include\Ia32 \
    /I$(WORKSPACE)\CryptoPkg \
    /I$(WORKSPACE)\CryptoPkg\Include \
    /I$(WORKSPACE)\AmiCompatibilityPkg \
    /I$(WORKSPACE)\AmiCompatibilityPkg\Include \
    /I$(WORKSPACE)\Build \
    /I$(WORKSPACE) \
    /I$(WORKSPACE)\AmiModulePkg\Include \
    /I$(WORKSPACE)\MdeModulePkg\Include \
    /I$(WORKSPACE)\IntelFrameworkPkg\Include \
    /I$(WORKSPACE)\IntelFrameworkModulePkg\Include \
    /I$(WORKSPACE)\AmiTsePkg\Include \
    /I$(WORKSPACE)\GrantleyPkg\Include \
    /I$(WORKSPACE)\GrantleySocketPkg\Include \
    /I$(WORKSPACE)\GrantleySocketPkg\Library\MemoryQpiInit\Chip\Include \
    /I$(WORKSPACE)\GrantleySocketPkg\Library\MemoryQpiInit\Core\Include \
    /I$(WORKSPACE)\GrantleySocketPkg\Library\MemoryQpiInit\Platform\Include \
    /I$(WORKSPACE)\ServerCommonPkg\Include \
    /I$(WORKSPACE)\GrantleyPkg\Override\Restricted\IA32FamilyCpuPkg\Include

OBJECT_FILES_LIST = c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\object_files.lst


COMMON_DEPS = $(WORKSPACE)\MdePkg\Include\Ppi\CpuIo.h \
              $(WORKSPACE)\MdePkg\Include\Uefi\UefiBaseType.h \
              $(WORKSPACE)\MdePkg\Include\Uefi\UefiMultiPhase.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiFirmwareVolume.h \
              $(WORKSPACE)\MdePkg\Include\PiPei.h \
              $(WORKSPACE)\MdePkg\Include\Library\DebugLib.h \
              $(WORKSPACE)\MdePkg\Include\Library\BaseMemoryLib.h \
              $(WORKSPACE)\MdePkg\Include\Ppi\PciCfg2.h \
              $(DEBUG_DIR)\AutoGen.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiMultiPhase.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiHob.h \
              $(WORKSPACE)\CryptoPkg\Include\OpenSslSupport.h \
              $(WORKSPACE)\MdePkg\Include\IndustryStandard\PeImage.h \
              $(WORKSPACE)\MdePkg\Include\Protocol\DebugSupport.h \
              $(WORKSPACE)\MdePkg\Include\Library\BaseLib.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiStatusCode.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiPeiCis.h \
              $(WORKSPACE)\MdePkg\Include\Library\MemoryAllocationLib.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiS3BootScript.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiBootMode.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiFirmwareFile.h \
              $(WORKSPACE)\MdePkg\Include\Guid\WinCertificate.h \
              $(WORKSPACE)\MdePkg\Include\Base.h \
              $(WORKSPACE)\MdePkg\Include\Ia32\ProcessorBind.h \
              $(WORKSPACE)\MdePkg\Include\Pi\PiDependency.h \
              

#
# Overridable Target Macro Definitions
#
FORCE_REBUILD = force_build
INIT_TARGET = init
PCH_TARGET =
BC_TARGET = 
CODA_TARGET = c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\PeiCryptLib.lib \
              

#
# Default target, which will build dependent libraries in addition to source files
#

all: mbuild


#
# Target used when called from platform makefile, which will bypass the build of dependent libraries
#

pbuild: $(INIT_TARGET) $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# ModuleTarget
#

mbuild: $(INIT_TARGET) $(BC_TARGET) gen_libs $(PCH_TARGET) $(CODA_TARGET)

#
# Build Target used in multi-thread build mode, which will bypass the init and gen_libs targets
#

tbuild: $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# Phony target which is used to force executing commands for a target
#
force_build:
	-@

#
# Target to update the FD
#

fds: mbuild gen_fds

#
# Initialization target: print build information and create necessary directories
#
init: info dirs

info:
	-@echo Building ... $(MODULE_DIR)\$(MODULE_FILE) [$(ARCH)]

dirs:
	-@if not exist $(DEBUG_DIR) $(MD) $(DEBUG_DIR)
	-@if not exist $(OUTPUT_DIR) $(MD) $(OUTPUT_DIR)


strdefs:
	-@$(CP) $(DEBUG_DIR)\AutoGen.h $(DEBUG_DIR)\$(MODULE_NAME)StrDefs.h

#
# GenLibsTarget
#
gen_libs:
	@cd $(MODULE_BUILD_DIR)

#
# Build Flash Device Image
#
gen_fds:
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BUILD_DIR)\Makefile fds
	@cd $(MODULE_BUILD_DIR)

#
# Individual Object Build Targets
#
$(OUTPUT_DIR)\PeiCryptLib.lib : $(OBJECT_FILES)
	"$(SLINK)" $(SLINK_FLAGS) /OUT:c:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\PeiCryptLib.lib @$(OBJECT_FILES_LIST)

$(OUTPUT_DIR)\Hash\CryptMd4Null.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Hash\CryptMd4Null.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Hash\CryptMd4Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Hash\CryptMd4Null.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Hash\CryptMd4Null.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Hash\CryptMd4Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hash\CryptMd4Null.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Hash\CryptMd4Null.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Hash\CryptMd4Null.c

$(OUTPUT_DIR)\Cipher\CryptAesNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Cipher\CryptAesNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Cipher\CryptAesNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Cipher\CryptAesNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Cipher\CryptAesNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Cipher\CryptAesNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Cipher\CryptAesNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Cipher\CryptAesNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Cipher\CryptAesNull.c

$(OUTPUT_DIR)\Cipher\CryptTdesNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Cipher\CryptTdesNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Cipher\CryptTdesNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Cipher\CryptTdesNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Cipher\CryptTdesNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Cipher\CryptTdesNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Cipher\CryptTdesNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Cipher\CryptTdesNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Cipher\CryptTdesNull.c

$(OUTPUT_DIR)\Pk\CryptTsNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptTsNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptTsNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptTsNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptTsNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptTsNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptTsNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptTsNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptTsNull.c

$(OUTPUT_DIR)\Pk\CryptX509Null.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptX509Null.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptX509Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptX509Null.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptX509Null.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptX509Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptX509Null.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptX509Null.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptX509Null.c

$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\sha.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslconf.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Include\stddef.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\e_os2.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Include\sys\socket.h
$(OUTPUT_DIR)\Hash\CryptSha1.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hash\CryptSha1.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Hash\CryptSha1.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Hash\CryptSha1.c

$(OUTPUT_DIR)\SysCall\ConstantTimeClock.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\SysCall\ConstantTimeClock.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\SysCall\ConstantTimeClock.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\SysCall\ConstantTimeClock.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\SysCall\ConstantTimeClock.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\SysCall\ConstantTimeClock.c

$(OUTPUT_DIR)\Hmac\CryptHmacSha1Null.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Hmac\CryptHmacSha1Null.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Hmac\CryptHmacSha1Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Hmac\CryptHmacSha1Null.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Hmac\CryptHmacSha1Null.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Hmac\CryptHmacSha1Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hmac\CryptHmacSha1Null.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Hmac\CryptHmacSha1Null.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Hmac\CryptHmacSha1Null.c

$(OUTPUT_DIR)\Pk\CryptAuthenticodeNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptAuthenticodeNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptAuthenticodeNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptAuthenticodeNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptAuthenticodeNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptAuthenticodeNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptAuthenticodeNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptAuthenticodeNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptAuthenticodeNull.c

$(OUTPUT_DIR)\Hmac\CryptHmacMd5Null.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Hmac\CryptHmacMd5Null.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Hmac\CryptHmacMd5Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Hmac\CryptHmacMd5Null.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Hmac\CryptHmacMd5Null.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Hmac\CryptHmacMd5Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hmac\CryptHmacMd5Null.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Hmac\CryptHmacMd5Null.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Hmac\CryptHmacMd5Null.c

$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\sha.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\evp.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\time.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslconf.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\obj_mac.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\stdarg.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\stddef.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\symhacks.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\rsa.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\ossl_typ.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\x509v3.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\assert.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\sys\types.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\pkcs7.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\safestack.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\ecdsa.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\x509.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\lhash.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\buffer.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\bio.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\objects.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\sys\socket.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\ec.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\dsa.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\x509_vfy.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\stack.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\e_os2.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\dh.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\crypto.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\conf.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\ecdh.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\stdlib.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\asn1.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\stdio.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\ebcdic.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\bn.h
$(OUTPUT_DIR)\Pk\CryptPkcs7Verify.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptPkcs7Verify.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptPkcs7Verify.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptPkcs7Verify.c

$(OUTPUT_DIR)\Pk\CryptRsaExtNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptRsaExtNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptRsaExtNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptRsaExtNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptRsaExtNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptRsaExtNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptRsaExtNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptRsaExtNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptRsaExtNull.c

$(OUTPUT_DIR)\Hash\CryptSha512Null.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Hash\CryptSha512Null.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Hash\CryptSha512Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Hash\CryptSha512Null.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Hash\CryptSha512Null.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Hash\CryptSha512Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hash\CryptSha512Null.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Hash\CryptSha512Null.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Hash\CryptSha512Null.c

$(OUTPUT_DIR)\Pk\CryptPkcs7SignNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptPkcs7SignNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptPkcs7SignNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptPkcs7SignNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptPkcs7SignNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptPkcs7SignNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptPkcs7SignNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptPkcs7SignNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptPkcs7SignNull.c

$(OUTPUT_DIR)\Pk\CryptDhNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptDhNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptDhNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptDhNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptDhNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptDhNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptDhNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptDhNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptDhNull.c

$(OUTPUT_DIR)\SysCall\BaseMemAllocation.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\SysCall\BaseMemAllocation.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\SysCall\BaseMemAllocation.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\SysCall\BaseMemAllocation.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\SysCall\BaseMemAllocation.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\SysCall\BaseMemAllocation.c

$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\md5.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Include\stddef.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslconf.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\e_os2.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Include\sys\socket.h
$(OUTPUT_DIR)\Hash\CryptMd5.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hash\CryptMd5.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Hash\CryptMd5.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Hash\CryptMd5.c

$(OUTPUT_DIR)\Cipher\CryptArc4Null.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Cipher\CryptArc4Null.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Cipher\CryptArc4Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Cipher\CryptArc4Null.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Cipher\CryptArc4Null.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Cipher\CryptArc4Null.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Cipher\CryptArc4Null.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Cipher\CryptArc4Null.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Cipher\CryptArc4Null.c

$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\sha.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslconf.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Include\stddef.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\e_os2.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Include\sys\socket.h
$(OUTPUT_DIR)\Hash\CryptSha256.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Hash\CryptSha256.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Hash\CryptSha256.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Hash\CryptSha256.c

$(OUTPUT_DIR)\Pem\CryptPemNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pem\CryptPemNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pem\CryptPemNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pem\CryptPemNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pem\CryptPemNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pem\CryptPemNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pem\CryptPemNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pem\CryptPemNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pem\CryptPemNull.c

$(OUTPUT_DIR)\Rand\CryptRandNull.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Rand\CryptRandNull.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Rand\CryptRandNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Rand\CryptRandNull.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Rand\CryptRandNull.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Rand\CryptRandNull.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Rand\CryptRandNull.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Rand\CryptRandNull.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Rand\CryptRandNull.c

$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\obj_mac.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\time.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslconf.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\stdarg.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\symhacks.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\bn.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\rsa.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\ossl_typ.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\assert.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\sys\types.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\safestack.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\InternalCryptLib.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\bio.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\objects.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\sys\socket.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\opensslv.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\stack.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\e_os2.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\crypto.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\Library\BaseCryptLib.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\stdlib.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\asn1.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\stdio.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Include\openssl\ebcdic.h
$(OUTPUT_DIR)\Pk\CryptRsaBasic.obj : $(WORKSPACE)\CryptoPkg\Library\BaseCryptLib\Pk\CryptRsaBasic.c
	"$(CC)" /Foc:\1218_alibaba\Build\GRANTLEY\RELEASE_MYTOOLS\IA32\CryptoPkg\Library\BaseCryptLib\PeiCryptLib\OUTPUT\Pk\CryptRsaBasic.obj $(CC_FLAGS) -DPEI_BUILD $(INC) c:\1218_alibaba\CryptoPkg\Library\BaseCryptLib\Pk\CryptRsaBasic.c



#
# clean all intermediate files
#
clean:
	if exist $(OUTPUT_DIR) $(RD) $(OUTPUT_DIR)
	

#
# clean all generated files
#
cleanall:
	if exist $(DEBUG_DIR) $(RD) $(DEBUG_DIR)
	if exist $(OUTPUT_DIR) $(RD) $(OUTPUT_DIR)
	$(RM) *.pdb *.idb > NUL 2>&1
	$(RM) $(BIN_DIR)\$(MODULE_NAME).efi

#
# clean all dependent libraries built
#
cleanlib:
	@cd $(MODULE_BUILD_DIR)

