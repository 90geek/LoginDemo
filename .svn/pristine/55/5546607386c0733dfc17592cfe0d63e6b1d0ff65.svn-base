/**************************************************************************;
;*                                                                        *;
;*    Intel Confidential                                                  *;
;*                                                                        *;
;*    Intel Corporation - ACPI Reference Code for the Haswell             *;
;*    Family of Customer Reference Boards.                                *;
;*                                                                        *;
;*                                                                        *;
;*    Copyright (c)  1999 - 2012 Intel Corporation. All rights reserved   *;
;*    This software and associated documentation (if any) is furnished    *;
;*    under a license and may only be used or copied in accordance        *;
;*    with the terms of the license. Except as permitted by such          *;
;*    license, no part of this software or documentation may be           *;
;*    reproduced, stored in a retrieval system, or transmitted in any     *;
;*    form or by any means without the express written consent of         *;
;*    Intel Corporation.                                                  *;
;*                                                                        *;
;*                                                                        *;
;**************************************************************************/
/*++
  This file contains an 'Intel Peripheral Driver' and is
  licensed for Intel CPUs and chipsets under the terms of your  
  license agreement with Intel or your vendor.  This file may   
  be modified by the user, subject to additional terms of the   
  license agreement                                             
--*/   

Name (OPAC, 0)

OperationRegion(PWKE,PCI_Config,0x54,0x18)
Field(PWKE,DWordAcc,NoLock,Preserve)
{
      , 8,
  PMEE, 1, // PWR_CNTL_STS.PME_En
      , 6,
  PMES, 1, // PWR_CNTL_STS.PME_Sts
  Offset (0x0E),
      , 1,
  PWUC, 10 // Port Wake Up Capability Mask
}

//
// Indicate access to OperationRegions is enabled/disabled
//
Method (_REG, 2)
{
  // If OperationRegion ID = PCI_Config
  //
  If (LEqual (Arg0, 2))
  {
    // If access is enabled
    //
    If (LEqual(Arg1, 1))
    {
      // Set local flag
      //
      Store (One, OPAC)
    }
    Else
    {
      // Clear local flag
      //
      Store (One, OPAC)
    }
  }
}

//
// Enable/disable ports on this controller to wake the system
//
Method (_PSW,1)
{
  If (Arg0)
  {
    Store (Ones,PWUC)
  }
  Else
  {
    Store (0,PWUC)
  }
}

//
// Initialization for this controller
//
Method (_INI, 0)
{
  // If access to OperationRegion is enabled
  //
  If (LEqual (OPAC, One))
  {
    Store (1, PMES)     // clear PME status
    Store (0, PMEE)     // clear PME enable
  }
}

// The CRB leaves the USB ports on in S3/S4 to allow
// the ability to Wake from USB.  Therefore, define
// the below control methods to state D2 entry during
// the given S-State.

Method(_S3D,0)
{
  Return(2)
}

Method(_S4D,0)
{
  Return(2)
}

// AptioV Server override: Report the Device to OS.
//#if 0
Device(HUBN)
{
  Name(_ADR, Zero)

  Device(PR01)
  {
    Name(_ADR, One)

    //
    // There will have "Generic USB Hub" existed at Port 1 of each EHCI controller
    // in Windows "Device Manager" while RMH is enabled, so need to add _UPC
    // and _PLD to report OS that it's not user visible to pass WHQL: Single Computer
    // Display Object test in Win7
    //
    Method(_UPC,0,Serialized) {
      Name(UPCA, Package() { 0xFF,0x00,0x00,0x00 })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
      //
      // Due to USB3 software driver testing requirements, _UPC and _PLD
      // objects of all USB ports were modified. They are now Methods 
      // instead of Names, and the contents they return may be modified
      // according to configuration entered through BIOS setup. There are
      // 3 states: 
      //   - don't change _UPC/_PLD contents,
      //   - declare all ports as invisible (set BIT64 of _PLD buffer to 0),
      //   - declare all ports as unconnectable (set first field of _UPC package to 0)
      //
      If(LEqual(MPLD,2)) {
        Store(0x00,Index(UPCA,0))
      }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
      Return(UPCA)
    }
    Method(_PLD,0,Serialized) {
      Name(PLDP, Package() {
        Buffer (0x10) {
          0x81, 0x00, 0x00, 0x00,     // Revision 1, Ignore color
          0x00, 0x00, 0x00, 0x00,
          0x30, 0x1C, 0x00, 0x00,     // Panel Unknown, Shape Unknown
          0x00, 0x00, 0x00, 0x00}
          })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If (LEqual(MPLD,1)) {
          CreateBitField(DeRefOf(Index(PLDP,0)),64,VIS)
          And(VIS,0,VIS)
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return (PLDP)
      }

    Device(PR11)
    {
      Name(_ADR, One)
      Method(_UPC,0,Serialized) {
        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If(LEqual(MPLD,2)) {
          Store(0x00,Index(UPCP,0))
        }
#endif //SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return(UPCP)
      }
      Method(_PLD,0,Serialized) {
        Name(PLDP, Package() {
          Buffer (0x10) {
            0x81, 0x00, 0x00, 0x00,     // Revision 1, Ignore color
            0x00, 0x00, 0x00, 0x00,
            0xE1, 0x1C, 0x00, 0x00,     // Front Panel, Vertical Upper, Horz. Left, Shape Unknown
            0x00, 0x00, 0x00, 0x00}
          })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If (LEqual(MPLD,1)) {
          CreateBitField(DeRefOf(Index(PLDP,0)),64,VIS)
          And(VIS,0,VIS)
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return (PLDP)
      }
    }

    Device(PR12)
    {
      Name(_ADR, 0x02)
      Method(_UPC,0,Serialized) {
        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If(LEqual(MPLD,2)) {
          Store(0x00,Index(UPCP,0))
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return(UPCP)
      }
      Method(_PLD,0,Serialized) {
        Name(PLDP, Package() {
          Buffer (0x10) {
            0x81, 0x00, 0x00, 0x00,     // Revision 1, Ignore color
            0x00, 0x00, 0x00, 0x00,
            0xE1, 0x1D, 0x00, 0x00,     // Front Panel, Vertical Center, Horz. Left, Shape Unknown
            0x00, 0x00, 0x00, 0x00}
          })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If (LEqual(MPLD,1)) {
          CreateBitField(DeRefOf(Index(PLDP,0)),64,VIS)
          And(VIS,0,VIS)
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return (PLDP)
      }
      Alias(SBV1,SDGV) // copy USB Sideband Deferring GPE Vector (HOST_ALERT#1) to DSM method
      Include("UsbSBD.asi")
    }

    Device(PR13)
    {
      Name(_ADR, 0x03)
      Method(_UPC,0,Serialized) {
        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If(LEqual(MPLD,2)) {
          Store(0x00,Index(UPCP,0))
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return(UPCP)
      }
      Method(_PLD,0,Serialized) {
        Name(PLDP, Package() {
          Buffer (0x10) {
            0x81, 0x00, 0x00, 0x00,     // Revision 1, Ignore color
            0x00, 0x00, 0x00, 0x00,
            0xE1, 0x1D, 0x00, 0x00,     // Front Panel, Vertical Center, Horz. Left, Shape Unknown
            0x00, 0x00, 0x00, 0x00}
          })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If (LEqual(MPLD,1)) {
          CreateBitField(DeRefOf(Index(PLDP,0)),64,VIS)
          And(VIS,0,VIS)
        }
#endif // SV_HOOKS_PCH
// LPT:RestrictedEnd
//
        Return (PLDP)
      }
      Alias(SBV2,SDGV) // copy USB Sideband Deferring GPE Vector (HOST_ALERT#2) to DSM method
      Include("UsbSBD.asi")
    }

    Device(PR14)
    {
      Name(_ADR, 0x04)
      Method(_UPC,0,Serialized) {
        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If(LEqual(MPLD,2)) {
          Store(0x00,Index(UPCP,0))
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return(UPCP)
      }
      Method(_PLD,0,Serialized) {
        Name(PLDP, Package() {
          Buffer (0x10) {
            0x81, 0x00, 0x00, 0x00,     // Revision 1, Ignore color
            0x00, 0x00, 0x00, 0x00,
            0xE1, 0x1E, 0x00, 0x00,     // Front Panel, Vertical Lower, Horz. Left, Shape Unknown
            0x00, 0x00, 0x00, 0x00}
          })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If (LEqual(MPLD,1)) {
          CreateBitField(DeRefOf(Index(PLDP,0)),64,VIS)
          And(VIS,0,VIS)
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return (PLDP)
      }
    }

    Device(PR15)
    {
      Name(_ADR, 0x05)
      Method(_UPC,0,Serialized) {
        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If(LEqual(MPLD,2)) {
          Store(0x00,Index(UPCP,0))
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return(UPCP)
      }
      Method(_PLD,0,Serialized) {
        Name(PLDP, Package() {
          Buffer (0x10) {
            0x81, 0x00, 0x00, 0x00,     // Revision 1, Ignore color
            0x00, 0x00, 0x00, 0x00,
            0xB1, 0x1E, 0x00, 0x00,     // Panel Unknown, Shape Unknown
            0x00, 0x00, 0x00, 0x00}
          })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If (LEqual(MPLD,1)) {
          CreateBitField(DeRefOf(Index(PLDP,0)),64,VIS)
          And(VIS,0,VIS)
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return (PLDP)
      }
    }

    Device(PR16)
    {
      Name(_ADR, 0x06)
      Method(_UPC,0,Serialized) {
        Name(UPCP, Package() { 0xFF,0xFF,0x00,0x00 })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If(LEqual(MPLD,2)) {
          Store(0x00,Index(UPCP,0))
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return(UPCP)
      }
      Method(_PLD,0,Serialized) {
        Name(PLDP, Package() {
          Buffer (0x10) {
            0x81, 0x00, 0x00, 0x00,     // Revision 1, Ignore color
            0x00, 0x00, 0x00, 0x00,
            0xB1, 0x1E, 0x00, 0x00,     // Panel Unknown, Shape Unknown
            0x00, 0x00, 0x00, 0x00}
          })
//
// LPT:RestrictedBegin
//
#ifdef SV_HOOKS_PCH
        If (LEqual(MPLD,1)) {
          CreateBitField(DeRefOf(Index(PLDP,0)),64,VIS)
          And(VIS,0,VIS)
        }
#endif // SV_HOOKS_PCH
//
// LPT:RestrictedEnd
//
        Return (PLDP)
      }
    }
  } // End of PR01
} // End of HUBN
//#endif
// AptioV Server override: Report the Device to OS.

